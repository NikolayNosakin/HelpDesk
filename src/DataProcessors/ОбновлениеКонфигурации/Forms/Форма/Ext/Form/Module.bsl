////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отказ = Истина;
	//ПрочитатьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура Восстановить(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощник(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТестыОтдельныхФункций(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

//&НаКлиенте
//Процедура Применить(Команда)
//	ПрименитьНастройки();
//	ПоказатьОповещениеПользователя(НСтр("ru = 'Настройки применены'"),, НСтр("ru = 'Переоткройте помощник обновления конфигурации, если он запущен.'"));
//КонецПроцедуры

//&НаКлиенте
//Процедура Восстановить(Команда)
//	
//	Ответ = Вопрос(НСтр("ru = 'Восстановить настройки по умолчанию?'"), РежимДиалогаВопрос.ОКОтмена);
//	Если Ответ = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли;
//	ВосстановитьНастройки();
//	ПоказатьОповещениеПользователя(НСтр("ru = 'Настройки восстановлены'")
//	,, НСтр("ru = 'Переоткройте помощник обновления конфигурации, если он запущен.'"));
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОткрытьПомощник(Команда)
//	ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма");
//КонецПроцедуры

//&НаКлиенте
//Процедура ТестыОтдельныхФункций(Команда)
//	ОткрытьФорму("Обработка.ИнструментыРазработчикаОбновлениеКонфигурации.Форма.ТестыОтдельныхФункций");
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//&НаСервере
//Процедура ВосстановитьНастройки()
//	
//	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации", Новый Структура
//	);
//	
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "КороткоеИмяКонфигурации", Неопределено, Ложь);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "АдресСервераДляПроверкиНаличияОбновления", Неопределено, Ложь);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "АдресРесурсовДляПроверкиНаличияОбновления", Неопределено, Ложь);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "АдресСервераОбновлений", Неопределено, Ложь);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "АдресКаталогаШаблоновНаСервереОбновлений", Неопределено, Ложь);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "РежимОтладкиСкрипта", Неопределено, Ложь);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "РежимИмитацииКлиентСервернойИБ", Неопределено, Ложь);
//	
//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации", 
//		СтруктураНастройки
//	);
//	
//	ПрочитатьНастройки();

//КонецПроцедуры

//&НаСервере
//Процедура ПрименитьНастройки()

//	НастройкиОбновления = ОбновлениеКонфигурации.ПолучитьНастройкиОбновления();
//	
//	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации", НастройкиОбновления
//	);
//	
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "КороткоеИмяКонфигурации", 
//		Объект.КороткоеИмяКонфигурации, Объект.ИспКороткоеИмяКонфигурации);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "АдресСервераДляПроверкиНаличияОбновления", 
//		Объект.АдресСервераДляПроверкиНаличияОбновления, Объект.ИспАдресСервераДляПроверкиНаличияОбновления);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "АдресРесурсаДляПроверкиНаличияОбновления", 
//		Объект.АдресРесурсаДляПроверкиНаличияОбновления, Объект.ИспАдресРесурсаДляПроверкиНаличияОбновления);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "КаталогОбновлений", 
//		Объект.АдресСервераОбновлений, Объект.ИспАдресСервераОбновлений);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "РежимОтладкиСкрипта", РежимОтладкиСкрипта, РежимОтладкиСкрипта);
//	ЗаписатьНастройкуПоИмени(СтруктураНастройки, "РежимИмитацииКлиентСервернойИБ", РежимИмитацииКлиентСервернойИБ, РежимИмитацииКлиентСервернойИБ);
//	
//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации", 
//		СтруктураНастройки
//	);
//	
//	ОбновитьПовторноИспользуемыеЗначения();
//	ПрочитатьНастройки();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПрочитатьНастройки()
//	
//	НастройкиОбновления = ОбновлениеКонфигурации.ПолучитьНастройкиОбновления();
//	
//	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации", НастройкиОбновления
//	);
//	
//	Объект.ИспКороткоеИмяКонфигурации = Ложь;
//	СтруктураНастройки.Свойство("ИспользоватьЗначениеНастройкиКороткоеИмяКонфигурации", 
//		Объект.ИспКороткоеИмяКонфигурации);
//	Объект.КороткоеИмяКонфигурации = НастройкиОбновления.КороткоеИмяКонфигурации;
//	Если Объект.ИспКороткоеИмяКонфигурации Тогда
//		СтруктураНастройки.Свойство("КороткоеИмяКонфигурации", Объект.КороткоеИмяКонфигурации);
//	КонецЕсли;
//	
//	Объект.ИспАдресСервераДляПроверкиНаличияОбновления = Ложь;
//	СтруктураНастройки.Свойство("ИспользоватьЗначениеНастройкиАдресСервераДляПроверкиНаличияОбновления", 
//		Объект.ИспАдресСервераДляПроверкиНаличияОбновления);
//	Объект.АдресСервераДляПроверкиНаличияОбновления = НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления;
//	Если Объект.ИспАдресСервераДляПроверкиНаличияОбновления Тогда
//		СтруктураНастройки.Свойство("АдресСервераДляПроверкиНаличияОбновления", Объект.АдресСервераДляПроверкиНаличияОбновления);
//	КонецЕсли;
//	
//	Объект.ИспАдресРесурсаДляПроверкиНаличияОбновления = Ложь;
//	СтруктураНастройки.Свойство("ИспользоватьЗначениеНастройкиАдресРесурсаДляПроверкиНаличияОбновления", 
//		Объект.ИспАдресРесурсаДляПроверкиНаличияОбновления);
//	Объект.АдресРесурсаДляПроверкиНаличияОбновления = НастройкиОбновления.АдресРесурсаДляПроверкиНаличияОбновления;
//	Если Объект.ИспАдресРесурсаДляПроверкиНаличияОбновления Тогда
//		СтруктураНастройки.Свойство("АдресРесурсаДляПроверкиНаличияОбновления", Объект.АдресРесурсаДляПроверкиНаличияОбновления);
//	КонецЕсли;
//	
//	Объект.ИспАдресСервераОбновлений = Ложь;
//	СтруктураНастройки.Свойство("ИспользоватьЗначениеНастройкиКаталогОбновлений", 
//		Объект.ИспАдресСервераОбновлений);
//	Объект.АдресСервераОбновлений = НастройкиОбновления.КаталогОбновлений;
//	Если Объект.ИспАдресСервераОбновлений Тогда
//		СтруктураНастройки.Свойство("КаталогОбновлений", Объект.АдресСервераОбновлений);
//	КонецЕсли;
//	
//	РежимОтладкиСкрипта = Ложь;
//	Если НЕ СтруктураНастройки.Свойство("РежимОтладкиСкрипта", РежимОтладкиСкрипта) Тогда
//		РежимОтладкиСкрипта = Ложь;
//	КонецЕсли;
//	
//	РежимИмитацииКлиентСервернойИБ = Ложь;
//	Если НЕ СтруктураНастройки.Свойство("РежимИмитацииКлиентСервернойИБ", РежимИмитацииКлиентСервернойИБ) Тогда
//		РежимИмитацииКлиентСервернойИБ = Ложь;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Процедура ЗаписатьНастройкуПоИмени(СтруктураНастройки, Знач ИмяНастройки, Знач Значение, Знач Использовать)

//	Если СтруктураНастройки = Неопределено Тогда 
//		СтруктураНастройки = Новый Структура();
//	КонецЕсли;	
//	СтруктураНастройки.Вставить("ИспользоватьЗначениеНастройки" + ИмяНастройки, Использовать);
//	Если Использовать Тогда
//		СтруктураНастройки.Вставить(ИмяНастройки, Значение);
//	КонецЕсли;
//	
//КонецПроцедуры

