
// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ
&НаКлиенте
Перем IE; 
// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ


//события формы и элементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Сообщить("Внимание! Похоже, у Вас недостаточно прав для управления учетными записями пользователей! Необходимы права администратора или полные права.", СтатусСообщения.Важное);
	КонецЕсли;
	
	//Если Не УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
	//	Сообщить("Внимание! В данной базе используется НЕ упрощенный интерфейс настройки прав доступа. В текущей версии обработки поддерживается работа только с упрощенным интерфейсом!", СтатусСообщения.Важное);
	//КонецЕсли;

	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Сообщить("Внимание! В данной базе включено ограничение доступа на уровне записей. В текущей версии обработки работа с ограничениями не поддерживается!", СтатусСообщения.Важное);
	КонецЕсли;

	//имя и версия обработки
	
	ИДПубликации = "";
	ИДОбработки = "";
	ИДПрофиля = "";
	Версия = "";
	Дата = "";
	
	ОбработкаОбъектМетаданные = РеквизитФормыВЗначение("Объект").Метаданные();
	
	// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ
	//Попытка
	//	СтрокаДляРазбора = ОбработкаОбъектМетаданные.Комментарий;
	//	Счетчик = 1;
	//	ТекПодстрока = ПолучитьСледующуюПодстроку(СтрокаДляРазбора);
	//	Пока Не ПустаяСтрока(ТекПодстрока) Цикл 
	//		Если Счетчик = 1 Тогда
	//			ИДПрофиля = СокрЛП(ТекПодстрока);
	//		ИначеЕсли Счетчик = 2 Тогда
	//			ИДПубликации = СокрЛП(ТекПодстрока);
	//		ИначеЕсли Счетчик = 3 Тогда
	//			ИДОбработки = СокрЛП(ТекПодстрока);
	//		ИначеЕсли Счетчик = 4 Тогда
	//			Версия = СокрЛП(ТекПодстрока);
	//		ИначеЕсли Счетчик = 5 Тогда
	//			Дата = СокрЛП(ТекПодстрока);
	//		КонецЕсли;
	//		ТекПодстрока = ПолучитьСледующуюПодстроку(СтрокаДляРазбора);
	//		Счетчик = Счетчик + 1;
	//	КонецЦикла;		
	//Исключение
	//КонецПопытки;
	//
	//ПроверятьОбновлениеРазработкиПриОткрытии = Истина;
	ПроверятьОбновлениеРазработкиПриОткрытии = Ложь;	
	// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ

	ИмяОбработки = ОбработкаОбъектМетаданные.Имя;
	
	//заголовок формы
	//Заголовок = ОбработкаОбъектМетаданные.Синоним + ?(ПустаяСтрока(Версия), "", " (" + Версия + ?(ПустаяСтрока(Дата), "", ", " + Дата) + ")");
	
	// Заполнение данных.
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЛОЖЬ КАК Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	Профили.Ссылка.Наименование КАК ПрофильПредставление,
	|	Профили.Пометка
	|ИЗ
	|	Профили КАК Профили
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофильПредставление";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВРеквизитФормы(РезультатыЗапроса.Выгрузить(), "Профили");
	
	/////////////////////////////////
	
	
	LDAP_HDR = "LDAP://"; 
	
	//адрес LDAP по умолчанию
	LDAPText = LDAP_HDR + ПолучитьДоменПоУмолчанию();
	
	//языки
	Для Каждого МетаЯзык Из Метаданные.Языки Цикл
		Элементы.Язык.СписокВыбора.Добавить(МетаЯзык.Имя, МетаЯзык.Синоним);
	КонецЦикла;
	Если Элементы.Язык.СписокВыбора.Количество() = 1 Тогда
		Язык = Элементы.Язык.СписокВыбора[0].Значение;
	КонецЕсли;
	
	// список выбора режимов запуска
	Для каждого Режим Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(Режим);
		ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
		Элементы.РежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(Режим));
	КонецЦикла;
	Элементы.РежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ
  	Элементы.ФормаРежимПроверкиОбновлений.Пометка = ПроверятьОбновлениеРазработкиПриОткрытии;
    Если ПроверятьОбновлениеРазработкиПриОткрытии Тогда
        ПодключитьОбработчикОжидания("ПроверитьОбновлениеРазработки", 10, Истина);
	КонецЕсли;
	// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ
	
	Если Не ПустаяСтрока(LDAPText) Тогда
		ЗаполнитьТаблицуПользователейКлиент();  
	КонецЕсли;
	
	Элементы.ТаблицаПользователейРежимВключаяПодчиненные.Пометка = Рекурсивно;

КонецПроцедуры

&НаКлиенте
Процедура РекурсивноПриИзменении(Элемент)
	
	ЗаполнитьТаблицуПользователейКлиент(); 
	
КонецПроцедуры

&НаКлиенте
Процедура LDAPTextНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Обработка.ЗагрузкаУчетныхЗаписейИзAD.Форма.ФормаДереваAD", Новый Структура("LDAPText", LDAPText), Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура LDAPTextОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		LDAPText = ВыбранноеЗначение;
		ЗаполнитьТаблицуПользователейКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура LDAPTextОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
	СтарыйТекст = LDAPText;
	LDAPText = Текст;
	
	ЕстьОшибки = Ложь;
	ЗаполнитьТаблицуПользователейКлиент(ЕстьОшибки);
	//Если ЕстьОшибки Тогда
	//	 LDAPText = СтарыйТекст;
	//КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПрофилиПрофильПредставление" Тогда
		ОткрытьФорму("Справочник.ПрофилиГруппДоступа.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Профиль), ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Пользователь1С = НайтиПользователя1С(Элемент.ТекущиеДанные.ИдентификаторПользователяИБ);
	Если ЗначениеЗаполнено(Пользователь1С) Тогда
		ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", Пользователь1С), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


//команды

&НаКлиенте
Процедура ЗагрузитьПользователейКлиент(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	//проверка наличия выбранных строк таблицы пользователей AD
	ВыбранныеСтрокиТаблицыПользователей = ТаблицаПользователей.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ВыбранныеСтрокиТаблицыПользователей.Количество() = 0 Тогда 
		ПоказатьПредупреждение(,"Не выбрано ни одного пользователя для загрузки!");
		Возврат;
	КонецЕсли;
	
	//проверка выбора польователей, уже имеющих аккаунт в 1с
	ЕстьЗагруженныеПользователи = Ложь;
	Для Каждого Стр Из ВыбранныеСтрокиТаблицыПользователей Цикл
		Если ЗначениеЗаполнено(Стр.ИдентификаторПользователяИБ) Тогда
			ЕстьЗагруженныеПользователи = Истина;
			Прервать;;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗагруженныеПользователи Тогда
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗагрузки", ЭтаФорма, Новый Структура);
		ПоказатьВопрос(Оповещение, "Выбраны один или несколько пользователей, у которых уже имеется учетная запись в базе данных. При загрузке их права будут перезаписаны. Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователей()
	
	//загрузка
	Состояние("Загрузка пользователей...");
	ЕстьОшибки = Ложь;
	ЗагрузитьПользователейСервер(ЕстьОшибки);
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(,"Ошибки при загрузке пользователей! См. окно сообщений.", ,"Внимание!")
	Иначе
		ПоказатьПредупреждение(,"Загрузка успешно завершена!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗагрузки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПользователей(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ВыбранныеСтрокиТаблицыПользователей = ТаблицаПользователей.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	//проверка выбора пользователей, уже имеющих аккаунт в 1с
	ОтмеченыСуществующиеПользователи = Ложь;
	Для Каждого Стр Из ВыбранныеСтрокиТаблицыПользователей Цикл
		Если ЗначениеЗаполнено(Стр.ИдентификаторПользователяИБ) Тогда
			ОтмеченыСуществующиеПользователи = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ОтмеченыСуществующиеПользователи Тогда
		ПоказатьПредупреждение(,"Не выбрано ни одного пользователя с уже существующим аккаунтом 1С!");
		Возврат;
	КонецЕсли;
	
	//загрузка
	Состояние("Отключение пользователей...");
	ЕстьОшибки = Ложь;
	ОтключитьПользователейСервер(ЕстьОшибки);
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(,"Ошибки при отключении пользователей! См. окно сообщений.", ,"Внимание!")
	Иначе
		ПоказатьПредупреждение(,"Отключение пользователей успешно завершено!");
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехПользователейAD(Команда)
	
	Для Каждого Стр Из ТаблицаПользователей Цикл
		Стр.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборПользователейAD(Команда)
	
	Для Каждого Стр Из ТаблицаПользователей Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНовыхПользователейAD(Команда)
	
	Для Каждого Стр Из ТаблицаПользователей Цикл
		Стр.Пометка = Не ЗначениеЗаполнено(Стр.ИдентификаторПользователяИБ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСписокПользователейAD(Команда)
	
	ЗаполнитьТаблицуПользователейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВключаяПодчиненные(Команда)
	Рекурсивно = Не Рекурсивно;
	Элементы.ТаблицаПользователейРежимВключаяПодчиненные.Пометка = Рекурсивно;
	ЗаполнитьТаблицуПользователейКлиент();
КонецПроцедуры


//процедуры и функции 

&НаСервере
Функция ПолучитьДоменПоУмолчанию() Экспорт
	
	//определяем текущий домен
	Попытка 
		adsi = ПолучитьCOMОбъект(LDAP_HDR + "RootDSE");
		Возврат adsi.Get("rootDomainNamingContext");
	Исключение
		Сообщить("Не удалось определить текущий домен!");
		Возврат "";
	КонецПопытки;
	
КонецФункции //ПолучитьДоменПоУмолчанию

&НаКлиенте
Процедура ЗаполнитьТаблицуПользователейКлиент(ЕстьОшибки = Ложь) 
	
	#Если Клиент Тогда
		Состояние("Заполнение таблицы пользователей AD...");
	#КонецЕсли
	
	ОписаниеОшибок = "";
	
	ЗаполнитьТаблицуПользователей(ЕстьОшибки, ОписаниеОшибок);
	
	Если ЕстьОшибки Тогда
		Состояние(ОписаниеОшибок,, "Ошибки при выполнения LDAP-запроса!");
	Иначе
		Состояние();
	КонецЕсли;
	
	Элементы.LDAPText.Подсказка = ОписаниеОшибок;
	Элементы.LDAPText.ЦветТекста = ?(ЕстьОшибки, WebЦвета.Красный, Новый Цвет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПользователей(ЕстьОшибки = Ложь, ОписаниеОшибок = "") Экспорт             
	
	ТаблицаПользователей.Очистить();
	
	ОписаниеОшибок = "";
	
	Если ПустаяСтрока(LDAPText) Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////
	rs = ПолучитьВыборкуLDAP("<" + СокрЛП(LDAPText) + ">;(&(objectCategory=person)(objectClass=user));ADsPath, Name, DisplayName, Mail, telephoneNumber, sAMAccountName;" + ?(Рекурсивно, "subtree", "onelevel"),, ОписаниеОшибок);
	Если rs = Неопределено Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		Сч = 0;
		
		Попытка
			
			Если rs.RecordCount > 0 Тогда
				Пока Не rs.EOF Цикл  
					
					//obj = ПолучитьCOMОбъект(rs.Fields("ADsPath").Value);
					
					АккаунтИмя = rs.Fields("sAMAccountName").Value;
					
					ADsPath = rs.Fields("ADsPath").Value;
					Поз = Найти(ADsPath, "DC=");
					Если Поз > 0 Тогда
						АккаунтДомен = Сред(ADsPath, Поз+3);
						Поз = Найти(АккаунтДомен, ",");
						Если Поз >  0 Тогда
							АккаунтДомен = Лев(АккаунтДомен, Поз-1);
						КонецЕсли;
						//Иначе
						//	АккаунтДомен = ДоменПоУмолчанию;
					КонецЕсли;
					
					Если Не ПустаяСтрока(АккаунтИмя) Тогда
						НоваяСтрока = ТаблицаПользователей.Добавить();
						НоваяСтрока.Имя = rs.Fields("DisplayName").Value;
						НоваяСтрока.Аккаунт = АккаунтИмя;
						НоваяСтрока.Домен = АккаунтДомен;
						НоваяСтрока.Email =  rs.Fields("Mail").Value;
						НоваяСтрока.Телефон =  rs.Fields("telephoneNumber").Value;
						
						ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(АккаунтИмя);
						Если Не ПользовательИБ = Неопределено Тогда
							НоваяСтрока.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;  
						КонецЕсли;
						
					КонецЕсли;
					
					rs.MoveNext();
					Сч = Сч + 1;
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			
			ЕстьОшибки = Истина;
			ОписаниеОшибок = "Ошибка при получении данных!";
			Сообщить("Ошибка при получении данных: " + ОписаниеОшибки(), СтатусСообщения.Важное); 
		
		КонецПопытки;
		
		rs.Close();
		rs = Неопределено;
		
	КонецЕсли;
	
	ТаблицаПользователей.Сортировать("Имя Возр");
	
КонецПроцедуры  //ЗаполнитьТаблицуПользователей

&НаСервере
Функция ПолучитьВыборкуLDAP(ТекстЗапросаLDAP, conn = Неопределено, ОписаниеОшибок = "")
	
	Попытка 
		Если conn = Неопределено Тогда
			conn = СоздатьПодключениеКAD(ОписаниеОшибок);
			Если conn = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;

		cmd = Новый COMОбъект("ADODB.Command");
		cmd.ActiveConnection = conn;
		cmd.Properties("Page Size").Value = 100;
		cmd.Properties("Cache Results").Value = True;
		cmd.CommandText = ТекстЗапросаLDAP;
		
		Возврат cmd.Execute();
		
	Исключение
		
		ОписаниеОшибок = "Не удалось выполнить LDAP запрос!";
		
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СоздатьПодключениеКAD(ОписаниеОшибок = "")
	
	ПодключениеКAD = Неопределено;
	
	Попытка
		ПодключениеКAD = Новый COMОбъект("ADODB.Connection");
		ПодключениеКAD.Provider = "ADSDSOObject";
		//If the cursorLocation property of the Connection object is adUseClient, then the default
		//cursorType of any Recordset object using this Connection object will be adOpenStatic. 
		//This allows us to declare an ADO Command object, assign values to the Command object properties like "Page Size",
		//and use the Execute method of the Command object to create the recordset. 
		//This is necessary if you need a cursor that allows movement forward and backward and you need to retrieve more than 1000 rows.
		ПодключениеКAD.cursorLocation = 3; //adUseClient
		ПодключениеКAD.Open("ADs Provider");
	Исключение
		ПодключениеКAD = Неопределено;
		ОписаниеОшибок = "Не удалось создать подключение к Active Directory!";
	КонецПопытки;
	
	Возврат ПодключениеКAD;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПользователейСервер(ЕстьОшибки = Ложь)
	
	Для Каждого Стр Из ТаблицаПользователей Цикл
		Если Стр.Пометка Тогда
			
			ЕстьОшибкиВСтроке = Ложь;
			
			НачатьТранзакцию();
			
			Попытка
				
				АккаунтОС = "\\" + Стр.Домен + "\" + Стр.Аккаунт;
				
				Пользователь1С = НайтиПользователя1С(Стр.ИдентификаторПользователяИБ);
				Если ЗначениеЗаполнено(Пользователь1С) Тогда
					ПользовательОбъект = Пользователь1С.ПолучитьОбъект();
				Иначе
					ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
				КонецЕсли;
				
				ПользовательОбъект.Наименование = Стр.Имя;
				
				//контактная информация пользователя
				Если ЗначениеЗаполнено(Стр.Email) Тогда
					СтрокиEmail = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя));
					Если СтрокиEmail.Количество() > 0 Тогда
						СтрокаEmail = СтрокиEmail[0];
					Иначе
						СтрокаEmail = ПользовательОбъект.КонтактнаяИнформация.Добавить();
						СтрокаEmail.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
					КонецЕсли;
					СтрокаEmail.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					СтрокаEmail.Представление = Стр.Email;
					СтрокаEmail.АдресЭП = Стр.Email;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Стр.Телефон) Тогда
					СтрокиТелефон = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя));
					Если СтрокиТелефон.Количество() > 0 Тогда
						СтрокаТелефон = СтрокиТелефон[0];
					Иначе
						СтрокаТелефон = ПользовательОбъект.КонтактнаяИнформация.Добавить();
						СтрокаТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
					КонецЕсли;
					СтрокаТелефон.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрокаТелефон.Представление = Стр.Телефон;
					СтрокаТелефон.НомерТелефона = Стр.Телефон;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Стр.Аккаунт) Тогда
					СтрокиДомена = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ДоменноеИмяПользователя));
					Если СтрокиДомена.Количество() > 0 Тогда
						СтрокаДомена = СтрокиДомена[0];
					Иначе
						СтрокаДомена = ПользовательОбъект.КонтактнаяИнформация.Добавить();
						СтрокаДомена.Вид = Справочники.ВидыКонтактнойИнформации.ДоменноеИмяПользователя;
					КонецЕсли;
					СтрокаДомена.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
					СтрокаДомена.Представление = Стр.Аккаунт;
				КонецЕсли;

				//описание пользователя БД
				ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
				
				ОписаниеПользователяИБ.Имя = Стр.Аккаунт;
				ОписаниеПользователяИБ.ПолноеИмя = Стр.Имя;
				ОписаниеПользователяИБ.АутентификацияСтандартная = Ложь;
				ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
				ОписаниеПользователяИБ.АутентификацияОС = Истина;
				ОписаниеПользователяИБ.ПользовательОС = АккаунтОС;
				ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
				ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
				ОписаниеПользователяИБ.Язык = Язык;
				ОписаниеПользователяИБ.РежимЗапуска = РежимЗапуска;
				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
				
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				
				ПользовательОбъект.Недействителен = Ложь;
				ПользовательОбъект.Записать();
				
				// профили пользователя
				
				ОбновитьПраваПользователя(ПользовательОбъект.Ссылка, Профили.Выгрузить(,"Пометка,Профиль"));
				
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = "Загружен пользователь '" + Стр.Имя + "'";
				//Сообщение.УстановитьДанные(ПользовательОбъект.Ссылка);
				//Сообщение.Сообщить();
				
			Исключение 
				
				ЕстьОшибкиВСтроке = Истина;
				Сообщить("Ошибка при загрузке пользователя '" + Стр.Имя + "': " + ОписаниеОшибки() + "!", СтатусСообщения.Важное);
				
			КонецПопытки;
			
			Если ЕстьОшибкиВСтроке 
				И Не ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
				Стр.Пометка = Ложь;
				Стр.ИдентификаторПользователяИБ = ПользовательОбъект.ИдентификаторПользователяИБ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтключитьПользователейСервер(ЕстьОшибки = Ложь)
	
	Для Каждого Стр Из ТаблицаПользователей Цикл
		Если Стр.Пометка 
			И ЗначениеЗаполнено(Стр.ИдентификаторПользователяИБ) Тогда
			
			ЕстьОшибкиВСтроке = Ложь;
			
			НачатьТранзакцию();
			
			Попытка
				
				
				Пользователь1С = НайтиПользователя1С(Стр.ИдентификаторПользователяИБ);
				Если ЗначениеЗаполнено(Пользователь1С) Тогда				
					
					ПользовательОбъект = Пользователь1С.ПолучитьОбъект();
					
					//описание пользователя БД
					ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
					ОписаниеПользователяИБ.Вставить("Действие", "Удалить");
					
					ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
					
					ПользовательОбъект.Недействителен = Истина;
					
					ПользовательОбъект.Записать();
					
					// профили пользователя
					
					//ОбновитьПраваПользователя(ПользовательОбъект.Ссылка, Профили.Выгрузить(,"Пометка,Профиль"));
					
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = "Отключен пользователь '" + Стр.Имя + "'";
					//Сообщение.УстановитьДанные(ПользовательОбъект.Ссылка);
					//Сообщение.Сообщить();
					
				КонецЕсли;
				
			Исключение 
				
				ЕстьОшибкиВСтроке = Истина;
				Сообщить("Ошибка при отключении пользователя '" + Стр.Имя + "': " + ОписаниеОшибки() + "!", СтатусСообщения.Важное);
				
			КонецПопытки;
			
			Если ЕстьОшибкиВСтроке 
				И Не ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
				Стр.Пометка = Ложь;
				Стр.ИдентификаторПользователяИБ = ПользовательОбъект.ИдентификаторПользователяИБ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//процедура создана на базе типовой процедуры ЗаписатьИзмененияНаСервере модуля общей формы ПраваДоступаУпрощенно
&НаСервере
Процедура ОбновитьПраваПользователя(Пользователь, ПрофилиПользователя)
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Профили", ПрофилиПользователя);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИзмененныхГрупп.Профиль
	|ПОМЕСТИТЬ ПрофилиИзмененныхГрупп
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка) КАК ПрофилиИзмененныхГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	Профили.Пометка,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	ПрофилиИзмененныхГрупп КАК ПрофилиИзмененныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = ТекущиеПрофили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|		ПО (СправочникПрофили.Ссылка = ПрофилиИзмененныхГрупп.Профиль)";
	
	//НачатьТранзакцию();
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
				ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
			Иначе
				// Создание персональной группы доступа.
				ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				//ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
				ГруппаДоступаОбъект.Пользователь = Пользователь;
				ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
			КонецЕсли;
			
			Если Выборка.Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				
				Если Выборка.Пометка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(
							Пользователь, "Пользователь") = Неопределено Тогда
						
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
						Пользователь, "Пользователь");
					
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						
						Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
							// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
							НайденПользовательИБ = Ложь;
							Для каждого ОписаниеПользователя ИЗ ГруппаДоступаОбъект.Пользователи Цикл
								Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
								   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
								     	ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ)
								     	<> Неопределено Тогда
									
									НайденПользовательИБ = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ НайденПользовательИБ Тогда
								ВызватьИсключение
									НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
									           |которому разрешен доступ к информационной базе.'");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ГруппаДоступаОбъект.Пользователи.Очистить();
				Если Выборка.Пометка Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
				КонецЕсли;
				
			КонецЕсли;
			ГруппаДоступаОбъект.Записать();
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			КонецЕсли;
		КонецЦикла;
		//ЗафиксироватьТранзакцию();
		Модифицированность = Ложь;
	Исключение
		//ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		ВызватьИсключение ("Ошибка про создании/обновлении прав пользователя " + Пользователь + ": " + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

 &НаСервере
Функция НайтиПользователя1С(ИдентификаторПользователяИБ)
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
КонецФункции



// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ  утащено с http://infostart.ru/public/137694/
////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
//Сводная процедура содержащая все возможные команды чтобы их не держать в разных местах
Процедура РаботаССайтом(Кнопка)

    Задача = ?(ТипЗнч(Кнопка) = Тип("Строка"), Кнопка, Кнопка.Имя); // универсально получаем Задачу и выполняем ее

    Если Задача = "ОткрытьСайт" Тогда

        НачатьЗапускПриложения(Неопределено, "http://www.infostart.ru/");

    ИначеЕсли Задача = "ОткрытьСтраницуАвтора" Тогда

        НачатьЗапускПриложения(Неопределено, "http://infostart.ru/profile/" + ИДПрофиля + "/public/");

    ИначеЕсли Задача = "ОткрытьСтраницуРазработки" Тогда

        НачатьЗапускПриложения(Неопределено, "http://infostart.ru/public/" + ИДПубликации + "/");

    ИначеЕсли Задача = "РекомендаватьРазработку" Тогда

        НачатьЗапускПриложения(Неопределено, "http://infostart.ru/public/" + ИДПубликации + "?rate=1");

    ИначеЕсли Задача = "ПроверитьОбновлениеРазработки" Тогда

        ПроверитьОбновлениеРазработки(); // небольшая зацикленность но для порядка нужна

    ИначеЕсли Задача = "НачатьПроверкуВерсий" Тогда

       // Состояние("Поиск обновлений...");
        Попытка
            IE = Новый COMОбъект("InternetExplorer.Application");
        Исключение
            ПоказатьОповещениеПользователя("Поиск обновлений...", "Ошибка при проверке обновлений обработки [" + Заголовок + "] - не удалось подключиться к Internet Explorer!");
            Возврат;
        КонецПопытки;
        IE.Visible = 0;
        IE.Silent = -1;
        IE.Navigate("http://infostart.ru/public/" + ИДПубликации + "/ver/" + ИДОбработки + "/");
        ПродолжитьПроверкуВерсийРазработки();

	ИначеЕсли Задача = "ПроверятьОбновлениеРазработкиПриОткрытии" Тогда

		ПроверятьОбновлениеРазработкиПриОткрытии = Не ПроверятьОбновлениеРазработкиПриОткрытии;
		Элементы.ФормаРежимПроверкиОбновлений.Пометка = ПроверятьОбновлениеРазработкиПриОткрытии;
		Если Не ПроверятьОбновлениеРазработкиПриОткрытии Тогда
			ОтключитьОбработчикОжидания("ПроверитьОбновлениеРазработки");
		КонецЕсли;

    КонецЕсли;

КонецПроцедуры // РаботаССайтом()

&НаКлиенте
//Т.к. IE не дает сразу ответа то ожидаем его вызывая процедуру и смотря статус IE а потом выполняем
//обработку полученного заголовка с указанной страницы
Процедура ПродолжитьПроверкуВерсийРазработки()

	//Состояние("Поиск обновлений...");
	
	Если IE.ReadyState < 4 Тогда
		ПодключитьОбработчикОжидания("ПродолжитьПроверкуВерсийРазработки", 0.1, Истина);
		Возврат;
	КонецЕсли;
		
	ВерсияНовая = IE.Document.body.outerText;
	
	IE.Quit();
	IE = Неопределено;
	
	Если СтрЧислоСтрок(ВерсияНовая) > 1 Тогда
		ВерсияНовая = "";
	КонецЕсли;
	
	Если ПолучитьВерсию(ВерсияНовая) > ПолучитьВерсию(Версия) Тогда
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеОбновления", ЭтаФорма, Новый Структура);
		ПоказатьВопрос(Оповещение, НСтр("Обнаружена новая версия " + ВерсияНовая + " (текущая версия " + Версия + ").
			|Открыть страницу публикации?"), РежимДиалогаВопрос.ДаНет, 90, КодВозвратаДиалога.Да, "Проверка обновлений", КодВозвратаДиалога.Да);
	Иначе
		ПоказатьОповещениеПользователя("Поиск обновлений...", , "Обновлений для обработки [" + Заголовок + "] не обнаружено!");
	КонецЕсли;
	
КонецПроцедуры // ПродолжитьПроверкуВерсийРазработки()

&НаКлиенте
//Из-за использование процедуры ПодключитьОбработчикОжидания() которая не принимает параетров
//      пришлось вынести отдельно
Процедура ПроверитьОбновлениеРазработки()
    РаботаССайтом("НачатьПроверкуВерсий");
КонецПроцедуры // ПроверитьОбновлениеРазработки()

&НаКлиенте
Процедура ПодтверждениеОбновления(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	РаботаССайтом("ОткрытьСтраницуРазработки");
	
КонецПроцедуры // ПроверитьОбновлениеРазработки()

&НаСервере
Функция ПолучитьВерсию(Знач СтрокаВерсии, КоличествоРазрядов = 2)

	// хитрый вариант преобразования строки с разделителями в массив строк
	НовыйМассив = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(СтрЗаменить(СтрокаВерсии, """", """"""), ".", """},{""S"",""") + """}}}");
	СтрокаВерсии = ""; Счетчик = 0;
	Для каждого ЭлементМассива Из НовыйМассив Цикл
		Попытка
			Значение = Число(ЭлементМассива);
		Исключение
			Значение = 0;
		КонецПопытки;
		СтрокаВерсии = СтрокаВерсии + Формат(Значение, "ЧЦ=3; ЧН=; ЧВН=");
		Счетчик = Счетчик + 1;
	КонецЦикла;

	Пока Счетчик < КоличествоРазрядов Цикл
		СтрокаВерсии = СтрокаВерсии + "000";
		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат Число(СтрокаВерсии);
	
КонецФункции // ПолучитьВерсию()

&НаСервереБезКонтекста
Функция ПолучитьСледующуюПодстроку(ОстатокСтроки, Разделитель = ";")
	
	СледующаяПозиция = Найти(ОстатокСтроки, Разделитель);
	Если СледующаяПозиция > 0 Тогда
		Результат = Сред(ОстатокСтроки, 1, СледующаяПозиция - 1);
		ОстатокСтроки = Сред(ОстатокСтроки, СледующаяПозиция +  СтрДлина(Разделитель));
	Иначе
		Результат = ОстатокСтроки;
		ОстатокСтроки = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


// команды формы 

&НаКлиенте
Процедура ПерейтиНаСайтInfostart(Команда)
	РаботаССайтом("ОткрытьСайт");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуАвтора(Команда)
	РаботаССайтом("ОткрытьСтраницуАвтора");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуРазработки(Команда)
	РаботаССайтом("ОткрытьСтраницуРазработки");
КонецПроцедуры

&НаКлиенте
Процедура РекомендоватьРазработку(Команда)
	РаботаССайтом("РекомендаватьРазработку");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбновления(Команда)
	РаботаССайтом("ПроверитьОбновлениеРазработки");
КонецПроцедуры

&НаКлиенте
Процедура РежимПроверкиОбновлений(Команда)
	РаботаССайтом("ПроверятьОбновлениеРазработкиПриОткрытии");
КонецПроцедуры

&НаКлиенте
Процедура ЗеркальныйВыборПользователейAD(Команда)
	Для Каждого Стр Из ТаблицаПользователей Цикл
		Стр.Пометка = Не Стр.Пометка;
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////
// БЛОК: ОБНОВЛЕНИЕ ВЕРСИИ РАЗРАБОТКИ утащено с http://infostart.ru/public/137694/        

