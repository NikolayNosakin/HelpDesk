
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Текст = "ru = 'Проект MS Project в формате XML'";
		Фильтр = НСтр(Текст) + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Истина;
		ДиалогОткрытияФайла.Заголовок = "Выберите проект";
		ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ПутьКФайлу = ИмяФайла;
			Прервать;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПроектСерверПоДвоичнымДаннымФайла(ДвоичныеДанныеПроекта)
	
	Префикс = Новый РазыменовательПространствИменDOM("msp", "http://schemas.microsoft.com/project");
	МассивЗагруженныхЗадач = Новый Массив();
	МассивОбъектовДляОбновленияПрав = Новый Массив();
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПроекта.Записать(ИмяФайла);
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);	
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелПроект = РезультатXPath.ПолучитьСледующий();
	// Если в xml-файле нет тега "Project", останавливаем импорт.
	Если УзелПроект = Неопределено Тогда
		Текст = НСтр("ru = 'Неправильный формат файла.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		// Получение имени проекта
		ИмяПроекта = ЗначениеРеквизита(УзелПроект, "Name", Тип("Строка"));
		ЗаголовокПроекта = ЗначениеРеквизита(УзелПроект, "Title", Тип("Строка"));
		Если НЕ ЗначениеЗаполнено(ЗаголовокПроекта) Тогда
			ИмяПроекта = СтрЗаменить(НРег(ИмяПроекта), ".xml", "");
		Иначе
			ИмяПроекта = ЗаголовокПроекта;
		КонецЕсли;
		
		// Заполнение реквизитов проекта
		Если НЕ ЗначениеЗаполнено(ПроектСсылка) Тогда
			Проект = Справочники.Проекты.СоздатьЭлемент();
			Проект.ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
			Проект.Состояние = Перечисления.СостоянияПроектов.Инициирован;
			Проект.ЕдиницаТрудозатратЗадач = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
			Проект.ЕдиницаДлительностиЗадач = Константы.ОсновнаяЕдиницаДлительности.Получить();
			Проект.СписыватьЗатратыНаПроект = Истина;
		Иначе
			Проект = ПроектСсылка.ПолучитьОбъект();
			Если ПредварительноОчиститьПроект Тогда
				// пометка на удаление всех задач проекта
				УдалитьЗадачиПроекта(ПроектСсылка);
			КонецЕсли;
		КонецЕсли;
		Проект.Наименование = ИмяПроекта;
		Проект.Комментарий = ЗначениеРеквизита(УзелПроект, "Comments", Тип("Строка"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда
			Если Не ЗначениеЗаполнено(ВидПроекта) Тогда
				Проект.ВидПроекта = РаботаСПроектами.ПолучитьВидПроектаПоУмолчанию();
			Иначе
				Проект.ВидПроекта = ВидПроекта;
			КонецЕсли;
		КонецЕсли;
		// Заполнение календаря проекта
		ИДКалендаряProject = ЗначениеРеквизита(УзелПроект, "CalendarUID", Тип("Строка"));
		ВыражениеXPathКалендарь = 
			ОбъектДокумент.СоздатьВыражениеXPath(
				"/msp:Project/msp:Calendars/msp:Calendar[msp:UID=" + ИДКалендаряProject + "]", 
				Префикс);	
		РезультатXPathКалендарьПроекта = ВыражениеXPathКалендарь.Вычислить(ОбъектДокумент);
		УзелКалендарь = РезультатXPathКалендарьПроекта.ПолучитьСледующий();
		Если УзелКалендарь <> Неопределено Тогда
			ИмяКалендаряProject = ЗначениеРеквизита(УзелКалендарь, "Name", Тип("Строка"));
			ГрафикДО = Справочники.ГрафикиРаботы.НайтиПоНаименованию(ИмяКалендаряProject);
			Если НЕ ЗначениеЗаполнено(ГрафикДО) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'График работы ""%1"" не найден в информационной базе.%2Необходимо добавить график и повторить импорт.'"),
					ИмяКалендаряProject,
					Символы.ПС);
				ВызватьИсключение Текст;
			Иначе
				Проект.ГрафикРаботы = ГрафикДО;
			КонецЕсли;
		КонецЕсли;
				
		Проект.ЕдиницаДлительностиЗадач = 
			ЗначениеРеквизита(УзелПроект, "DurationFormat", Тип("ПеречислениеСсылка.ЕдиницыДлительности"));
		Проект.ЕдиницаТрудозатратЗадач = 
			ЗначениеРеквизита(УзелПроект, "WorkFormat", Тип("ПеречислениеСсылка.ЕдиницыТрудозатрат"));
		Проект.Описание = ЗначениеРеквизита(УзелПроект, "Notes", Тип("Строка"));
		Проект.Руководитель = Пользователи.ТекущийПользователь();
		Проект.Состояние = Перечисления.СостоянияПроектов.Планируется;
		
		Проект.СпособПланирования = ЗначениеРеквизита(УзелПроект, "ScheduleFromStart", Тип("ПеречислениеСсылка.СпособыПланированияПроекта"));
		
		Проект.ТекущийПланНачало = ЗначениеРеквизита(УзелПроект, "StartDate", Тип("Дата"));
		Проект.ТекущийПланОкончание = ЗначениеРеквизита(УзелПроект, "FinishDate", Тип("Дата"));
		
		ЧислоМинутВДне = ЗначениеРеквизита(УзелПроект, "MinutesPerDay", Тип("Число"));
		ЧислоМинутВНеделе = ЗначениеРеквизита(УзелПроект, "MinutesPerWeek", Тип("Число"));
		ЧислоДнейВМесяце = ЗначениеРеквизита(УзелПроект, "DaysPerMonth", Тип("Число"));
		
		Если ИмпортироватьРесурсы Тогда
			Проект.ПроектнаяКоманда.Очистить();
		КонецЕсли;
		
		Проект.ДополнительныеСвойства.Вставить("ЗагрузкаИзProject", Истина);
		Проект.ЗагруженИзMSProject = Истина;
		Проект.СсылкаНаВнешнийФайл = ПутьКФайлу;
		Проект.ДатаПоследнейЗагрузкиИзВнешнегоФайла = ТекущаяДата();
		
		Если ЕстьНеподдерживаемыеОпции Тогда
			Проект.РедактируетсяВСтороннейСистеме = Истина;
		КонецЕсли;
		
		Проект.Записать();
		
		МассивОбъектовДляОбновленияПрав.Добавить(Проект.Ссылка);
		ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Tasks/msp:Task", Префикс);
		
		// Загрузка задач проекта
		ПредшественникиЗадач = Новый Массив();
		РодителиЗадач = Новый Массив();
		РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
		УзелЗадача = РезультатXPath.ПолучитьСледующий();
		Пока УзелЗадача <> Неопределено Цикл
			Если НЕ ЗначениеРеквизита(УзелЗадача, "IsNull", Тип("Булево")) Тогда
				Если ЗначениеРеквизита(УзелЗадача, "OutlineNumber", Тип("Строка")) = "0" Тогда
					ТрудозатратыProject = ЗначениеРеквизита(УзелЗадача, "Work", Тип("Строка"));
					Проект.ТекущийПланТрудозатраты = 
						КонвертироватьДлительность(
						 	ТрудозатратыProject, 
							ЧислоМинутВДне,
							ЧислоМинутВНеделе,
							ЧислоДнейВМесяце, 
							Проект.ЕдиницаТрудозатратЗадач);
					
				Иначе
				
					ИДЗадачи = ЗначениеРеквизита(УзелЗадача, "UID", Тип("Строка"));
					ЗадачаСсылка = ПолучитьЗадачуПоИдентификатору(Проект.Ссылка, ИДЗадачи);
					Если ЗадачаСсылка = Неопределено Тогда
						ЗадачаОбъект = Справочники.ПроектныеЗадачи.СоздатьЭлемент();
					Иначе
						ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
					КонецЕсли;
					ЗадачаОбъект.Владелец = Проект.Ссылка;
					ЗадачаОбъект.ИдентификаторЗадачи = ИДЗадачи;
					ЗадачаОбъект.Наименование = ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка"));
					ЗадачаОбъект.Веха = ЗначениеРеквизита(УзелЗадача, "Milestone", Тип("Булево"));
					ЗадачаОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
					
					// Загрузка графика работы задачи
					ИДКалендаряЗадача = ЗначениеРеквизита(УзелЗадача, "CalendarUID", Тип("Строка"));
					Если ИДКалендаряЗадача <> "-1" Тогда
						ВыражениеXPathКалендарь = 
							ОбъектДокумент.СоздатьВыражениеXPath(
								"/msp:Project/msp:Calendars/msp:Calendar[msp:UID=" + ИДКалендаряProject + "]", 
								Префикс);	
						РезультатXPathКалендарьПроекта = ВыражениеXPathКалендарь.Вычислить(ОбъектДокумент);
						УзелКалендарь = РезультатXPathКалендарьПроекта.ПолучитьСледующий();
						Если УзелКалендарь <> Неопределено Тогда
							ИмяКалендаряProject = ЗначениеРеквизита(УзелКалендарь, "Name", Тип("Строка"));
							КалендарьДО = Справочники.ГрафикиРаботы.НайтиПоНаименованию(ИмяКалендаряProject);
							Если НЕ ЗначениеЗаполнено(КалендарьДО) Тогда
								Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'График работы ""%1"" не найден в информационной базе.%2Необходимо добавить график и повторить импорт.'"),
									ИмяКалендаряProject,
									Символы.ПС);
								ВызватьИсключение Текст;
							Иначе
								ЗадачаОбъект.ГрафикРаботы = КалендарьДО;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					ЗадачаОбъект.ТекущийПланНачало = ЗначениеРеквизита(УзелЗадача, "Start", Тип("Дата"));
					ЗадачаОбъект.ТекущийПланОкончание = ЗначениеРеквизита(УзелЗадача, "Finish", Тип("Дата"));
					
					ЗадачаОбъект.ТипОграничения = ЗначениеРеквизита(УзелЗадача, "ConstraintType", Тип("ПеречислениеСсылка.ТипыОграниченийПроектныхЗадач"));
					ЗадачаОбъект.ДатаОграничения = ЗначениеРеквизита(УзелЗадача, "ConstraintDate", Тип("Дата"));
					
					ЕдиницаДлительности = ЗначениеРеквизита(УзелЗадача, "DurationFormat", Тип("ПеречислениеСсылка.ЕдиницыДлительности"));
					Если Не ЗначениеЗаполнено(ЕдиницаДлительности) Тогда
						ЕдиницаДлительности = Проект.ЕдиницаДлительностиЗадач;
					КонецЕсли;
					ЗадачаОбъект.ТекущийПланЕдиницаДлительности = ЕдиницаДлительности;
					ДлительностьProject = ЗначениеРеквизита(УзелЗадача, "Duration", Тип("Строка"));					
					ЗадачаОбъект.ТекущийПланДлительность = 
						КонвертироватьДлительность(
						 	ДлительностьProject, 
							ЧислоМинутВДне,
							ЧислоМинутВНеделе,
							ЧислоДнейВМесяце, 
							ЗадачаОбъект.ТекущийПланЕдиницаДлительности);  
							
					ЗадачаОбъект.ТекущийПланЕдиницаТрудозатрат = Проект.ЕдиницаТрудозатратЗадач;
					ЗадачаОбъект.ЕдиницаТрудозатратФакт = Проект.ЕдиницаТрудозатратЗадач;
					ТрудозатратыProject = ЗначениеРеквизита(УзелЗадача, "Work", Тип("Строка"));
					ЗадачаОбъект.ТекущийПланТрудозатраты = 
						КонвертироватьДлительность(
						 	ТрудозатратыProject, 
							ЧислоМинутВДне,
							ЧислоМинутВНеделе,
							ЧислоДнейВМесяце, 
							ЗадачаОбъект.ТекущийПланЕдиницаТрудозатрат);
							
					// загрузка фактических дат начала, окончания и длительности
					ФактическаяДатаСтарта = ЗначениеРеквизита(УзелЗадача, "ActualStart", Тип("Дата"));
					ФактическаяДатаОкончания = ЗначениеРеквизита(УзелЗадача, "ActualFinish", Тип("Дата"));
					ФактическаяДлительность = ЗначениеРеквизита(УзелЗадача, "ActualDuration", Тип("Строка"));
					
					Если ФактическаяДатаСтарта <> Неопределено Тогда
						ЗадачаОбъект.НачалоФакт = ФактическаяДатаСтарта;
					КонецЕсли;
					Если ФактическаяДатаОкончания <> Неопределено Тогда
						ЗадачаОбъект.ОкончаниеФакт = ФактическаяДатаОкончания;
					КонецЕсли;
					Если ФактическаяДлительность <> Неопределено Тогда
						ЗадачаОбъект.ЕдиницаДлительностиФакт = ЕдиницаДлительности;
						ЗадачаОбъект.ДлительностьФакт = КонвертироватьДлительность(
						 	ФактическаяДлительность, 
							ЧислоМинутВДне,
							ЧислоМинутВНеделе,
							ЧислоДнейВМесяце, 
							ЗадачаОбъект.ЕдиницаДлительностиФакт);
					КонецЕсли;
					
					ЗадачаОбъект.КодСДР = ЗначениеРеквизита(УзелЗадача, "OutlineNumber", Тип("Строка"));
											
					// Чтение предшественников задачи
					ВыражениеXPathПредшественники = 
						ОбъектДокумент.СоздатьВыражениеXPath("./msp:PredecessorLink", Префикс);	
					РезультатXPathПредшественники = ВыражениеXPathПредшественники.Вычислить(УзелЗадача);
					УзелПредшественник = РезультатXPathПредшественники.ПолучитьСледующий();	
					Пока УзелПредшественник <> Неопределено Цикл
						ДанныеПредшественника = Новый Структура(
							"Последователь, 
							|Предшественник, 
							|ВидСвязи, 
							|Лаг, 
							|ТипЛага");
						ДанныеПредшественника.Последователь = ИДЗадачи;
						ДанныеПредшественника.Предшественник = 
							ЗначениеРеквизита(УзелПредшественник, "PredecessorUID", Тип("Строка"));
						ДанныеПредшественника.ВидСвязи = 
							ЗначениеРеквизита(
								УзелПредшественник, 
								"Type", 
								Тип("ПеречислениеСсылка.ТипыЗависимостейПроектныхЗадач"));
						ДанныеПредшественника.Лаг = 
							ЗначениеРеквизита(УзелПредшественник, "LinkLag", Тип("Строка"));
						Если ДанныеПредшественника.Лаг <> "0" Тогда
							ДанныеПредшественника.ТипЛага = 
								ЗначениеРеквизита(УзелПредшественник, "LagFormat", Тип("ПеречислениеСсылка.ЕдиницыДлительности"));
						КонецЕсли;	
							
						Если НЕ ЗначениеЗаполнено(ДанныеПредшественника.ТипЛага) Тогда
							ДанныеПредшественника.ТипЛага = Проект.ЕдиницаДлительностиЗадач;
						КонецЕсли;
						ПредшественникиЗадач.Добавить(ДанныеПредшественника);
						УзелПредшественник = РезультатXPathПредшественники.ПолучитьСледующий();	
					КонецЦикла;
					
					Если ИмпортироватьРесурсы Тогда
						ЗадачаОбъект.Исполнители.Очистить();
						// Загрузка исполнителей задачи
						ВыражениеXPathНазначения = ОбъектДокумент.СоздатьВыражениеXPath(
							"/msp:Project/msp:Assignments/msp:Assignment[msp:TaskUID=" + ИДЗадачи + "]", 
							Префикс);
						РезультатXPathНазначения = ВыражениеXPathНазначения.Вычислить(ОбъектДокумент);
						УзелНазначение = РезультатXPathНазначения.ПолучитьСледующий();
						Пока УзелНазначение <> Неопределено Цикл
							//Поиск ресурса
							ИДРесурса = ЗначениеРеквизита(УзелНазначение, "ResourceUID", Тип("Строка"));
							ВыражениеXPathРесурса = ОбъектДокумент.СоздатьВыражениеXPath(
								"/msp:Project/msp:Resources/msp:Resource[msp:UID=" + ИДРесурса + "]", 
								Префикс);
							РезультатXPathРесурсы = ВыражениеXPathРесурса.Вычислить(ОбъектДокумент);
							УзелРесурс = РезультатXPathРесурсы.ПолучитьСледующий();
							Если УзелРесурс <> Неопределено Тогда
								ТипРесурса = ЗначениеРеквизита(УзелРесурс, "Type", Тип("Строка"));
								
								Если ТипРесурса = "1" Тогда // Сотрудник
									// Поиск пользователя в ДО, который указан в ресурсе MS Project
									ИДРесурса = ЗначениеРеквизита(УзелРесурс, "UID", Тип("Строка"));
									ИмяРесурса = ЗначениеРеквизита(УзелРесурс, "Name", Тип("Строка"));
									ИмяРесурса = СокрЛП(ИмяРесурса);
									Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяРесурса);					
									Роль = Неопределено;
									Корреспондент = Неопределено;
									КонтактноеЛицо = Неопределено;
									Если Не ЗначениеЗаполнено(Пользователь) Тогда
										Роль = Справочники.РолиИсполнителей.НайтиПоНаименованию(ИмяРесурса);
										Если Не ЗначениеЗаполнено(Роль) Тогда
											Корреспондент = Справочники.Контрагенты.НайтиПоНаименованию(ИмяРесурса);
											Если Не ЗначениеЗаполнено(Корреспондент) Тогда
												КонтактноеЛицо = Справочники.КонтактныеЛица.НайтиПоНаименованию(ИмяРесурса);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;	
									Если НЕ ЗначениеЗаполнено(Пользователь) 
										И НЕ ЗначениеЗаполнено(Роль) 
										И НЕ ЗначениеЗаполнено(Корреспондент)
										И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
										// Если пользователь не найден, выдается исключение
										Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Ресурс ""%1"" не найдены в информационной базе среди Пользователей, Ролей, Корреспондентов и Контактных лиц.
												|Необходимо добавить элемент и повторить импорт.'"),
											ИмяРесурса);
										ВызватьИсключение Текст;
									КонецЕсли;
																	
									НоваяСтрока = ЗадачаОбъект.Исполнители.Добавить();
									Если ЗначениеЗаполнено(Пользователь) Тогда
										НоваяСтрока.Исполнитель = Пользователь; 
									ИначеЕсли ЗначениеЗаполнено(Роль) Тогда
										НоваяСтрока.Исполнитель = Роль;
										Если Роль.ИспользуетсяСОбъектамиАдресации Тогда
											Если Роль.ТипыОсновногоОбъектаАдресации.ТипЗначения.СодержитТип(
												Тип("СправочникСсылка.Проекты")) Тогда
												НоваяСтрока.ОсновнойОбъектАдресации = Проект.Ссылка;
											КонецЕсли;
											Если Роль.ТипыДополнительногоОбъектаАдресации.ТипЗначения.СодержитТип(
												Тип("СправочникСсылка.Проекты")) Тогда
												НоваяСтрока.ДополнительныйОбъектАдресации = Проект.Ссылка;
											КонецЕсли;
										КонецЕсли;
									ИначеЕсли ЗначениеЗаполнено(Корреспондент) Тогда
										НоваяСтрока.Исполнитель = Корреспондент;
									ИначеЕсли ЗначениеЗаполнено(КонтактноеЛицо) Тогда
										НоваяСтрока.Исполнитель = КонтактноеЛицо;
									КонецЕсли;
									Процент = ЗначениеРеквизита(УзелНазначение, "Units", Тип("Число"));
									
									ТрудозатратыProject = ЗначениеРеквизита(УзелНазначение, "Work", Тип("Строка"));
									НоваяСтрока.ТекущийПланТрудозатраты = 
										КонвертироватьДлительность(
											ТрудозатратыProject, 
											ЧислоМинутВДне,
											ЧислоМинутВНеделе,
											ЧислоДнейВМесяце, 
											ЗадачаОбъект.ТекущийПланЕдиницаТрудозатрат);
											
									// Добавление исполнителей в проектную задачу			
									ИсполнительЕстьВПроектнойКоманде = Ложь;
									Для Каждого Участник Из Проект.ПроектнаяКоманда Цикл
										Если Участник.Исполнитель = Пользователь 
										 Или Участник.Исполнитель = Роль
										 Или Участник.Исполнитель = Корреспондент
										 Или Участник.Исполнитель = КонтактноеЛицо Тогда
											ИсполнительЕстьВПроектнойКоманде = Истина;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									Если Не ИсполнительЕстьВПроектнойКоманде Тогда
										НоваяСтрока = Проект.ПроектнаяКоманда.Добавить();
										Если ЗначениеЗаполнено(Пользователь) Тогда
											НоваяСтрока.Исполнитель = Пользователь;
										ИначеЕсли ЗначениеЗаполнено(Роль) Тогда
											НоваяСтрока.Исполнитель = Роль;
										ИначеЕсли ЗначениеЗаполнено(Корреспондент) Тогда
											НоваяСтрока.Исполнитель = Корреспондент;
										ИначеЕсли ЗначениеЗаполнено(КонтактноеЛицо) Тогда
											НоваяСтрока.Исполнитель = КонтактноеЛицо;
										КонецЕсли;
										НоваяСтрока.РольВПроекте = "";
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							УзелНазначение = РезультатXPathНазначения.ПолучитьСледующий();
						КонецЦикла;
					КонецЕсли;					
					ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
					ЗадачаОбъект.Записать();
					МассивЗагруженныхЗадач.Добавить(ИДЗадачи);
					МассивОбъектовДляОбновленияПрав.Добавить(ЗадачаОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			УзелЗадача = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		Проект.Записать();
		
		ЗафиксироватьТранзакцию();
		
		//РегистрыСведений.ОчередьОбновленияДоступа.ОбновитьДоступ(
		//	Перечисления.ВидыЗаданийОбновленияДоступа.ОграниченияДоступаДляЗаданныхОбъектовДоступа,
		//	Новый Структура("ОбъектыДоступа", МассивОбъектовДляОбновленияПрав));
				
		Проект.Прочитать();
		
		// После записи всех задач устанавливаем предшественников
		Для Каждого ЗаписьОПредшественнике Из ПредшественникиЗадач Цикл
			УстановитьСвязьМеждуЗадачами(
				Проект.Ссылка, 
				ЧислоМинутВДне,
				ЧислоМинутВНеделе,
				ЧислоДнейВМесяце,
				ЗаписьОПредшественнике);
		КонецЦикла;
		
		// После записи всех задач устанавливается их иерархия на основании значений КодСДР
		УстановитьИерархиюПоСДР(Проект.Ссылка);
		
		// Перенумерация задач
		РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Проект.Ссылка);
		
		// Обнуление трудозатрат у суммарных задач
		ОбнулитьТрудозатратыСуммарныхЗадач(Проект.Ссылка);
		
		// После импорта всех задач удаляются те, которые не были обновлены и остались от предыдущей загрузки
		Попытка
			НачатьТранзакцию();
			Если ВыполняетсяОбновление И УдалитьНезагруженныеЗадачи Тогда
				ВыборкаЗадач = Справочники.ПроектныеЗадачи.Выбрать(, ПроектСсылка);
				Пока ВыборкаЗадач.Следующий() Цикл
					Если МассивЗагруженныхЗадач.Найти(ВыборкаЗадач.ИдентификаторЗадачи) = Неопределено Тогда
						ЗадачаПроектаОбъект = ВыборкаЗадач.ПолучитьОбъект();
						ЗадачаПроектаОбъект.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		ПроектСсылка = Проект.Ссылка;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьТрудозатратыСуммарныхЗадач(ПроектСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПроектныеЗадачи.Ссылка
		 |ИЗ
		 |	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		 |ГДЕ
		 |	ПроектныеЗадачи.СуммарнаяЗадача = ИСТИНА
		 |	И ПроектныеЗадачи.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ТекущийПланТрудозатраты = 0;
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
			ЗадачаОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗадачиПроекта(ПроектСсылка)
	
	Выборка = Справочники.ПроектныеЗадачи.Выбрать(, Проектссылка);
	Пока Выборка.Следующий() Цикл
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "ПометкаУдаления") Тогда
			ПроектнаяЗадача = Выборка.Ссылка.ПолучитьОбъект();
			ПроектнаяЗадача.УстановитьПометкуУдаления(Истина, Истина);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПроектПоСсылкеНаФайл(ФайлИзБазы)
	
	ДвоичныеДанные = РаботаСФайлами.ПолучитьДвоичныеДанныеФайла(ФайлИзБазы);
	ЗагрузитьПроектСерверПоДвоичнымДаннымФайла(ДвоичныеДанные);
	
КонецПроцедуры

// Получает значение реквизита объекта.
// Параметры:
//	Узел - объект типа ЭлементDOM
//	ИмяРеквизита - имя реквизита (дочернего элемента), значение которого необходимо получить
//	Тип - тип значения в документообороте
&НаСервере
Функция ЗначениеРеквизита(Узел, ИмяРеквизита, Тип)

	Результат = Неопределено;
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Значение = ДочернийУзел.ТекстовоеСодержимое;
		Если НРег(ДочернийУзел.ИмяУзла) = НРег(ИмяРеквизита) Тогда
			Если Тип = Тип("Булево") Тогда
				Возврат ?(Значение = "0", Ложь, Истина);
				
			ИначеЕсли Тип = Тип("Число") Тогда
				Возврат Число(Значение);
				
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.СпособыПланированияПроекта") Тогда
				Если Значение = "1" Тогда
					Результат = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта;
				Иначе // "0"
					Результат = Перечисления.СпособыПланированияПроекта.ОтДатыОкончанияПроекта;
				КонецЕсли;
								
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.ЕдиницыДлительности") Тогда
				Если Значение = "3" ИЛИ Число(Значение) - 32 = 3 Тогда
					Результат = Перечисления.ЕдиницыДлительности.Минута;
				ИначеЕсли Значение = "5" ИЛИ Число(Значение) - 32 = 5 Тогда
					Результат = Перечисления.ЕдиницыДлительности.Час;
				ИначеЕсли Значение = "7" ИЛИ Число(Значение) - 32 = 7 Тогда
					Результат = Перечисления.ЕдиницыДлительности.День;
				ИначеЕсли Значение = "9" ИЛИ Число(Значение) - 32 = 9 Тогда
					Результат = Перечисления.ЕдиницыДлительности.Неделя;
				ИначеЕсли Значение = "11" ИЛИ Число(Значение) - 32 = 11 Тогда
					Результат = Перечисления.ЕдиницыДлительности.Месяц;
				ИначеЕсли Значение = "21" или Значение = "53" Тогда
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Указана неподдерживаемая единица длительности работ (%1)'"), 
						Значение);
					ВызватьИсключение Текст;
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.ЕдиницыТрудозатрат") Тогда
				Если Значение = "1" Тогда
					Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута;
				ИначеЕсли Значение = "2" Тогда
					Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
				ИначеЕсли Значение = "3" Тогда
					Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоДень;
				ИначеЕсли Значение = "4" Тогда
					Результат = перечисления.ЕдиницыТрудозатрат.ЧеловекоНеделя;
				ИначеЕсли Значение = "5" Тогда
					Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМесяц;
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.ТипыЗависимостейПроектныхЗадач") Тогда
				Если Значение = "0" Тогда
					Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание;
				ИначеЕсли Значение = "1" Тогда
					Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
				ИначеЕсли Значение = "2" Тогда
					Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание;
				ИначеЕсли Значение = "3" Тогда
					Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало;
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.ТипыОграниченийПроектныхЗадач") Тогда
				Если Значение = "0" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
				ИначеЕсли Значение = "1" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноПозже;
				ИначеЕсли Значение = "2" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало;
				ИначеЕсли Значение = "3" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ФиксированноеОкончание;
				ИначеЕсли Значение = "4" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.НачалоНеРанее;
				ИначеЕсли Значение = "5" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.НачалоНеПозднее;
				ИначеЕсли Значение = "6" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ОкончаниеНеРанее;
				ИначеЕсли Значение = "7" Тогда
					Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ОкончаниеНеПозднее;
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("Дата") Тогда
				Значение = СтрЗаменить(Значение, "-", "");
				Значение = СтрЗаменить(Значение, ":", "");
				Значение = СтрЗаменить(Значение, "T", "");
				Результат = Дата(Значение);
				
			Иначе
				Результат = Значение;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСвязьМеждуЗадачами(
	Проект, 
	МинутВДне,
	МинутВНеделе,
	ДнейВМесяце,
	ЗаписьОСвязиМеждуЗадачами)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачаПоследователь = ПолучитьЗадачуПоИдентификатору(
		Проект,
		ЗаписьОСвязиМеждуЗадачами.Последователь);
		
	ЗадачаПредшественник = ПолучитьЗадачуПоИдентификатору(
		Проект,
		ЗаписьОСвязиМеждуЗадачами.Предшественник);
		
	Если ЗадачаПоследователь = Неопределено ИЛИ ЗадачаПредшественник = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ОбъектПоследователь = ЗадачаПоследователь.ПолучитьОбъект();
	
	//Поиск этой связи среди существующих
	Для Каждого Строка Из ОбъектПоследователь.Предшественники Цикл
		Если Строка.Предшественник = ЗадачаПредшественник
			И Строка.ТипЗависимости = ЗаписьОСвязиМеждуЗадачами.ВидСвязи
			И Строка.ЕдиницаЗадержки = ЗаписьОСвязиМеждуЗадачами.ТипЛага
			И Строка.Задержка = КонвертироватьДлительность(
				ЗаписьОСвязиМеждуЗадачами.Лаг, 
				МинутВДне, 
				МинутВНеделе,
				ДнейВМесяце, 
				ЗаписьОСвязиМеждуЗадачами.ТипЛага) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = ОбъектПоследователь.Предшественники.Добавить();
	НоваяСтрока.Предшественник = ЗадачаПредшественник;
	НоваяСтрока.ТипЗависимости = ЗаписьОСвязиМеждуЗадачами.ВидСвязи;
	НоваяСтрока.ЕдиницаЗадержки = ЗаписьОСвязиМеждуЗадачами.ТипЛага;
	НоваяСтрока.Задержка = КонвертироватьДлительность(
		ЗаписьОСвязиМеждуЗадачами.Лаг, 
		МинутВДне, 
		МинутВНеделе,
		ДнейВМесяце, 
		НоваяСтрока.ЕдиницаЗадержки);
	ОбъектПоследователь.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуПоИдентификатору(Проект, Идентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.ИдентификаторЗадачи = &ИдентификаторЗадачи
		|	И ПроектныеЗадачи.Владелец = &Проект
		|	И ПроектныеЗадачи.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", Идентификатор);
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьИерархиюПоСДР(Проект)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|	И ПроектныеЗадачи.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ЗадачаОбъект.КодСДР,
			".");
			
		Если МассивПодстрок.Количество() > 1 Тогда
			ВышестоящийКод = "";
			Для Индекс = 0 по МассивПодстрок.Количество() - 2 Цикл
				ВышестоящийКод = ВышестоящийКод + МассивПодстрок[Индекс];
				Если Индекс < МассивПодстрок.Количество() - 2 Тогда
					ВышестоящийКод = ВышестоящийКод + ".";
				КонецЕсли;
			КонецЦикла;
			РодительСсылка = ПолучитьЗадачуПоКодуСДР(Проект, ВышестоящийКод);
			Если РодительСсылка <> Неопределено Тогда
				ЗадачаОбъект.Родитель = РодительСсылка;
				ЗадачаОбъект.Записать();
			КонецЕсли;
		ИначеЕсли МассивПодстрок.Количество() = 1 И МассивПодстрок[0] <> "0" Тогда
			РодительСсылка = ПолучитьЗадачуПоКодуСДР(Проект, "0");
			Если РодительСсылка <> Неопределено Тогда
				ЗадачаОбъект.Родитель = РодительСсылка;
				ЗадачаОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуПоКодуСДР(Проект, КодСДР)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.КодСДР = &КодСДР
		|	И ПроектныеЗадачи.Владелец = &Проект
		|	И ПроектныеЗадачи.ПометкаУдаления = Ложь";
	Запрос.УстановитьПараметр("КодСДР", КодСДР);
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция КонвертироватьДлительность(
	Значение, 
	МинутВДне,
	МинутВНеделе,
	ДнейВмесяце, 
	ТипЗначенияДО)
	
	// Получение значения часов-минут-секунд из значения длительности
	Если Найти(Значение, "PT") > 0 Тогда
		Значение = СтрЗаменить(Значение, "PT", "");
		СтрокаЧасов = Сред(Значение, 1, СтрНайти(Значение, "H"));
		ЗначениеЧасов = СтрЗаменить(СтрокаЧасов, "H", "");
		Значение = СтрЗаменить(Значение, СтрокаЧасов, "");
		СтрокаМинут = Сред(Значение, 1, СтрНайти(Значение, "M"));
		ЗначениеМинут = СтрЗаменить(СтрокаМинут, "M", "");
		ДлительностьЗначение = ЗначениеЧасов * 60 + ЗначениеМинут;
	Иначе
		ДлительностьЗначение = Число(Значение) / 10;
	КонецЕсли;
	
	Если ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Минута
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута Тогда
		Возврат ДлительностьЗначение;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Час
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас Тогда
		Возврат ДлительностьЗначение / 60;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.День
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоДень Тогда
		Возврат ДлительностьЗначение / МинутВДне;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Неделя
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоНеделя Тогда
		Возврат ДлительностьЗначение / МинутВНеделе;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Месяц
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМесяц Тогда
		Возврат ДлительностьЗначение / (МинутВДне * ДнейВмесяце);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Загрузить(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) И НЕ ЗначениеЗаполнено(ФайлИзБазы) Тогда
		Текст = НСтр("ru = 'Поле ""Источник данных"" не заполнено.'");
		Путь = "ПутьКФайлу";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			Путь,
			,
			Отказ);	
	КонецЕсли;

	Если ИспользоватьВидыПроектов Тогда
		Если Не ЗначениеЗаполнено(ВидПроекта) Тогда
			Текст = НСтр("ru = 'Поле ""Вид проекта"" не заполнено.'");
			Путь = "ВидПроекта";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				Путь,
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на неподдерживаемые возможности проекта в MS Project.
	// Если таковые будут найдены, будет задан вопрос - продолжать ли импорт.
	ТекстСостояния = НСтр("ru = 'Выполняется проверка проекта. Пожалуйста, подождите...'");
	Состояние(ТекстСостояния);
	Попытка
		Если ЗначениеЗаполнено(ПутьКФайлу) 
			И НайтиФайлы(ПутьКФайлу).Количество() > 0 Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			ПроверитьПроектСерверПоДвоичнымДанным(ДвоичныеДанныеФайла);
		ИначеЕсли ЗначениеЗаполнено(ПутьКФайлу) 
			И НайтиФайлы(ПутьКФайлу).Количество() = 0 Тогда	
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ФайлИзБазы) Тогда
			ПроверитьПроектСерверПоСсылкеНаФайл(ФайлИзБазы);
		КонецЕсли;
	Исключение
		ЕстьНеподдерживаемыеОпции = Истина;
		Инфо = ИнформацияОбОшибке();
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некоторые свойства загружаемых задач не поддерживаются в 1С:Документооборот:%1%1%2'"),
			Символы.ПС,
			Инфо.Описание);
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить загрузку'"));
		Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить загрузку'"));
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтотОбъект), ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
        Возврат;
	КонецПопытки;
	
	// Если неподдерживаемых возможностей нет или импорт был продолжен несмотря на их наличие	
	ЗагрузитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагмент()
	
	Перем ДвоичныеДанныеФайла, ТекстОповещения, ТекстПояснения, ТекстСостояния;
	
	ТекстСостояния = НСтр("ru = 'Выполняется загрузка проекта. Пожалуйста, подождите...'");
	Состояние(ТекстСостояния);
	Попытка
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			ЗагрузитьПроектСерверПоДвоичнымДаннымФайла(ДвоичныеДанныеФайла);
		ИначеЕсли ЗначениеЗаполнено(ФайлИзБазы) Тогда
			ЗагрузитьПроектПоСсылкеНаФайл(ФайлИзБазы);
		КонецЕсли;
		Состояние();
		Если ВыполняетсяОбновление Тогда
			ТекстОповещения = НСтр("ru = 'Завершено обновление проекта.'");
		Иначе
			ТекстОповещения = НСтр("ru = 'Завершен импорт проекта.'");
		КонецЕсли;
		ОповеститьОбИзменении(ПроектСсылка);
		Оповестить("Изменение_Проект", ПроектСсылка, ЭтотОбъект);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проект ""%1"" успешно загружен из файла ""%2""'"),
		Строка(ПроектСсылка),
		ПутьКФайлу);
		ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(ПроектСсылка),
		ТекстПояснения,
		БиблиотекаКартинок.Информация32);
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗагрузитьФрагментЗавершение", ЭтотОбъект), ТекстОповещения);
	Исключение
		ВызватьИсключение;	
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФрагментЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ПроверитьПроектСерверПоДвоичнымДанным(ДвоичныеДанныеПроекта)
	
	Префикс = Новый РазыменовательПространствИменDOM("msp", "http://schemas.microsoft.com/project");
	МассивЗагруженныхЗадач = Новый Массив();
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПроекта.Записать(ИмяФайла);
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);	
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелПроект = РезультатXPath.ПолучитьСледующий();
	// Если в xml-файле нет тега "Project", останавливаем импорт.
	Если УзелПроект = Неопределено Тогда
		Текст = НСтр("ru = 'Неправильный формат файла.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ТекстОшибок = "";
	
    ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Tasks/msp:Task", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелЗадача = РезультатXPath.ПолучитьСледующий();
	КоличествоЗадачПодпроект = 0;
	Пока УзелЗадача <> Неопределено Цикл
		Если НЕ ЗначениеРеквизита(УзелЗадача, "IsNull", Тип("Булево")) 
			И ЗначениеРеквизита(УзелЗадача, "UID", Тип("Строка")) <> "0" Тогда
			ИмяЗадачи = ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка"));
						
			// Проверка на то, что задача является подпроектом
			Если ЗначениеРеквизита(УзелЗадача, "IsSubproject", Тип("Булево")) Тогда
				КоличествоЗадачПодпроект = КоличествоЗадачПодпроект + 1;	
			КонецЕсли;
			
		КонецЕсли;
		УзелЗадача = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	// Поиск задач, выполнение которых превано (Правка/Прервать или Edit/Split)
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Assignments/msp:Assignment", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелНазначение = РезультатXPath.ПолучитьСледующий();
	КоличествоРазделенныхЗадач = 0;
	Пока УзелНазначение <> Неопределено Цикл
		
		UID = ЗначениеРеквизита(УзелНазначение, "UID", Тип("Строка"));
		
		ВыражениеXPathУчасткиРабот = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Assignments/msp:Assignment[msp:UID=" + UID + "]/msp:TimephasedData", Префикс);
		РезультатXPathУчасткиРабот = ВыражениеXPathУчасткиРабот.Вычислить(ОбъектДокумент);
		УзелУчастокРабот = РезультатXPathУчасткиРабот.ПолучитьСледующий();
		ЗаполненныйУчасток = Ложь;
		НезаполненныйУчасток = Ложь;
		ПрерваннаяЗадача = Ложь;
		Пока УзелУчастокРабот <> Неопределено Цикл
			ВеличинаРаботы = ЗначениеРеквизита(УзелУчастокРабот, "Value", Тип("Строка"));
			Если ВеличинаРаботы <> "PT0H0M0S"
				И ВеличинаРаботы <> "0" 
				И Не ЗаполненныйУчасток Тогда
				ЗаполненныйУчасток = Истина;
			КонецЕсли;
			
			Если ЗаполненныйУчасток = Истина
				И (ВеличинаРаботы = "PT0H0M0S"
				ИЛИ ВеличинаРаботы = "0") Тогда
				НезаполненныйУчасток = Истина;
			КонецЕсли;
			
			Если ВеличинаРаботы <> "PT0H0M0S"
				И ВеличинаРаботы <> "0" 
				И ЗаполненныйУчасток
				И НезаполненныйУчасток Тогда
				ПрерваннаяЗадача = Истина;
				Прервать;
			КонецЕсли;
			УзелУчастокРабот = РезультатXPathУчасткиРабот.ПолучитьСледующий();	
		КонецЦикла;
		
		Если ПрерваннаяЗадача Тогда
			КоличествоРазделенныхЗадач = КоличествоРазделенныхЗадач + 1;	
		КонецЕсли;
		
		УзелНазначение = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Если КоличествоРазделенныхЗадач > 0 Тогда
		ТекстОшибок = 
			ТекстОшибок 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обнаружены прерванные задачи (%1)'"),
				Строка(КоличествоРазделенныхЗадач))
			+ Символы.ПС;	
	КонецЕсли;
	
	Если КоличествоЗадачПодпроект > 0 Тогда
		ТекстОшибок = 
			ТекстОшибок 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Несколько задач (%1) настроено как подпроект'"),
				Строка(КоличествоЗадачПодпроект))
			+ Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибок) Тогда
		ТекстОшибок = 
			ТекстОшибок 
			+ Символы.ПС
			+ НСтр("ru = 'Проект будет загружен с признаком ""Редактируется в сторонней системе"" и будет недоступен для редактирования.'");
		ЧтениеXML.Закрыть();
		ВызватьИсключение ТекстОшибок;
	КонецЕсли;
	ЧтениеXML.Закрыть();
			
КонецПроцедуры

&НаСервере
Процедура ПроверитьПроектСерверПоСсылкеНаФайл(ФайлИзБазы)
	
	ДвоичныеДанные = РаботаСФайлами.ПолучитьДвоичныеДанныеФайла(ФайлИзБазы);
	ПроверитьПроектСерверПоДвоичнымДанным(ФайлИзБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПроектСсылка = Параметры.Проект;
	РежимЗагрузки = "ЗагрузкаИзФайлаНаДиске";
	ИмпортироватьРесурсы = Истина;
	СоздаватьНеНайденныхИсполнителей = Истина;
	
	СсылкаНаВнешнийФайл = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "СсылкаНаВнешнийФайл");
	Если ЗначениеЗаполнено(СсылкаНаВнешнийФайл) Тогда
		Если ТипЗнч(СсылкаНаВнешнийФайл) = Тип("Строка") Тогда
			Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
				ПутьКФайлу = СсылкаНаВнешнийФайл;
			КонецЕсли;
			РежимЗагрузки = "ЗагрузкаИзФайлаНаДиске";
		ИначеЕсли ТипЗнч(СсылкаНаВнешнийФайл) = Тип("СправочникСсылка.Файлы") Тогда
			Если Не ЗначениеЗаполнено(ФайлИзБазы) Тогда
				ФайлИзБазы = СсылкаНаВнешнийФайл;
			КонецЕсли;
			РежимЗагрузки = "ЗагрузкаИзФайлаВБазе";
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьВидыПроектов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов");
	Если ИспользоватьВидыПроектов Тогда
		ВидПроектаПоУмолчанию = РаботаСПроектами.ПолучитьВидПроектаПоУмолчанию();
		ВидПроекта = ВидПроектаПоУмолчанию;
		Если ЗначениеЗаполнено(ПроектСсылка) Тогда
			ВидПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "ВидПроекта");
			Если Не ЗначениеЗаполнено(ВидПроекта) Тогда
				ВидПроекта = ВидПроектаПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(
		Элементы, 
		ПроектСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
		
	ВыполняетсяОбновление = ЗначениеЗаполнено(ПроектСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ФайлИзБазы);
	Результат = Неопределено;

	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ФайлИзБазыНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИзБазыНачалоВыбораЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	Результат = Результат1;
	Если ЗначениеЗаполнено(Результат) Тогда
		ФайлИзБазы = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(
	Элементы,  
	ПроектСсылка, 
	ИмпортироватьРесурсы,
	УдалитьНезагруженныеЗадачи,
	ПредварительноОчиститьПроект)
		
	Если НЕ ИмпортироватьРесурсы Тогда
		Элементы.ДекорацияПояснениеИмпортаРесурсов.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПояснениеИмпортаРесурсов.Доступность = Истина;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Элементы.ПредварительноОчиститьПроект.Доступность = Ложь;
		Элементы.УдалитьНезагруженныеЗадачи.Доступность = Ложь;
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = Ложь;
		Элементы.ДекорацияПроектПояснение.Заголовок = НСтр("ru = 'Будет создан новый проект.'");
	Иначе
		Элементы.ПредварительноОчиститьПроект.Доступность = Истина;
		Элементы.УдалитьНезагруженныеЗадачи.Доступность = Истина;
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = Истина;
		Элементы.ДекорацияПроектПояснение.Заголовок = НСтр("ru = 'Проект будет обновлен.'");
	КонецЕсли;
	
	Если ПредварительноОчиститьПроект Тогда
		Элементы.УдалитьНезагруженныеЗадачи.Доступность = Ложь;
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = Ложь;
	Иначе
		Элементы.УдалитьНезагруженныеЗадачи.Доступность = ЗначениеЗаполнено(ПроектСсылка);
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = ЗначениеЗаполнено(ПроектСсылка);
	КонецЕсли;
	
	Если УдалитьНезагруженныеЗадачи Тогда
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = 
			ЗначениеЗаполнено(ПроектСсылка) И Элементы.УдалитьНезагруженныеЗадачи.Доступность;
	Иначе
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,
		ПроектСсылка,
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСсылкаПриИзменении(Элемент)
	
	ФайлИзБазы = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	СсылкаНаВнешнийФайл = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "СсылкаНаВнешнийФайл");
	Если ЗначениеЗаполнено(СсылкаНаВнешнийФайл) Тогда
		Если ТипЗнч(СсылкаНаВнешнийФайл) = Тип("Строка") Тогда
			Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
				ПутьКФайлу = СсылкаНаВнешнийФайл;
			КонецЕсли;
			РежимЗагрузки = "ЗагрузкаИзФайлаНаДиске";
		ИначеЕсли ТипЗнч(СсылкаНаВнешнийФайл) = Тип("СправочникСсылка.Файлы") Тогда
			Если Не ЗначениеЗаполнено(ФайлИзБазы) Тогда
				ФайлИзБазы = СсылкаНаВнешнийФайл;
			КонецЕсли;
			РежимЗагрузки = "ЗагрузкаИзФайлаВБазе";
		КонецЕсли;
	КонецЕсли;
	Элементы.ВидПроекта.Доступность = Истина;
	Если ИспользоватьВидыПроектов Тогда
		ВидПроекта = ВидПроектаПоУмолчанию;
		Если ЗначениеЗаполнено(ПроектСсылка) Тогда
			Элементы.ВидПроекта.Доступность = Ложь;
			ВидПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "ВидПроекта");
			Если Не ЗначениеЗаполнено(ВидПроекта) Тогда
				ВидПроекта = ВидПроектаПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступностьЭлементов(
		Элементы,  
		ПроектСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКопиюФайлаВБазеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ПроектСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьРесурсыПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ПроектСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если вебклиент Тогда
	НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект));
    Возврат;
	#КонецЕсли
	
	ПриОткрытииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
	
	ПриОткрытииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
	
	УстановитьДоступностьЭлементов(
	Элементы,  
	ПроектСсылка, 
	ИмпортироватьРесурсы,
	УдалитьНезагруженныеЗадачи,
	ПредварительноОчиститьПроект);

КонецПроцедуры

&НаКлиенте
Процедура ПроектСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Результат = ОткрытьФорму("Справочник.Проекты.ФормаВыбора", , Элемент); 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезагруженныеЗадачиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ПроектСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительноОчиститьПроектПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ПроектСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры
