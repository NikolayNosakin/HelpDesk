
&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	СохраняемыеЭлементы.Вставить("ВидРабот", ВидРабот);
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура ЗаписатьВводимыеЗначения()
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтотОбъект, ЭлементыДляСохранения(), ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаОтчета") И ЗначениеЗаполнено(Параметры.ДатаОтчета) Тогда  
		ДатаДобавления = Параметры.ДатаОтчета;
	Иначе	
		ДатаДобавления = ТекущаяДата();
	КонецЕсли;	
	МесяцНачисления = НачалоМесяца(ДатаДобавления);
	
	Если Параметры.Свойство("Объект") И ЗначениеЗаполнено(Параметры.Объект) Тогда  
		Источник = Параметры.Объект;
	КонецЕсли;	
	
	Если Параметры.Свойство("Пользователь") И ЗначениеЗаполнено(Параметры.Пользователь) Тогда  
		Пользователь = Параметры.Пользователь;
	Иначе	
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			Проект = Источник.Проект;
			ПроектнаяЗадача = Источник.ПроектнаяЗадача;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.Заявка") Тогда 
			Проект = Источник.Проект;
			ПроектнаяЗадача = Источник.ПроектнаяЗадача;
				
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
			Проект = Источник;
			ПроектнаяЗадача = Неопределено;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			Проект = Источник.Владелец;
			ПроектнаяЗадача = Источник;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Источник) 
			Или ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Источник)
			Или ТипЗнч(Источник) = Тип("СправочникСсылка.Файлы") Тогда 
			
			Проект = Источник.Проект;
			ПроектнаяЗадача = Неопределено;
			
		КонецЕсли; 
		
	КонецЕсли;	
	
	Если Параметры.Свойство("ВидыРабот") Тогда 
		ВидыРабот = Параметры.ВидыРабот;
		
		Если ВидыРабот.Количество() = 1 Тогда
			ВидРабот = ВидыРабот[0].Значение;
		ИначеЕсли ВидыРабот.Количество() > 1 Тогда 
			Для Каждого Вид Из ВидыРабот Цикл
				Элементы.ВидРабот.СписокВыбора.Добавить(Вид.Значение);
			КонецЦикла;	
			Элементы.ВидРабот.КнопкаСпискаВыбора = Истина;
		Иначе	
			// Сохранение вводимых значений
			СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтотОбъект, ЭлементыДляСохранения(), ЭтотОбъект.ИмяФормы);
			Если Элементы.ВидРабот.СписокВыбора.Количество() <> 0 Тогда
				Элементы.ВидРабот.КнопкаСпискаВыбора = Истина;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ДлительностьРаботы") Тогда 
		Длительность = Параметры.ДлительностьРаботы;
	КонецЕсли;
	
	Если Параметры.Свойство("НачалоРаботы") Тогда 
		Начало = Параметры.НачалоРаботы;
	КонецЕсли;
	
	Если Параметры.Свойство("ОкончаниеРаботы") Тогда 
		Окончание = Параметры.ОкончаниеРаботы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) Тогда 
		Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Источник) Тогда
			ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Составление письма ""%1""'"),
			Источник.Тема);
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Источник) Тогда
			ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Чтение письма ""%1""'"),
			Источник.Тема);
			
		Иначе  		
			ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа над ""%1""'"),
			Параметры.ОписаниеРаботы);
			
		КонецЕсли;
	КонецЕсли;
	
	ДлительностьРаботы = УчетВремениКлиентСервер.ЧислоВСтроку(Длительность);
	ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
	
	СпособУказанияВремени = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "СпособУказанияВремени");
	Если Не ЗначениеЗаполнено(СпособУказанияВремени) Тогда
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность;
	КонецЕсли;	
	
	Если СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда 
		Элементы.ДлительностьРаботы.Видимость = Истина;
		Элементы.Начало.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
	Иначе
		Элементы.ДлительностьРаботы.Видимость = Ложь;
		Элементы.Начало.Видимость = Истина;
		Элементы.Окончание.Видимость = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетНачисленияЗарплаты") = Ложь Тогда
		Элементы.МесяцНачисления.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьРольИсполнителя(Пользователь,Проект,ПроектнаяЗадача,ДатаДобавления);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СпособУказанияВремени = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "СпособУказанияВремени");
	Если Не ЗначениеЗаполнено(СпособУказанияВремени) Тогда
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность;
	КонецЕсли;
	
	Если СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда 
		Если Не ЗначениеЗаполнено(ДлительностьРаботы) Или ДлительностьРаботы = "00:00" Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Длительность""'"),,
				"ДлительностьРаботы",, 
				Отказ);
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Начало) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Начало""'"),,
				"Начало",, 
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Окончание) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Окончание""'"),,
				"Окончание",, 
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЗначениеЗаполнено(Проект) И не ЗначениеЗаполнено(РольПользователя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнена роль пользователя на проекте!""'"),,
				"РольПользователя",, 
				Отказ);
		КонецЕсли;
		
		Если ЕстьПеревыполнение И не ЗначениеЗаполнено(ПричинаПеревыполнения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнена причина перевыполнения!""'"),,
				"ПричинаПеревыполнения",, 
				Отказ);
		КонецЕсли;

		Если Не Отказ Тогда
			ТекстСообщения = "";
			РезультатПроверки = РаботаСПроектами.ПроверитьЗаписьОФактическихТрудозатратах(
			Проект,
			ПроектнаяЗадача,
			Источник,
			РольПользователя,
			ТекстСообщения);
			Если Не РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"ПроектЗадача",, 
				Отказ);	
			КонецЕсли;
		КонецЕсли;
		
		//Последняя проверка - проверим не превышаем ли мы норму
		Если СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.Длительность") Тогда 
			Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(ДлительностьРаботы);
		ИначеЕсли ЗначениеЗаполнено(Начало) И ЗначениеЗаполнено(Окончание) Тогда 
			Длительность = Окончание - Начало;
		КонецЕсли;	

		РезультатПроверки = РаботаСЗаявками.ПроверитьПревышениеНормыТрудозатрат(Проект,
			ПроектнаяЗадача,
			Источник,
			РольПользователя,
			ТекстСообщения,Длительность);
		Если Не РезультатПроверки Тогда
			Отказ = Не ЗначениеЗаполнено(ПричинаПеревыполнения);
			Элементы.ГруппаОписанияПеревыполнения.Видимость = Истина;
			ОписаниеПеревыполнения = ТекстСообщения;
			ЕстьПеревыполнение = Истина;
		Иначе
			Элементы.ГруппаОписанияПеревыполнения.Видимость = Ложь;
			ОписаниеПеревыполнения = "";
			ЕстьПеревыполнение = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Проект, ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Проект = ВыбранноеЗначение.Проект;
		ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(Неопределено, ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
		ПоказатьЗначение(Неопределено, Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Проект = Неопределено;
	ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		ЗаписатьВводимыеЗначения();
	КонецЕсли;
	
	Если СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.Длительность") Тогда 
		Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(ДлительностьРаботы);
	ИначеЕсли ЗначениеЗаполнено(Начало) И ЗначениеЗаполнено(Окончание) Тогда 
		Длительность = Окончание - Начало;
	КонецЕсли;	
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("ДатаОтчета", ДатаДобавления);
	ПараметрыОтчета.Вставить("МесяцНачисления", МесяцНачисления);
	ПараметрыОтчета.Вставить("ВидРаботы", ВидРабот);
	ПараметрыОтчета.Вставить("ОписаниеРаботы", ОписаниеРаботы);
	ПараметрыОтчета.Вставить("ДлительностьРаботы", Длительность);
	ПараметрыОтчета.Вставить("НачалоРаботы", Начало);
	ПараметрыОтчета.Вставить("ОкончаниеРаботы", Окончание);
	ПараметрыОтчета.Вставить("Объект", Источник);
	ПараметрыОтчета.Вставить("Проект", Проект);
	ПараметрыОтчета.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
	ПараметрыОтчета.Вставить("РольПользователя", РольПользователя);
	ПараметрыОтчета.Вставить("ПричинаПеревыполнения", ПричинаПеревыполнения);
	
	Закрыть(ПараметрыОтчета);
		
КонецПроцедуры

&НаКлиенте
Процедура НеДобавлять(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьРаботыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = СписокВыбораВремени();
	
	ВыбранноеЗначение = Неопределено;

	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДлительностьРаботыНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), СписокВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьРаботыНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ВыбранныйЭлемент;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ДлительностьРаботы = ВыбранноеЗначение.Значение;
	ПосчитатьДлительностьВЧас();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораВремени()
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить("00:15");
	СписокВыбора.Добавить("00:30");
	СписокВыбора.Добавить("00:45");
	СписокВыбора.Добавить("01:00");
	СписокВыбора.Добавить("01:30");
	СписокВыбора.Добавить("02:00");
	СписокВыбора.Добавить("03:00");
	СписокВыбора.Добавить("04:00");
	СписокВыбора.Добавить("05:00");
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораВремениДня()
	
	СписокВыбора = Новый СписокЗначений;
	
	ВремяНачала = 8*3600;
	ВремяОкончания = 22*3600;
	ДатаНачала = Дата(1,1,1)+ ВремяНачала;
	ДатаОкончания = Дата(1,1,1)+ ВремяОкончания;
	Интервал = 30*60;
	
	Пока ДатаНачала <= ДатаОкончания Цикл
		СписокВыбора.Добавить(ДатаНачала,Формат(ДатаНачала,"ДФ=ЧЧ:мм"));
		ДатаНачала = ДатаНачала + Интервал; 
	КонецЦикла;	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Проект = ВыбранноеЗначение.Проект;
			ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	ЗаполнитьРольИсполнителя(Пользователь,Проект,ПроектнаяЗадача,ДатаДобавления);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРольИсполнителя(Исполнитель,ТекПроект,ТекПроектЗадача,Дата)
	Если Не ЗначениеЗаполнено(ТекПроект) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаИсполнителей = РаботаСЗаявками.ПолучитьПроектнуюКоманду(ТекПроект,ТекПроектЗадача,Дата);

	СтрокаТабл = ТаблицаИсполнителей.Найти(Исполнитель,"Пользователь");
	
	Если СтрокаТабл <> Неопределено Тогда
		РольПользователя = СтрокаТабл.Роль;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РольПользователяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = РаботаСЗаявками.СформироватьДанныеВыбораИсполнителя(Проект,ПроектнаяЗадача,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = СписокВыбораВремениДня();
	
	ВыбранноеЗначение = Неопределено;

	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОкончаниеНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), СписокВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ВыбранныйЭлемент;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Окончание = ВыбранноеЗначение.Значение;
	ПосчитатьДлительностьВЧас();

КонецПроцедуры

&НаКлиенте
Процедура НачалоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = СписокВыбораВремениДня();
	
	ВыбранноеЗначение = Неопределено;

	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), СписокВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НачалоНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ВыбранныйЭлемент;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Начало = ВыбранноеЗначение.Значение;
	ПосчитатьДлительностьВЧас();

КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	ПосчитатьДлительностьВЧас();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	ПосчитатьДлительностьВЧас();
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьРаботыПриИзменении(Элемент)
	  ПосчитатьДлительностьВЧас();
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьДлительностьВЧас()
	Если СпособУказанияВремени = ПредопределенноеЗначение("Перечисление.СпособыУказанияВремени.Длительность") Тогда 
		ДлительностьЧас = УчетВремениКлиентСервер.ЧислоИзСтроки(ДлительностьРаботы)/3600;
	ИначеЕсли ЗначениеЗаполнено(Начало) И ЗначениеЗаполнено(Окончание) Тогда 
		ДлительностьЧас = (Окончание - Начало)/3600;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПосчитатьДлительностьВЧас();
КонецПроцедуры
