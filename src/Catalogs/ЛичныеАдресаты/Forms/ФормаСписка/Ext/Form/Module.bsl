
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьАдресатов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресатов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникГруппыЛичныхАдресатов.Ссылка КАК ГруппаСсылка,
		|	СправочникГруппыЛичныхАдресатов.ПометкаУдаления КАК ГруппаПометкаУдаления,
		|	СправочникГруппыЛичныхАдресатов.Предопределенный КАК ГруппаПредопределенный,
		|	СправочникГруппыЛичныхАдресатов.Наименование КАК ГруппаНаименование,
		|	ЛичныеАдресаты.Ссылка КАК ЛичныеАдресатыСсылка,
		|	ЛичныеАдресаты.ПометкаУдаления КАК ЛичныеАдресатыПометкаУдаления,
		|	ЛичныеАдресаты.Наименование КАК ЛичныеАдресатыНаименование,
		|	ЛичныеАдресаты.Должность,
		|	ЛичныеАдресаты.Комментарий,
		|	ЛичныеАдресаты.Организация,
		|	ЛичныеАдресаты.КонтактнаяИнформация.(
		|		Тип,
		|		АдресЭП,
		|		ЗначенияПолей,
		|		Представление,
		|		НомерТелефона
		|	)
		|ИЗ
		|	Справочник.ГруппыЛичныхАдресатов КАК СправочникГруппыЛичныхАдресатов
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|		ПО СправочникГруппыЛичныхАдресатов.Ссылка = ЛичныеАдресаты.Группа
		|ГДЕ
		|	ЕСТЬNULL(СправочникГруппыЛичныхАдресатов.Пользователь, ЛичныеАдресаты.Пользователь) = &Пользователь
		|	И ЕСТЬNULL(ЛичныеАдресаты.Пользователь, СправочникГруппыЛичныхАдресатов.Пользователь) = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаСсылка ИЕРАРХИЯ,
		|	ЛичныеАдресатыНаименование";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	ВыборкаДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоКонтактов.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ЛичныеАдресатыНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваМоиКонтакты(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваМоиКонтакты(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	СтрокаДереваГруппы = Неопределено;
	ЭлементыДляДобавленияПользователей = КореньДерева;
	
	Если ЗначениеЗаполнено(Выборка.ГруппаСсылка) Тогда
	
		СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
		Если СтрокаДереваГруппы = Неопределено Тогда
			
			СтрокаДереваГруппы = КореньДерева.Добавить();
			ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
			
			СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
			СтрокаДереваГруппы.Группа = Выборка.ГруппаСсылка;
			СтрокаДереваГруппы.Ссылка = Выборка.ГруппаСсылка;
			СтрокаДереваГруппы.НомерКартинки = ?(Выборка.ГруппаПометкаУдаления, 2, 3);
			СтрокаДереваГруппы.ПометкаУдаления = Выборка.ГруппаПометкаУдаления;
			
		КонецЕсли;
		
		ЭлементыДляДобавленияПользователей = СтрокаДереваГруппы.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ЛичныеАдресатыСсылка) Тогда
		
		СтрокаДереваПользователь = ЭлементыДляДобавленияПользователей.Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.ЛичныеАдресатыНаименование;
		СтрокаДереваПользователь.Группа = Выборка.ГруппаСсылка;
		СтрокаДереваПользователь.Ссылка = Выборка.ЛичныеАдресатыСсылка;
		СтрокаДереваПользователь.НомерКартинки = ?(Выборка.ЛичныеАдресатыПометкаУдаления = Истина, 0, 1);
		СтрокаДереваПользователь.ЭтоАдресат = Истина;
		СтрокаДереваПользователь.ПометкаУдаления = Выборка.ЛичныеАдресатыПометкаУдаления;
		
		СтрокаДереваПользователь.Должность = Выборка.Должность;
		СтрокаДереваПользователь.Комментарий = Выборка.Комментарий;
		СтрокаДереваПользователь.Организация = Выборка.Организация;
		
		Для Каждого СтрокаКонтактнойИнформации Из Выборка.КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				СтрокаДереваПользователь.Email = СтрокаКонтактнойИнформации.АдресЭП;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаКонтактнойИнформации Из Выборка.КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				СтрокаДереваПользователь.Телефон = СтрокаКонтактнойИнформации.Представление;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;	
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ЛичныеАдресатыНаименование");
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваМоиКонтакты(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			
			Пометка = Элемент.ТекущиеДанные.ПометкаУдаления;
			
			Если Пометка Тогда 
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Cнять с ""%1"" пометку на удаление?'"),
					Строка(Элемент.ТекущиеДанные.Наименование));
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пометить ""%1"" на удаление?'"),
					Строка(Элемент.ТекущиеДанные.Наименование));
			КонецЕсли;	
			
			Результат = Неопределено;
	
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоКонтактовПередУдалениемЗавершение2", ЭтотОбъект, Новый Структура("Пометка, Элемент", Пометка, Элемент)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ПометкаУдаления = Истина;
		Для Каждого СтрокаТаблицы Из Элемент.ВыделенныеСтроки Цикл
			СтрокаТаблицыКонтакт = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаТаблицы);
			Если СтрокаТаблицыКонтакт.ПометкаУдаления = Истина Тогда
				ПометкаУдаления = Ложь;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Если ПометкаУдаления Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоКонтактовПередУдалениемЗавершение1", ЭтотОбъект, Новый Структура("ПометкаУдаления, Режим, Элемент", ПометкаУдаления, Режим, Элемент)), НСтр("ru = 'Пометить выделенные элементы на удаление?'"), Режим);
            Возврат;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоКонтактовПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ПометкаУдаления, Элемент", ПометкаУдаления, Элемент)), НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'"), Режим);
            Возврат;
		КонецЕсли;
		
		ДеревоКонтактовПередУдалениемФрагмент1(ПометкаУдаления, Элемент);


		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Пометка = ДополнительныеПараметры.Пометка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Результат = РезультатВопроса;
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	
	Элемент.ТекущиеДанные.ПометкаУдаления = НЕ Элемент.ТекущиеДанные.ПометкаУдаления;
	Если Пометка Тогда
		Элемент.ТекущиеДанные.НомерКартинки = Элемент.ТекущиеДанные.НомерКартинки + 1;
	Иначе	
		Элемент.ТекущиеДанные.НомерКартинки = Элемент.ТекущиеДанные.НомерКартинки - 1;
	КонецЕсли;	
	
	РаботаСЛичнымиАдресатами.ПометитьНаУдаление(Элемент.ТекущиеДанные.Ссылка, Не Пометка, УникальныйИдентификатор);
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
	Режим = ДополнительныеПараметры.Режим;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКонтактовПередУдалениемФрагмент1(ПометкаУдаления, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемФрагмент1(ПометкаУдаления, Знач Элемент)
	
	ДеревоКонтактовПередУдалениемФрагмент(ПометкаУдаления, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКонтактовПередУдалениемФрагмент(ПометкаУдаления, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемФрагмент(ПометкаУдаления, Знач Элемент)
	
	ПометитьНаУдалениеСтроки(Элемент.ВыделенныеСтроки, ПометкаУдаления);
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();

КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеСтроки(Знач МассивСтрок, Пометка)
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицыКонтакт = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаТаблицы);
		РаботаСЛичнымиАдресатами.ПометитьНаУдаление(СтрокаТаблицыКонтакт.Ссылка, Пометка, УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	ТекущаяГруппа = Неопределено;
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяГруппа = Элементы.ДеревоКонтактов.ТекущиеДанные.Группа;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("Родитель", ТекущаяГруппа);
	ОткрытьФорму("Справочник.ГруппыЛичныхАдресатов.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("СоздатьГруппуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресатовИВосстановитьСостояниеДерева()
	
	СостояниеРаскрытости = Новый Соответствие;
	
	ТекущаяСсылка = Неопределено;
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСсылка = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	Для Каждого Строка Из КореньДерева Цикл
		СтрокаРазвернута = Элементы.ДеревоКонтактов.Развернут(Строка.ПолучитьИдентификатор());
		СостояниеРаскрытости[Строка.Ссылка] = СтрокаРазвернута;
	КонецЦикла;
	
	ЗаполнитьАдресатов();
	
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	
	ТекущийИдентификатор = Неопределено;
	Если ТекущаяСсылка <> Неопределено Тогда
		ТекущийИдентификатор = НайтиИдентификаторПоСсылке(КореньДерева, ТекущаяСсылка);
	КонецЕсли;
	
	Для Каждого Строка Из КореньДерева Цикл
		
		СтрокаРазвернута = СостояниеРаскрытости.Получить(Строка.Ссылка);
		
		Если СтрокаРазвернута = Истина Тогда
			Элементы.ДеревоКонтактов.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;	
		
	КонецЦикла;
	
	Элементы.ДеревоКонтактов.ТекущаяСтрока = ТекущийИдентификатор;
	
КонецПроцедуры

&НаКлиенте 
Функция НайтиИдентификаторПоСсылке(ЭлементыДерева, ТекущаяСсылка)
	
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		Если Строка.Ссылка = ТекущаяСсылка Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
		ДочерниеЭлементыДерева = Строка.ПолучитьЭлементы();
		Идентификатор = НайтиИдентификаторПоСсылке(ДочерниеЭлементыДерева, ТекущаяСсылка);
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(Неопределено, Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущаяГруппа = Неопределено;
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяГруппа = Элементы.ДеревоКонтактов.ТекущиеДанные.Группа;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("Родитель", ТекущаяГруппа);
	Результат = Неопределено;

	ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ДеревоКонтактовПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломДобавленияЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	Результат = Результат1;
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзOutlook(Команда)
	
	Состояние(НСтр("ru='Выполняется загрузка из адресной книги Outlook. Пожалуйста подождите...'"));
	
	МассивКонтактов = РаботаСЛичнымиАдресатамиКлиент.ЗагрузитьКонтактыИзOutlook();

	ЧислоЗагруженных = РаботаСЛичнымиАдресатами.ЗаписатьКонтакты(МассивКонтактов);
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
	
	Состояние();
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Загрузка из адресной книги Outlook завершена. Загружено: %1.'"), 
		Формат(ЧислоЗагруженных, "ЧН=0"));
	ПоказатьПредупреждение(Неопределено, СтрокаСообщения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛичныйАдресатИзменен" Тогда
		ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаИд Из Элементы.ДеревоКонтактов.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаИд);
		ПараметрыПеретаскивания.Значение.Добавить(СтрокаДерева.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаНазначения = ДеревоКонтактов.НайтиПоИдентификатору(Строка);
	
	Если СтрокаНазначения <> Неопределено Тогда
		СменитьВладельца(ПараметрыПеретаскивания.Значение, СтрокаНазначения.Группа);
		ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СменитьВладельца(МассивСсылок, ГруппаНазначения)
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если Ссылка.Группа <> ГруппаНазначения Тогда
			
			ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			СправочникОбъект.Группа = ГруппаНазначения;
			СправочникОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВКорреспондента(Команда)
	
	Если Элементы.ДеревоКонтактов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЛичныйАдресат = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
	ПараметрыФормы = Новый Структура("ЛичныйАдресат", ЛичныйАдресат);
	КодВозврата = Неопределено;

	ОткрытьФорму("Справочник.ЛичныеАдресаты.Форма.ВыборКорреспондентаКонтактноеЛицо", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПреобразоватьВКорреспондентаЗавершение", ЭтотОбъект, Новый Структура("ЛичныйАдресат", ЛичныйАдресат)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВКорреспондентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЛичныйАдресат = ДополнительныеПараметры.ЛичныйАдресат;
	
	
	КодВозврата = Результат;
	
	Если ТипЗнч(КодВозврата) = Тип("СправочникСсылка.Контрагенты") 
		Или ТипЗнч(КодВозврата) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		РаботаСЛичнымиАдресатами.ЗаполнитьКонтактИЗаменитьСсылки(ЛичныйАдресат, КодВозврата);
		
		ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
		
	КонецЕсли;
	
КонецПроцедуры


	