////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимость(Режим)
	
	Элементы.ТекущийПланДлительностьЗадачиСтр.Заголовок = НСтр("ru = 'Длит. (план)'");
	Элементы.ТекущийПланНачалоЗадачи.Заголовок = НСтр("ru = 'Начало (план)'");
	Элементы.ТекущийПланОкончаниеЗадачи.Заголовок = НСтр("ru = 'Окончание (план)'");
	Элементы.ТекущийПланТрудозатратыСтр.Заголовок = НСтр("ru = 'Трудозатраты (план)'");
	
	Если Режим = "Планирование" Тогда 
		
		Элементы.ТекущийПланДлительностьЗадачиСтр.Видимость = Истина;
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Истина;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Истина;
		
		Элементы.ТекущийПланДлительностьЗадачиСтр.Заголовок = НСтр("ru = 'Длит.'");
		Элементы.ТекущийПланНачалоЗадачи.Заголовок = НСтр("ru = 'Начало'");
		Элементы.ТекущийПланОкончаниеЗадачи.Заголовок = НСтр("ru = 'Окончание'");
		
		Элементы.НачалоФакт.Видимость = Ложь;
		Элементы.ДлительностьФактСтр.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Ложь;
		
		Элементы.ПредшественникиСтр.Видимость = Истина;
		Элементы.ИсполнителиСтр.Видимость = Истина;
		
		Элементы.Состояние.Видимость = Ложь;
		Элементы.ТекущийПланТрудозатратыСтр.Видимость = Истина;
		Элементы.ТекущийПланТрудозатратыСтр.Заголовок = НСтр("ru = 'Трудозатраты'");
		
		Элементы.ТрудозатратыФактСтр.Видимость = Ложь;
		
	ИначеЕсли Режим = "НаВыполнение" Тогда 
		
		Элементы.Состояние.Видимость = Истина;
		Элементы.ПредшественникиСтр.Видимость = Ложь;
		
		Элементы.ТекущийПланДлительностьЗадачиСтр.Видимость = Ложь;
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Истина;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Ложь;
		
		Элементы.НачалоФакт.Видимость = Истина;
		Элементы.ДлительностьФактСтр.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Ложь;
		
		Элементы.ТекущийПланТрудозатратыСтр.Видимость = Ложь;
		Элементы.ТрудозатратыФактСтр.Видимость = Ложь;
		
	ИначеЕсли Режим = "КонтрольВыполнения" Тогда 
		
		Элементы.Состояние.Видимость = Истина;
		Элементы.ПредшественникиСтр.Видимость = Ложь;
		
		Элементы.ТекущийПланДлительностьЗадачиСтр.Видимость = Ложь;
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Ложь;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Истина;
		
		Элементы.НачалоФакт.Видимость = Ложь;
		Элементы.ДлительностьФактСтр.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Истина;
		
		Элементы.ТекущийПланТрудозатратыСтр.Видимость = Ложь;
		Элементы.ТрудозатратыФактСтр.Видимость = Ложь;
		
	ИначеЕсли Режим = "Трудозатраты" Тогда 
		
		Элементы.Состояние.Видимость = Истина;
		Элементы.ПредшественникиСтр.Видимость = Ложь;
		
		Элементы.ТекущийПланДлительностьЗадачиСтр.Видимость = Ложь;
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Ложь;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Ложь;
		
		Элементы.НачалоФакт.Видимость = Ложь;
		Элементы.ДлительностьФактСтр.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Ложь;
		
		Элементы.ТекущийПланТрудозатратыСтр.Видимость = Истина;
		Элементы.ТрудозатратыФактСтр.Видимость = Истина;
		
	ИначеЕсли Режим = "Полный" Тогда 	
		
		Элементы.Состояние.Видимость = Истина;
		Элементы.ПредшественникиСтр.Видимость = Истина;
		
		Элементы.ТекущийПланДлительностьЗадачиСтр.Видимость = Истина;
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Истина;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Истина;
		
		Элементы.НачалоФакт.Видимость = Истина;
		Элементы.ДлительностьФактСтр.Видимость = Истина;
		Элементы.ОкончаниеФакт.Видимость = Истина;
		
		Элементы.ТекущийПланТрудозатратыСтр.Видимость = Истина;
		Элементы.ТрудозатратыФактСтр.Видимость = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	РежимПросмотра = "Планирование";
	РежимРедактирования = "ВДиалоге";
	
	Проект = Параметры.Проект;
	ЭтотОбъект.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'План проекта ""%1""'"),
		Строка(Проект));
	
	РеквизитыПроекта = Новый Структура;
	РеквизитыПроекта.Вставить("Ссылка", Проект);
	РеквизитыПроекта.Вставить("ТекущийПланНачало", Проект.ТекущийПланНачало);
	РеквизитыПроекта.Вставить("ТекущийПланОкончание", Проект.ТекущийПланОкончание);
	РеквизитыПроекта.Вставить("ГрафикРаботы", Проект.ГрафикРаботы);
	РеквизитыПроекта.Вставить("ЗаполненаПроектнаяКоманда", Проект.ПроектнаяКоманда.Количество() > 0);
	РеквизитыПроекта.Вставить("РедактируетсяВСтороннейСистеме", Проект.РедактируетсяВСтороннейСистеме);
	РеквизитыПроекта.Вставить("ЕдиницаТрудозатратЗадач", Проект.ЕдиницаТрудозатратЗадач);
	РеквизитыПроекта.Вставить("ЕдиницаДлительностиЗадач", Проект.ЕдиницаДлительностиЗадач);
	РеквизитыПроекта.Вставить("ДанныеДоступныДляИзменения", УправлениеДоступом.ЕстьПраво(Проект, "Изменение"));
	РеквизитыПроекта.Вставить("СпособПланирования", Проект.СпособПланирования);
	РеквизитыПроекта.Вставить("ЗагруженИзMSProject", Проект.ЗагруженИзMSProject);
	
	ЗаполнитьДеревоЗадач();
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Или РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		Элементы.ДеревоЗадач.ИзменятьСоставСтрок = Ложь;
		Элементы.ДеревоЗадач.ИзменятьПорядокСтрок = Ложь;
		Элементы.ДеревоЗадачГруппаИзменениеПорядкаЗадач.Доступность = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюСвязатьЗадачи.Доступность = Ложь;
		Элементы.ДеревоЗадачГруппаДобавить.Доступность = Ложь;
	Иначе	
		Элементы.ДеревоЗадач.ИзменятьСоставСтрок = Истина;
		Элементы.ДеревоЗадач.ИзменятьПорядокСтрок = Истина;
		Элементы.ДеревоЗадачГруппаИзменениеПорядкаЗадач.Доступность = Истина;
		Элементы.ДеревоЗадачКонтекстноеМенюСвязатьЗадачи.Доступность = Истина;
		Элементы.ДеревоЗадачГруппаДобавить.Доступность = Истина;
	КонецЕсли;	
	
	УстановитьВидимость(РежимПросмотра);
	
	УстановитьДоступностьПолейДереваЗадач(РежимРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Строка Из ДеревоЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимость(Настройки["РежимПросмотра"]);
	
	УстановитьДоступностьПолейДереваЗадач(Настройки["РежимРедактирования"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПроектнаяЗадача" И Параметр.Проект = Проект Тогда 
		
		ОбновитьИзмененныеСтрокиЗадач(Параметр.МассивИзмененныхЗадач);
		
	ИначеЕсли ИмяСобытия = "СозданаПроектнаяЗадача" И Параметр.Проект = Проект Тогда  	
		
		Если ЗначениеЗаполнено(Параметр.Родитель) Тогда 
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), Параметр.Родитель, Индекс);
			
			НоваяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		КонецЕсли;	
		НоваяСтрока.Ссылка = Параметр.ПроектнаяЗадача;
		Элементы.ДеревоЗадач.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		МассивИзмененныхЗадач = Новый Массив;
		МассивИзмененныхЗадач.Добавить(Параметр.ПроектнаяЗадача);
		
		Для Каждого Строка Из Параметр.МассивИзмененныхЗадач Цикл
			МассивИзмененныхЗадач.Добавить(Строка);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Параметр.Родитель) Тогда 
			МассивИзмененныхЗадач.Добавить(Параметр.Родитель);	
		КонецЕсли;	
		
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессСтартован" И Параметр.Проект = Проект) Тогда
		
		Если ЗначениеЗаполнено(Параметр.ПроектнаяЗадача) Тогда 
			МассивИзмененныхЗадач = Новый Массив;
		    МассивИзмененныхЗадач.Добавить(Параметр.ПроектнаяЗадача);
			ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
			
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), Параметр.ПроектнаяЗадача, Индекс);
			
			НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
			НайденнаяСтрока.Задачи = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессСтартован" И ТипЗнч(Параметр.СсылкаНаПредметБизнесПроцесса) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		СсылкаНаПредметБизнесПроцесса = Параметр.СсылкаНаПредметБизнесПроцесса;
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаПредметБизнесПроцесса, "Владелец") = Проект Тогда 
			
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), СсылкаНаПредметБизнесПроцесса, Индекс);
			
			НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
			НайденнаяСтрока.Задачи = Истина;
			
		КонецЕсли;                                         
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕРЕВО ЗАДАЧ

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(Проект) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// СписокРеквизитов
		|	ПроектныеЗадачи.Ссылка,
		|	ПроектныеЗадачи.ВерсияДанных,
		|	ПроектныеЗадачи.Родитель,
		|	ПроектныеЗадачи.ПометкаУдаления,
		|	ПроектныеЗадачи.Наименование,
		|	ПроектныеЗадачи.КодСДР,
		|	ПроектныеЗадачи.Владелец,
		|	ПроектныеЗадачи.ГрафикРаботы,
		|	ПроектныеЗадачи.ТекущийПланНачало,
		|	ПроектныеЗадачи.ТекущийПланОкончание,
		|	ПроектныеЗадачи.ТекущийПланТрудозатраты,
		|	ПроектныеЗадачи.ТекущийПланДлительность,
		|	ПроектныеЗадачи.ТекущийПланЕдиницаДлительности,
		|	ПроектныеЗадачи.ТекущийПланЕдиницаТрудозатрат,
		|	ПроектныеЗадачи.НачалоФакт,
		|	ПроектныеЗадачи.ОкончаниеФакт,
		|	ПроектныеЗадачи.ДлительностьФакт,
		|	ПроектныеЗадачи.ЕдиницаДлительностиФакт,
		|	ПроектныеЗадачи.ЕдиницаТрудозатратФакт,
		|	ПроектныеЗадачи.СуммарнаяЗадача,
		|	ПроектныеЗадачи.Веха,
		|	ПроектныеЗадачи.ТипОграничения,
		|	ПроектныеЗадачи.Исполнители,
		|	ПроектныеЗадачи.Предшественники,
		// СписокРеквизитов		
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Задача.ЗадачаИсполнителя
		|				ГДЕ
		|					(ПроектныеЗадачи.Ссылка = Задача.ЗадачаИсполнителя.ПроектнаяЗадача
		|						ИЛИ ПроектныеЗадачи.Ссылка = Задача.ЗадачаИсполнителя.Предмет)
		|					И НЕ Задача.ЗадачаИсполнителя.ПометкаУдаления
		|					И НЕ Задача.ЗадачаИсполнителя.Выполнена)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьЗадачи
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроектныеЗадачи.НомерЗадачиВУровне ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Проект", Проект);
     
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ТекущаяДата = ТекущаяДата();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПометкаУдаления И Не ПоказатьПомеченныеНаУдаление Тогда 
				Продолжить;
			КонецЕсли;	
			
			Родитель = Выборка.Родитель;
			Если Не ЗначениеЗаполнено(Родитель) Тогда 
				НоваяСтрока = Дерево.Строки.Добавить();
			Иначе	
				НайденнаяСтрока = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);	
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Предшественники.Колонки.Добавить("Предшественник");
			НоваяСтрока.Предшественники.Колонки.Добавить("ТипЗависимости");
			НоваяСтрока.Предшественники.Колонки.Добавить("Задержка");
			НоваяСтрока.Предшественники.Колонки.Добавить("ЕдиницаЗадержки");
			
			НоваяСтрока.Исполнители.Колонки.Добавить("Исполнитель");
			НоваяСтрока.Исполнители.Колонки.Добавить("ОсновнойОбъектАдресации");
			НоваяСтрока.Исполнители.Колонки.Добавить("ДополнительныйОбъектАдресации");
			НоваяСтрока.Исполнители.Колонки.Добавить("ТекущийПланТрудозатраты");
			
			НоваяСтрока.Задачи = Выборка.ЕстьЗадачи;
			НоваяСтрока.ТекущаяДата = ТекущаяДата;
			
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗадач");
	
	ЗаполнитьДиаграммуГанта();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ПроектнаяЗадача)
	
	Если ТипЗнч(ЭлементДерева) = Тип("Число") Тогда 
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ЭлементДерева);
	КонецЕсли;	
	
	СписокРеквизитов = 
	"Наименование, 
	|Родитель,
	|Исполнители,
	|Предшественники,
	|КодСДР, 
	|Владелец, 
	|Ссылка,
	|ВерсияДанных,
	|ПометкаУдаления, 
	|ГрафикРаботы, 
	|ТекущийПланНачало, 
	|ТекущийПланОкончание, 
	|ТекущийПланТрудозатраты, 
	|ТекущийПланДлительность, 
	|ТекущийПланЕдиницаДлительности, 
	|ТекущийПланЕдиницаТрудозатрат, 
	|НачалоФакт,
	|ОкончаниеФакт,
	|ДлительностьФакт,
	|ЕдиницаДлительностиФакт,
	|ЕдиницаТрудозатратФакт,
	|ТипОграничения,
	|СуммарнаяЗадача,
	|Веха";
	
	Если ТипЗнч(ПроектнаяЗадача) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроектнаяЗадача, СписокРеквизитов);
	Иначе
		Реквизиты = ПроектнаяЗадача;
	КонецЕсли;	
	
	СписокРеквизитов = СтрЗаменить(СписокРеквизитов, "Родитель,", "");
	СписокРеквизитов = СтрЗаменить(СписокРеквизитов, "Исполнители,", "");
	СписокРеквизитов = СтрЗаменить(СписокРеквизитов, "Предшественники,", "");
	
	ЗаполнитьЗначенияСвойств(ЭлементДерева, Реквизиты, СписокРеквизитов);
	
	ЭлементДерева.ИндексКартинки = ?(ЭлементДерева.ПометкаУдаления, 3, 2);
	ЭлементДерева.РодительскаяЗадача = Реквизиты.Родитель;
	ЭлементДерева.НаименованиеЗадачи = Реквизиты.КодСДР + "  " + Реквизиты.Наименование; 
	
	// плановая длительность
	ПодписьТекПланДлительность = ПолучитьПодписьДлительности(Реквизиты.ТекущийПланДлительность, Реквизиты.ТекущийПланЕдиницаДлительности);
	ЭлементДерева.ТекущийПланДлительностьСтр = Строка(Реквизиты.ТекущийПланДлительность) + " " + ПодписьТекПланДлительность;
	
	// фактическая длительность
	ЭлементДерева.ДлительностьФактСтр = "";
	Если Реквизиты.ДлительностьФакт > 0 Тогда 
		ПодписьТекФактДлительность = ПолучитьПодписьДлительности(Реквизиты.ДлительностьФакт, Реквизиты.ЕдиницаДлительностиФакт);
		ЭлементДерева.ДлительностьФактСтр = Строка(Реквизиты.ДлительностьФакт) + " " + ПодписьТекФактДлительность;
	КонецЕсли;
	
	// плановые трудозатраты
	ЭлементДерева.ТекущийПланТрудозатратыСтр = "";
	Если Реквизиты.ТекущийПланТрудозатраты > 0 Тогда 
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(Реквизиты.ТекущийПланТрудозатраты, Реквизиты.ТекущийПланЕдиницаТрудозатрат);
		ЭлементДерева.ТекущийПланТрудозатратыСтр = Строка(Реквизиты.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
	КонецЕсли;	
	
	// фактические трудозатраты
	ТрудозатратыФакт = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(Реквизиты.Ссылка);
	ЭлементДерева.ТрудозатратыФакт = ТрудозатратыФакт;
	Если ТрудозатратыФакт > 0 Тогда 
		ПодписьТрудозатратыФакт = ПолучитьПодписьТрудозатрат(ТрудозатратыФакт, Реквизиты.ЕдиницаТрудозатратФакт);
		ЭлементДерева.ТрудозатратыФактСтр = Строка(ТрудозатратыФакт) + " " + ПодписьТрудозатратыФакт;
	КонецЕсли;
	
	// состояние
	СостояниеСтр = "";
	Если ЗначениеЗаполнено(Реквизиты.ОкончаниеФакт) Тогда 
		СостояниеСтр = НСтр("ru = 'Выполнена'");
   	ИначеЕсли ЗначениеЗаполнено(Реквизиты.НачалоФакт) Тогда 
		СостояниеСтр = НСтр("ru = 'Выполняется'");
	Иначе   
		СостояниеСтр = НСтр("ru = 'Запланирована'");
	КонецЕсли;	
	ЭлементДерева.Состояние = СостояниеСтр;
	
	// исполнители
	ЭлементДерева.Исполнители.Очистить();
	Для Каждого СтрокаТаблЧасти Из Реквизиты.Исполнители.Выгрузить() Цикл
		СтрокаТаблицыЗначений = ЭлементДерева.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокаТаблЧасти);
	КонецЦикла;	
	ЭлементДерева.ИсполнителиСтр = ПредставлениеИсполнителя(ЭлементДерева.Исполнители);
	
	// предшественники
	ЭлементДерева.Предшественники.Очистить();
	Для Каждого СтрокаТаблЧасти Из Реквизиты.Предшественники.Выгрузить() Цикл
		СтрокаТаблицыЗначений = ЭлементДерева.Предшественники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокаТаблЧасти);
	КонецЦикла;	
	ЭлементДерева.ПредшественникиСтр = ПредставлениеПредшественников(ЭлементДерева.Предшественники);
	
	// задержка начала
	НачалоФакт = ?(ЗначениеЗаполнено(Реквизиты.НачалоФакт), Реквизиты.НачалоФакт, ТекущаяДата()) ;
	ЭлементДерева.ЗадержкаНачала = (НачалоФакт > Реквизиты.ТекущийПланНачало);
	
	// задержка окончания
	ОкончаниеФакт = ?(ЗначениеЗаполнено(Реквизиты.ОкончаниеФакт), Реквизиты.ОкончаниеФакт, ТекущаяДата()) ;
	ЭлементДерева.ЗадержкаОкончания = (ОкончаниеФакт > Реквизиты.ТекущийПланОкончание);
	
	// все предшественники выполнены
	ВсеПредшественникиВыполнены = Истина;
	Для Каждого СтрокаТаблЧасти Из Реквизиты.Предшественники.Выгрузить() Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблЧасти.Предшественник.ОкончаниеФакт) Тогда 
			ВсеПредшественникиВыполнены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЭлементДерева.ВсеПредшественникиВыполнены = ВсеПредшественникиВыполнены;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач)

	Для Каждого ИзмененнаяЗадача Из МассивИзмененныхЗадач Цикл
		
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), ИзмененнаяЗадача, Индекс);
		Если Индекс > -1 Тогда 
			СтрокаДерева = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(СтрокаДерева, ИзмененнаяЗадача);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаполнитьДиаграммуГанта();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПредставлениеПредшественников(Предшественники)
	
	ПредшественникиСтр = "";
	Для Каждого СтрокаТаблЧасти Из Предшественники Цикл
		
		Если СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда
			ТипЗависимости = "";
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда
			ТипЗависимости = НСтр("ru = 'ОО'");
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда
			ТипЗависимости = НСтр("ru = 'НО'");
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда
			ТипЗависимости = НСтр("ru = 'НН'");
		КонецЕсли;
		
		Задержка = "";
		Если СтрокаТаблЧасти.Задержка > 0 Тогда
			Задержка = " + " + СтрокаТаблЧасти.Задержка + " " + ПолучитьПодписьДлительности(СтрокаТаблЧасти.Задержка, СтрокаТаблЧасти.ЕдиницаЗадержки);
		КонецЕсли;
		
		ПредшественникКодСДР = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблЧасти.Предшественник, "КодСДР");
		ПредшественникиСтр = ПредшественникиСтр + ПредшественникКодСДР + ТипЗависимости + Задержка + ", ";
		
	КонецЦикла;	
	
	Если ПредшественникиСтр <> "" Тогда 
		ПредшественникиСтр = Лев(ПредшественникиСтр, СтрДлина(ПредшественникиСтр)-2);
	КонецЕсли;
	
	Возврат ПредшественникиСтр;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПредставлениеИсполнителя(Исполнители)
	
	ИсполнителиСтр = "";
	Для Каждого Строка Из Исполнители Цикл
		ПредставлениеИсполнителя = Строка(Строка.Исполнитель);
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка.ДополнительныйОбъектАдресации) Тогда 
				ПредставлениеИсполнителя = ПредставлениеИсполнителя + "(" + Строка.ОсновнойОбъектАдресации + ", " + Строка.ДополнительныйОбъектАдресации + ")";
			ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) Тогда 
				ПредставлениеИсполнителя = ПредставлениеИсполнителя + "(" + Строка.ОсновнойОбъектАдресации + ")";
			КонецЕсли;	
		КонецЕсли;
		
		ИсполнителиСтр = ИсполнителиСтр + ", " + ПредставлениеИсполнителя;
	КонецЦикла;	
	
	Если ИсполнителиСтр <> "" Тогда 
		ИсполнителиСтр = Сред(ИсполнителиСтр, 2);
	КонецЕсли;	
	
	Возврат ИсполнителиСтр;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПодписьДлительности(Длительность, ЕдиницаДлительности)
	
	ПодписьДлительность = "";
	
	ЦелаяЧастьДлительность = Цел(Длительность);
	Если ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Минута") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Час") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.День") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Неделя") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьНедель(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Месяц") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьМесяцев(ЦелаяЧастьДлительность);	
			
	Иначе
		ПодписьДлительность = НРег(Строка(ЕдиницаДлительности));
	КонецЕсли;
	
	Возврат ПодписьДлительность;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПодписьТрудозатрат(Трудозатраты, ЕдиницаТрудозатрат)
	
	ПодписьТрудозатраты = "";
	
	ЦелаяЧастьТрудозатраты = Цел(Трудозатраты);
	Если ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоМинута") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") + ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоЧас") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") + ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоДень") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") + ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоНеделя") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") + ДелопроизводствоКлиентСервер.ПолучитьПодписьНедель(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоМесяц") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") + ДелопроизводствоКлиентСервер.ПолучитьПодписьМесяцев(ЦелаяЧастьТрудозатраты);	
			
	Иначе
		ПодписьТрудозатраты = НРег(Строка(ЕдиницаТрудозатрат));
	КонецЕсли;
	
	Возврат ПодписьТрудозатраты;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПроектнуюЗадачуИзСтрокиДерева(ИндексСтроки)
	
	ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ИндексСтроки);
	
	Если ЗначениеЗаполнено(ЭлементДерева.Ссылка) Тогда 
		ПроектнаяЗадачаОбъект = ЭлементДерева.Ссылка.ПолучитьОбъект();
		
		Если ЭлементДерева.ВерсияДанных <> ЭлементДерева.Ссылка.ВерсияДанных Тогда 
			РазблокироватьСтрокуДляРедактирования(ПроектнаяЗадачаОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ПроектнаяЗадачаОбъект.Ссылка);
			
			ТекстСообщения = НСтр("ru = 'Данные были изменены другим пользователем'");
			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;	
	Иначе
		ПроектнаяЗадачаОбъект = Справочники.ПроектныеЗадачи.СоздатьЭлемент();
		ПроектнаяЗадачаОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
		ДанныеКода = РаботаСПроектами.ПолучитьКодСДРИНомерЗадачиВУровне(ЭлементДерева.Владелец, ЭлементДерева.РодительскаяЗадача);
		
		ПроектнаяЗадачаОбъект.КодСДР = ДанныеКода.КодСДР;
		ПроектнаяЗадачаОбъект.НомерЗадачиВУровне = ДанныеКода.НомерЗадачиВУровне;
	КонецЕсли;	
	
	Если ЭлементДерева.ТекущийПланДлительность = 0 Тогда 
		ПроектнаяЗадачаОбъект.Веха = Истина;
	Иначе
		ПроектнаяЗадачаОбъект.Веха = Ложь;
	КонецЕсли;	
	
	ПроектнаяЗадачаОбъект.ДлительностьФакт = ЭлементДерева.ДлительностьФакт;
	ПроектнаяЗадачаОбъект.ЕдиницаДлительностиФакт = ЭлементДерева.ЕдиницаДлительностиФакт;
	ПроектнаяЗадачаОбъект.ЕдиницаТрудозатратФакт = ЭлементДерева.ЕдиницаТрудозатратФакт;
	
	ПроектнаяЗадачаОбъект.НачалоФакт = ЭлементДерева.НачалоФакт;
	ПроектнаяЗадачаОбъект.ОкончаниеФакт = ЭлементДерева.ОкончаниеФакт;
	
	ПроектнаяЗадачаОбъект.ТекущийПланДлительность = ЭлементДерева.ТекущийПланДлительность;
	ПроектнаяЗадачаОбъект.ТекущийПланЕдиницаДлительности = ЭлементДерева.ТекущийПланЕдиницаДлительности;
	ПроектнаяЗадачаОбъект.ТекущийПланЕдиницаТрудозатрат = ЭлементДерева.ТекущийПланЕдиницаТрудозатрат;
	
	ПроектнаяЗадачаОбъект.ТекущийПланНачало = ЭлементДерева.ТекущийПланНачало;
	ПроектнаяЗадачаОбъект.ТекущийПланОкончание = ЭлементДерева.ТекущийПланОкончание;
	ПроектнаяЗадачаОбъект.ТекущийПланТрудозатраты = ЭлементДерева.ТекущийПланТрудозатраты;
	
	ПроектнаяЗадачаОбъект.Наименование = ЭлементДерева.Наименование;
	ПроектнаяЗадачаОбъект.Владелец = ЭлементДерева.Владелец;
	ПроектнаяЗадачаОбъект.Родитель = ЭлементДерева.РодительскаяЗадача;
	
	ПроектнаяЗадачаОбъект.Предшественники.Загрузить(ЭлементДерева.Предшественники.Выгрузить());
	ПроектнаяЗадачаОбъект.Исполнители.Загрузить(ЭлементДерева.Исполнители.Выгрузить());
	
	ПроектнаяЗадачаОбъект.ТипОграничения = ЭлементДерева.ТипОграничения;
	
	ПроектнаяЗадачаОбъект.Записать();
	ЭлементДерева.Ссылка = ПроектнаяЗадачаОбъект.Ссылка;
	ЭлементДерева.ВерсияДанных = ПроектнаяЗадачаОбъект.ВерсияДанных;
	
	РазблокироватьСтрокуДляРедактирования(ПроектнаяЗадачаОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	
	// рассчитать план
	МассивИзмененныхЗадач = Новый Массив;
	РаботаСПроектами.РассчитатьПланПроекта(ПроектнаяЗадачаОбъект.Ссылка, МассивИзмененныхЗадач);
	ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеДоступностиКомандПеремещения(ДеревоЗадач, ЭлементыФормы)
	
	ДеревоЗадачВверх = Истина;
	ДеревоЗадачВниз = Истина;
	ДеревоЗадачНаУровеньВыше = Истина;
	ДеревоЗадачНаУровеньНиже = Истина;
	
	ВыделенныеСтроки = ЭлементыФормы.ДеревоЗадач.ВыделенныеСтроки;
	ВыделенныеСтрокиКоличество = ВыделенныеСтроки.Количество();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТекущая = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаРодитель = СтрокаТекущая.ПолучитьРодителя();
		
		ДеревоЗадачНаУровеньВыше = ДеревоЗадачНаУровеньВыше 
			И (СтрокаРодитель <> Неопределено)
			И ВыделенныеСтрокиКоличество = 1;
			
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаРодитель = ДеревоЗадач;
		КонецЕсли;
		
		ДеревоЗадачНаУровеньНиже = ДеревоЗадачНаУровеньНиже 
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) > 0
			И ВыделенныеСтрокиКоличество = 1;
		
		ДеревоЗадачВверх = ДеревоЗадачВверх
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) > 0;
			
		ДеревоЗадачВниз = ДеревоЗадачВниз
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) < 
			СтрокаРодитель.ПолучитьЭлементы().Количество() - 1;
			
	КонецЦикла;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("ДеревоЗадачВверх", 		ДеревоЗадачВверх);
	ДанныеВозврата.Вставить("ДеревоЗадачВниз", 			ДеревоЗадачВниз);
	ДанныеВозврата.Вставить("ДеревоЗадачНаУровеньВыше", ДеревоЗадачНаУровеньВыше);
	ДанныеВозврата.Вставить("ДеревоЗадачНаУровеньНиже", ДеревоЗадачНаУровеньНиже);
		
	Возврат ДанныеВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы)
	
	ДанныеДоступности = ПолучитьДанныеДоступностиКомандПеремещения(ДеревоЗадач, Элементы);
	
	Элементы.ДеревоЗадачВверх.Доступность = ДанныеДоступности.ДеревоЗадачВверх;
	Элементы.ДеревоЗадачВниз.Доступность = ДанныеДоступности.ДеревоЗадачВниз;
	
	Элементы.ФормаНаУровеньВыше.Доступность = ДанныеДоступности.ДеревоЗадачНаУровеньВыше;
	Элементы.ФормаНаУровеньНиже.Доступность = ДанныеДоступности.ДеревоЗадачНаУровеньНиже;
	
КонецПроцедуры

&НаСервере
Функция ПометитьНаУдалениеПроектныеЗадачи(ВыделенныеСтроки, ПометкаУдаления)
	
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		СтрокаТаблицыПроектнаяЗадача = ДеревоЗадач.НайтиПоИдентификатору(СтрокаТаблицы);
		Если СтрокаТаблицыПроектнаяЗадача = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ПроектнаяЗадачаСсылка = СтрокаТаблицыПроектнаяЗадача.Ссылка;
		Если ПроектнаяЗадачаСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		ПроектнаяЗадачаОбъект = ПроектнаяЗадачаСсылка.ПолучитьОбъект();
		ПроектнаяЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
	ЗаполнитьДеревоЗадач();
	
КонецФункции

&НаСервере
Функция СвязатьЗадачиСервер()
	
	ПерваяСтрока = Элементы.ДеревоЗадач.ВыделенныеСтроки[0];
	ВтораяСтрока = Элементы.ДеревоЗадач.ВыделенныеСтроки[1];
	
	ПерваяЗадача = ДеревоЗадач.НайтиПоИдентификатору(ПерваяСтрока).Ссылка;
	ВтораяЗадача = ДеревоЗадач.НайтиПоИдентификатору(ВтораяСтрока).Ссылка;
	
	Предшественник = Неопределено;
	Последователь = Неопределено;
	
	// Вычисление того, какая задача будет предшественником, а какая - последователем
	Если ПерваяЗадача.Родитель = ВтораяЗадача.Родитель Тогда
		Если ПерваяЗадача.НомерЗадачиВУровне < ВтораяЗадача.НомерЗадачиВУровне Тогда
			Предшественник = ПерваяЗадача;
			Последователь = ВтораяЗадача;
		Иначе
			Предшественник = ВтораяЗадача;
			Последователь = ПерваяЗадача;
		КонецЕсли;
	Иначе
		ДлинаСДРПервойЗадачи = 
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПерваяЗадача.КодСДР, ".").Количество();
		ДлинаСДРВторойЗадачи = 
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВтораяЗадача.КодСДР, ".").Количество();	
			
		Если ДлинаСДРпервойЗадачи < ДлинаСДРВторойЗадачи Тогда
			Предшественник = ПерваяЗадача;
			Последователь = ВтораяЗадача;
		ИначеЕсли ДлинаСДРпервойЗадачи > ДлинаСДРВторойЗадачи Тогда
			Предшественник = ВтораяЗадача;
			Последователь = ПерваяЗадача;
		Иначе
			Если СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПерваяЗадача.КодСДР, ".")[0] <
				СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВтораяЗадача.КодСДР, ".")[0] Тогда
				Предшественник = ПерваяЗадача;
				Последователь = ВтораяЗадача;
			Иначе
				Предшественник = ВтораяЗадача;
				Последователь = ПерваяЗадача;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// После того, как определено, кто предшественник, выполняется установка связи
	Если Предшественник <> Неопределено И Последователь <> Неопределено Тогда
		ОбъектПоследователь = Последователь.ПолучитьОбъект();
		Для Каждого СтрокаСвязи Из ОбъектПоследователь.Предшественники Цикл
			Если СтрокаСвязи.Предшественник = Предшественник Тогда
				// Если такая связь уже есть, процесс прерывается
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		НоваяСтрокаСвязи = ОбъектПоследователь.Предшественники.Добавить();
		НоваяСтрокаСвязи.Предшественник = Предшественник;
		НоваяСтрокаСвязи.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
		ОбъектПоследователь.Записать();
		
		МассивИзмененныхЗадач = Новый Массив;
		РаботаСПроектами.РассчитатьПланПроекта(Последователь, МассивИзмененныхЗадач);
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НаУровеньНижеСервер(Ссылка, Родитель)
	
	// Вычисляем наличие соседней задачи, в которую помещается текущая задача
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Родитель = &Родитель
		|	И ПроектныеЗадачи.Владелец = &Проект
		|	И ПроектныеЗадачи.НомерЗадачиВУровне = (&НомерВУровне - 1)";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("НомерВУровне", Ссылка.НомерЗадачиВУровне);
	Запрос.УстановитьПараметр("Проект", Ссылка.Владелец);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектЗадача = Ссылка.ПолучитьОбъект();
		ОбъектЗадача.Родитель = Выборка.Ссылка;
		ОбъектЗадача.НомерЗадачиВУровне = РаботаСПроектами.ПолучитьМаксимальныйНомерЗадачиУровня(
			Ссылка.Владелец,
			ОбъектЗадача.Родитель) + 1;
		ОбъектЗадача.Записать();
		
		РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Ссылка.Владелец);
		ЗаполнитьДеревоЗадач();
		СписокРаскрытыхЗадач.Добавить(ТекущаяПроектнаяЗадача.Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаУровеньВышеСервер(Ссылка, Родитель)
	
	// Выбор всех задачи одного с родителем уровня и сдвигаем номера на один вниз
	МассивЗадачУровняРодителя = 
		РаботаСПроектами.ПолучитьМассивЗадачОдногоУровняСУказанной(Ссылка.Владелец, Родитель);
		
	// Подготовка номера для вставки подчиненной задачи на один уровень вверх
	КоличествоЭлементов = МассивЗадачУровняРодителя.Количество(); 
	Для Счетчик = 0 по КоличествоЭлементов - 1 Цикл
		Индекс = КоличествоЭлементов - Счетчик - 1;
		Задача = МассивЗадачУровняРодителя[Индекс];
		Если Задача.НомерЗадачиВУровне > Родитель.НомерЗадачиВУровне Тогда
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.НомерЗадачиВУровне = ЗадачаОбъект.НомерЗадачиВУровне + 1;
		Конецесли;
	КонецЦикла;
		
	ЗадачаОбъект = Ссылка.ПолучитьОбъект();
	ЗадачаОбъект.Родитель = Родитель.Родитель;
	ЗадачаОбъект.НомерЗадачиВУровне = Родитель.НомерЗадачиВУровне + 1;
	ЗадачаОбъект.Записать();
		
	РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Ссылка.Владелец);
	ЗаполнитьДеревоЗадач();
	СписокРаскрытыхЗадач.Добавить(ТекущаяПроектнаяЗадача.Родитель);
	
КонецПроцедуры

&НаСервере
Процедура ВверхСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;
		Индекс = Неопределено;
		Для Каждого Элемент Из МассивСсылок Цикл
			Если Элемент.НомерЗадачиВУровне > Ссылка.НомерЗадачиВУровне Тогда
				Индекс = МассивСсылок.Найти(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Индекс = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		Иначе
			МассивСсылок.Вставить(Индекс, Ссылка); 
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		// Получение задачи с номером в уровне, меньшим на 1, чем текущий
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Владелец
			|	И ПроектныеЗадачи.Родитель = &Родитель
			|	И ПроектныеЗадачи.НомерЗадачиВУровне = &НомерЗадачиВУровне";
		Запрос.УстановитьПараметр("Владелец", Ссылка.Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка.Родитель);
		Запрос.УстановитьПараметр("НомерЗадачиВУровне", Ссылка.НомерЗадачиВУровне - 1);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// сдвиг строк в дереве
			Идентификатор = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(),
				Ссылка,
				Идентификатор);
				
			СтрокаТекущейЗадачи = ДеревоЗадач.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодительскойЗадачи = СтрокаТекущейЗадачи.ПолучитьРодителя();
			Если СтрокаРодительскойЗадачи = Неопределено Тогда
				СтрокаРодительскойЗадачи = ДеревоЗадач;	
			КонецЕсли;
			
			ИндексТекущейЗадачи = СтрокаРодительскойЗадачи.ПолучитьЭлементы().Индекс(СтрокаТекущейЗадачи);
			СтрокаРодительскойЗадачи.ПолучитьЭлементы().Сдвинуть(ИндексТекущейЗадачи, -1);
			
			// изменение реквизитов объектов
			ТекущаяЗадачаОбъект = Ссылка.ПолучитьОбъект();
			ПредыдущаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Буфер = ТекущаяЗадачаОбъект.НомерЗадачиВУровне;
			ТекущаяЗадачаОбъект.НомерЗадачиВУровне = ПредыдущаяЗадачаОбъект.НомерЗадачиВУровне;
			ПредыдущаяЗадачаОбъект.НомерЗадачиВУровне = Буфер;

			БуферСДР = ТекущаяЗадачаОбъект.КодСДР;
			ТекущаяЗадачаОбъект.КодСДР = ПредыдущаяЗадачаОбъект.КодСДР;
			ПредыдущаяЗадачаОбъект.КодСДР = БуферСДР;
			
			ТекущаяЗадачаОбъект.Записать();
			ПредыдущаяЗадачаОбъект.Записать();
			
			ИзмененныеЗадачи = Новый Массив;
			ИзмененныеЗадачи.Добавить(ТекущаяЗадачаОбъект.Ссылка);
			ИзмененныеЗадачи.Добавить(ПредыдущаяЗадачаОбъект.Ссылка);
			
			// заполнение кодов СДР
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ТекущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ПредыдущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			
			// обновление последователей
			ЗаполнитьДанныеОПоследователяхСпискаЗадач(ИзмененныеЗадачи, ИзмененныеЗадачи);
			ОбновитьИзмененныеСтрокиЗадач(ИзмененныеЗадачи);
			
			СписокРаскрытыхЗадач.Добавить(ТекущаяПроектнаяЗадача.Родитель);
 		КонецЕсли;
	КонецЦикла;
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	ЗаполнитьДиаграммуГанта();
	 
КонецПроцедуры

&НаСервере
Процедура ВнизСервер()
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;
		Индекс = Неопределено;
		Для Каждого Элемент Из МассивСсылок Цикл
			Если Элемент.НомерЗадачиВУровне < Ссылка.НомерЗадачиВУровне Тогда
				Индекс = МассивСсылок.Найти(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Индекс = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		Иначе
			МассивСсылок.Вставить(Индекс, Ссылка); 
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		// Получение задачи с номером в уровне, меньшим на 1, чем текущий
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Владелец
			|	И ПроектныеЗадачи.Родитель = &Родитель
			|	И ПроектныеЗадачи.НомерЗадачиВУровне = &НомерЗадачиВУровне";
			
		Запрос.УстановитьПараметр("Владелец", Ссылка.Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка.Родитель);
		Запрос.УстановитьПараметр("НомерЗадачиВУровне", Ссылка.НомерЗадачиВУровне + 1);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// сдвиг строк в дереве	
			Идентификатор = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(),
				Ссылка,
				Идентификатор);
			СтрокаТекущейЗадачи = ДеревоЗадач.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодительскойЗадачи = СтрокаТекущейЗадачи.ПолучитьРодителя();
			Если СтрокаРодительскойЗадачи = Неопределено Тогда
				СтрокаРодительскойЗадачи = ДеревоЗадач;	
			КонецЕсли;
			ИндексТекущейзадачи = СтрокаРодительскойЗадачи.ПолучитьЭлементы().Индекс(СтрокаТекущейЗадачи);
			СтрокаРодительскойЗадачи.ПолучитьЭлементы().Сдвинуть(ИндексТекущейЗадачи, 1);
			
			// изменение реквизитов объектов
			ТекущаяЗадачаОбъект = Ссылка.ПолучитьОбъект();
			СледующаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Буфер = ТекущаяЗадачаОбъект.НомерЗадачиВУровне;
			ТекущаяЗадачаОбъект.НомерЗадачиВУровне = СледующаяЗадачаОбъект.НомерЗадачиВУровне;
			СледующаяЗадачаОбъект.НомерЗадачиВУровне = Буфер;

			БуферСДР = ТекущаяЗадачаОбъект.КодСДР;
			ТекущаяЗадачаОбъект.КодСДР = СледующаяЗадачаОбъект.КодСДР;
			СледующаяЗадачаОбъект.КодСДР = БуферСДР;

			ТекущаяЗадачаОбъект.Записать();
			СледующаяЗадачаОбъект.Записать();
			
			ИзмененныеЗадачи = Новый Массив;
			ИзмененныеЗадачи.Добавить(ТекущаяЗадачаОбъект.Ссылка);
			ИзмененныеЗадачи.Добавить(СледующаяЗадачаОбъект.Ссылка);
			
			// заполнение кодов СДР
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ТекущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(СледующаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			
			// обновление последователей
			ЗаполнитьДанныеОПоследователяхСпискаЗадач(ИзмененныеЗадачи, ИзмененныеЗадачи);
			ОбновитьИзмененныеСтрокиЗадач(ИзмененныеЗадачи);
			
			СписокРаскрытыхЗадач.Добавить(ТекущаяПроектнаяЗадача.Родитель);		
		КонецЕсли;
	КонецЦикла;
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	ЗаполнитьДиаграммуГанта();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКодыСДРУДочернихВетвей(ПроектнаяЗадача, МассивПодчиненныхЗадач)
	
	Для Каждого Элемент Из МассивПодчиненныхЗадач Цикл
		ИдентификаторЗадачи = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
			ДеревоЗадач.ПолучитьЭлементы(),
			Элемент,
			ИдентификаторЗадачи);
			
		Если ИдентификаторЗадачи > -1 Тогда
			СтрокаДерева = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторЗадачи);
			РодительскийКодСДР = ПроектнаяЗадача.КодСДР;
			ДлинаРодительскогоКода = СтрДлина(РодительскийКодСДР);
			ДлинаТекущегоНомера = СтрДлина(СтрокаДерева.КодСДР);
			НовыйКодСДР = 
				РодительскийКодСДР + 
				Прав(СтрокаДерева.КодСДР, ДлинаТекущегоНомера - ДлинаРодительскогоКода);
			СтрокаДерева.КодСДР = НовыйКодСДР;
			СтрокаДерева.НаименованиеЗадачи = СтрокаДерева.КодСДР + "  " + СтрокаДерева.Наименование; 
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОПоследователяхСпискаЗадач(МассивПоследователей, МассивЗадач)
	
	Для Каждого Элемент Из МассивЗадач Цикл
		МассивПоследователейЗадачи = РаботаСПроектами.ПолучитьВсехПоследователей(Элемент).ВыгрузитьКолонку("Ссылка");
		Для Каждого ЭлементПоследователь Из МассивПоследователейЗадачи Цикл 
			Если МассивПоследователей.Найти(ЭлементПоследователь) = Неопределено Тогда
				МассивПоследователей.Добавить(ЭлементПоследователь);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолейДереваЗадач(Режим)
	
	Если Режим = "ВСписке" Тогда 
		Элементы.Состояние.ТолькоПросмотр = Истина;
		Элементы.ТрудозатратыФактСтр.ТолькоПросмотр = Истина;
		Элементы.ДеревоЗадачИзменить.Видимость = Ложь;
		Элементы.ДеревоЗадачОткрытьКарточку.Видимость = Истина;
	Иначе
		Элементы.Состояние.ТолькоПросмотр = Ложь;
		Элементы.ТрудозатратыФактСтр.ТолькоПросмотр = Ложь;
		Элементы.ДеревоЗадачИзменить.Видимость = Истина;
		Элементы.ДеревоЗадачОткрытьКарточку.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьЧисловуюЧасть(Знач Строка) 
	
	Строка = СокрЛП(Строка);
	Если ПустаяСтрока(Строка) Тогда 
		Возврат "0";
	КонецЕсли;	
	
	ЧисловаяЧасть = "";
	
	ДопустимыеСимволы = "0123456789., ";
	Для Инд = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка,Инд,1);
		Если Найти(ДопустимыеСимволы, Символ) > 0 Тогда 
			ЧисловаяЧасть = ЧисловаяЧасть + Символ;
		Иначе	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	ЧисловаяЧасть = СтрЗаменить(ЧисловаяЧасть, " ", "");
	
	Возврат ЧисловаяЧасть;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА ЗАДАЧ

&НаСервереБезКонтекста
Процедура ЗаблокироватьСтрокуДляРедактирования(Ссылка, УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		ЗаблокироватьДанныеДляРедактирования(Ссылка,,УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура РазблокироватьСтрокуДляРедактирования(Ссылка, УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Если РежимРедактирования = "ВДиалоге" Или Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
	
		Отказ = Истина;
	
		ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе	
		
		Отказ = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ЗаблокироватьСтрокуДляРедактирования(ТекущиеДанные.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
		
		ТекущиеДанные.НаименованиеЗадачи = ТекущиеДанные.Наименование;
		
		Если ТекущиеДанные.Исполнители.Количество() > 1 Тогда 
			Элементы.ИсполнителиСтр.РедактированиеТекста = Ложь; 
			Элементы.ТекущийПланТрудозатратыСтр.РедактированиеТекста = Ложь;
		Иначе	
			Элементы.ИсполнителиСтр.РедактированиеТекста = Истина; 
			Элементы.ТекущийПланТрудозатратыСтр.РедактированиеТекста = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.Предшественники.Количество() > 1 Тогда 
			Элементы.ПредшественникиСтр.РедактированиеТекста = Ложь; 
		Иначе	
			Элементы.ПредшественникиСтр.РедактированиеТекста = Истина; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Владелец) Тогда // изменяется новая строка
		ИндексСтроки = Элементы.ДеревоЗадач.ТекущаяСтрока;
		
		ТекущиеДанные.Владелец = Проект;
		
		Если РеквизитыПроекта.СпособПланирования = ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыНачалаПроекта") Тогда 
			ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше");
		Иначе	
			ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноПозже");
		КонецЕсли;
		
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если РодительЭлемента = Неопределено Тогда 
			Если ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
				ТекущиеДанные.ТекущийПланНачало = РеквизитыПроекта.ТекущийПланНачало;
			Иначе
				ТекущиеДанные.ТекущийПланОкончание = РеквизитыПроекта.ТекущийПланОкончание;
			КонецЕсли;	
		Иначе
			Если ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
				ТекущиеДанные.ТекущийПланНачало = РодительЭлемента.ТекущийПланНачало;
			Иначе	
				ТекущиеДанные.ТекущийПланОкончание = РодительЭлемента.ТекущийПланОкончание;
			КонецЕсли;
			ТекущиеДанные.РодительскаяЗадача = РодительЭлемента.Ссылка;
		КонецЕсли;	
		
		ТекущиеДанные.ТекущийПланДлительность = 1;
		
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		Если ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
			ТекущиеДанные.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.ТекущийПланНачало, 
				ТекущиеДанные.ТекущийПланДлительность, 
				ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		Иначе
			ТекущиеДанные.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.ТекущийПланОкончание, 
				ТекущиеДанные.ТекущийПланДлительность, 
				ТекущиеДанные.ТекущийПланЕдиницаДлительности);		
		КонецЕсли;			
				
		ПодписьТекПланДлительность = ПолучитьПодписьДлительности(ТекущиеДанные.ТекущийПланДлительность, ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		ТекущиеДанные.ТекущийПланДлительностьСтр = Строка(ТекущиеДанные.ТекущийПланДлительность) + " " + ПодписьТекПланДлительность;
		
		ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
		ТекущиеДанные.ЕдиницаТрудозатратФакт = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
			
		ТекущиеДанные.ТекущийПланЕдиницаДлительности = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
		ТекущиеДанные.ЕдиницаДлительностиФакт = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
		
	Иначе	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ОтменаРедактирования Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
			
			Отказ = Истина;
			
			РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
			Если РодительЭлемента = Неопределено Тогда 
				ИндексЭлемента = ДеревоЗадач.ПолучитьЭлементы().Индекс(ЭлементДерева);
				ДеревоЗадач.ПолучитьЭлементы().Удалить(ИндексЭлемента);
			Иначе
				ИндексЭлемента = РодительЭлемента.ПолучитьЭлементы().Индекс(ЭлементДерева);
				РодительЭлемента.ПолучитьЭлементы().Удалить(ИндексЭлемента);
			КонецЕсли;	
			Возврат;
			
		Иначе	
			
		КонецЕсли;	
		
	Иначе	
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Наименование) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Наименование""'");
			ПоказатьПредупреждение(Неопределено,ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Начало (план)""'");
			ПоказатьПредупреждение(Неопределено,ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Окончание (план)""'");
			ПоказатьПредупреждение(Неопределено,ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ОтменаРедактирования Тогда 
		РазблокироватьСтрокуДляРедактирования(ТекущиеДанные.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
		
		МассивИзмененныхЗадач = Новый Массив;
		МассивИзмененныхЗадач.Добавить(ТекущиеДанные.Ссылка);
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
		НовыйЭлемент = Истина;
	Иначе
		НовыйЭлемент = Ложь;
	КонецЕсли;	
	
	ЗаписатьПроектнуюЗадачуИзСтрокиДерева(Элементы.ДеревоЗадач.ТекущаяСтрока);
	
	Если НовыйЭлемент Тогда 
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.Ссылка),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
		СообщениеТекст = НСтр("ru = 'У вас нет прав на изменение проектных задач. Перетаскивание задач запрещено.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;	
	
	Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Перетаскивание задач запрещено.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение[0];
	СсылкаИсточник = ДеревоЗадач.НайтиПоИдентификатору(СтрокаИсточник).Ссылка;
	Если Строка <> Неопределено Тогда
		СтрокаПриемник = Строка;
		СтрокаДерева = ДеревоЗадач.НайтиПоИдентификатору(СтрокаПриемник);
		СсылкаПриемник = СтрокаДерева.Ссылка;
	Иначе
		СсылкаПриемник = Неопределено;
	КонецЕсли;		
	
	Если СсылкаИсточник = СсылкаПриемник Тогда 
		Возврат;
	КонецЕсли;	
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	
	ДеревоЗадачПеретаскиваниеСервер(СсылкаИсточник, СсылкаПриемник);
	
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, СсылкаИсточник);	
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗадачПеретаскиваниеСервер(СсылкаИсточник, СсылкаПриемник)
	
	ОбъектИсточник = СсылкаИсточник.ПолучитьОбъект();
	
	РодительИсточника = ОбъектИсточник.Родитель;
	Если СсылкаПриемник <> Неопределено Тогда
		ОбъектИсточник.Родитель = СсылкаПриемник;
	Иначе
		ОбъектИсточник.Родитель = Справочники.ПроектныеЗадачи.ПустаяСсылка();
	КонецЕсли;
	ОбъектИсточник.НомерЗадачиВУровне = 
		РаботаСПроектами.ПолучитьМаксимальныйНомерЗадачиУровня(
			СсылкаИсточник.Владелец,
			ОбъектИсточник.Родитель) + 1;
	ОбъектИсточник.Записать();
	
	РаботаСПроектами.РассчитатьПланПроекта(РодительИсточника);
	РаботаСПроектами.РассчитатьПланПроекта(СсылкаИсточник);
	
	РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(СсылкаИсточник.Владелец);
	ЗаполнитьДеревоЗадач();
	СписокРаскрытыхЗадач.Добавить(СсылкаПриемник);
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
		СообщениеТекст = НСтр("ru = 'У вас нет прав на добавление проектных задач.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Добавление задач запрещено.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РежимРедактирования = "ВСписке" Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		Иначе
			ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
			РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
		
			Если РодительЭлемента = Неопределено Тогда 
				НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
			Иначе
				НовыйЭлемент = РодительЭлемента.ПолучитьЭлементы().Добавить();
			КонецЕсли;	
		КонецЕсли;	
		
		Элементы.ДеревоЗадач.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
		Элементы.ДеревоЗадач.ИзменитьСтроку();
		
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Проект", Проект);
	
		ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущийДанные <> Неопределено Тогда 
			ПараметрыФормы.Вставить("Родитель", ТекущийДанные.РодительскаяЗадача);
		КонецЕсли;	
	
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаЗадачиПроекта Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ТекущаяПроектнаяЗадача = ПредопределенноеЗначение("Справочник.ПроектныеЗадачи.ПустаяСсылка");
		Элементы.ДеревоЗадачВверх.Доступность = Ложь;
		Элементы.ДеревоЗадачВниз.Доступность= Ложь;
		Элементы.ФормаНаУровеньВыше.Доступность = Ложь;
		Элементы.ФормаНаУровеньНиже.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если КоличествоВыделенныхЗадач <> Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() 
		ИЛИ ТекущаяПроектнаяЗадача <> Элемент.ТекущиеДанные.Ссылка Тогда
		КоличествоВыделенныхЗадач = Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество();
		ТекущаяПроектнаяЗадача = Элемент.ТекущиеДанные.Ссылка;
		Если Не РеквизитыПроекта.РедактируетсяВСтороннейСистеме И РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда
			УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
		КонецЕсли;
	КонецЕсли;
	
	Если РежимРедактирования = "ВСписке" Тогда 
		ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		
		Элементы.ТекущийПланНачалоЗадачи.ТолькоПросмотр = ТекущиеДанные.СуммарнаяЗадача;
		Элементы.ТекущийПланОкончаниеЗадачи.ТолькоПросмотр = ТекущиеДанные.СуммарнаяЗадача;
		Элементы.ТекущийПланДлительностьЗадачиСтр.ТолькоПросмотр = ТекущиеДанные.СуммарнаяЗадача;
			
		Элементы.НачалоФакт.ТолькоПросмотр = ТекущиеДанные.СуммарнаяЗадача;
		Элементы.ОкончаниеФакт.ТолькоПросмотр = ТекущиеДанные.СуммарнаяЗадача;
		Элементы.ДлительностьФактСтр.ТолькоПросмотр = ТекущиеДанные.СуммарнаяЗадача;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
		СообщениеТекст = НСтр("ru = 'У вас нет прав на удаление проектных задач.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Удаление задач запрещено.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;

	ВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено Или ВыделенныеСтроки.Количество() <= 0 Тогда
		Возврат;
	КонецЕсли;	
		
	Если ВыделенныеСтроки.Количество() = 1 Тогда 
		Если НЕ Элементы.ДеревоЗадач.ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				Строка(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка));
			
			Ответ = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоЗадачПередУдалениемЗавершение3", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ТекстВопроса", ВыделенныеСтроки, ТекстВопроса)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
            Возврат;
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку удаления?'"),
				Строка(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка));
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоЗадачПередУдалениемЗавершение2", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
	ИначеЕсли ВыделенныеСтроки.Количество() > 1 Тогда
		ПометкаУдаления = Истина;
		Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
			СтрокаТаблицыПроектнаяЗадача = ДеревоЗадач.НайтиПоИдентификатору(СтрокаТаблицы);
			Если СтрокаТаблицыПроектнаяЗадача.ПометкаУдаления = Истина Тогда
				ПометкаУдаления = Ложь;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Если ПометкаУдаления Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоЗадачПередУдалениемЗавершение1", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ПометкаУдаления, Режим", ВыделенныеСтроки, ПометкаУдаления, Режим)), НСтр("ru = 'Пометить выделенные элементы на удаление?'"), Режим);
            Возврат;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоЗадачПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ПометкаУдаления", ВыделенныеСтроки, ПометкаУдаления)), НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'"), Режим);
            Возврат;
		КонецЕсли;
	КонецЕсли;		
			
	ДеревоЗадачПередУдалениемФрагмент3(ВыделенныеСтроки, ПометкаУдаления);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемЗавершение3(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ТекстВопроса = ДополнительныеПараметры.ТекстВопроса;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПометкаУдаления = Истина;
	
	ДеревоЗадачПередУдалениемФрагмент3(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемФрагмент3(Знач ВыделенныеСтроки, ПометкаУдаления)
	
	ДеревоЗадачПередУдалениемФрагмент2(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПометкаУдаления = Ложь;
	
	ДеревоЗадачПередУдалениемФрагмент2(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемФрагмент2(Знач ВыделенныеСтроки, ПометкаУдаления)
	
	ДеревоЗадачПередУдалениемФрагмент1(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
	Режим = ДополнительныеПараметры.Режим;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоЗадачПередУдалениемФрагмент1(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемФрагмент1(Знач ВыделенныеСтроки, ПометкаУдаления)
	
	ДеревоЗадачПередУдалениемФрагмент(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоЗадачПередУдалениемФрагмент(ВыделенныеСтроки, ПометкаУдаления);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемФрагмент(Знач ВыделенныеСтроки, ПометкаУдаления)
	
	Перем ВременнаяТекущаяПроектнаяЗадача;
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ВременнаяТекущаяПроектнаяЗадача = ТекущаяПроектнаяЗадача;
	ПометитьНаУдалениеПроектныеЗадачи(ВыделенныеСтроки, ПометкаУдаления);
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ВременнаяТекущаяПроектнаяЗадача);

КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиСтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Проект));
	
	Предшественники = ТекущиеДанные.Предшественники;
	Если Предшественники.Количество() = 1 Тогда 
		ПараметрыФормы.Вставить("ТекущаяСтрока", Предшественники[0].Предшественник);
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиСтрАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Проект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиСтрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Проект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиСтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Предшественники = ТекущиеДанные.Предшественники;
	Предшественники.Очистить();
	
	НоваяСтрока = Предшественники.Добавить();
	НоваяСтрока.Предшественник = ВыбранноеЗначение;
	НоваяСтрока.ТипЗависимости = ПредопределенноеЗначение("Перечисление.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало");
	
	ТекущиеДанные.ПредшественникиСтр = ПредставлениеПредшественников(Предшественники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПредшественникиСтр) Тогда 
		Предшественники = ТекущиеДанные.Предшественники;
		Предшественники.Очистить();
		ТекущиеДанные.ПредшественникиСтр = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Проект, "");
	Иначе
		ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Исполнители = ТекущиеДанные.Исполнители;
		Если Исполнители.Количество() = 1 Тогда 
			Исполнитель = Исполнители[0].Исполнитель;
			ОсновнойОбъектАдресации = Исполнители[0].ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = Исполнители[0].ДополнительныйОбъектАдресации;
		Иначе	
			Исполнитель = Неопределено;
			ОсновнойОбъектАдресации = Неопределено;
			ДополнительныйОбъектАдресации = Неопределено;
		КонецЕсли;	
		
		РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Исполнитель,,,,
			ОсновнойОбъектАдресации, 
			ДополнительныйОбъектАдресации,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Проект, Текст);
		Иначе
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
			
			ДанныеВыбораУчастника = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Проект, Текст);
			Если ДанныеВыбораУчастника.Количество() = 1 Тогда 
				ВыбранноеЗначение = ДанныеВыбораУчастника[0].Значение;
				
				ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
				Исполнители = ТекущийДанные.Исполнители; 
				
				Исполнители.Очистить();
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение, "Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				
				Модифицированность = Истина;
			Иначе	
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = ДанныеВыбораУчастника;
			КонецЕсли;
			
		Иначе
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Исполнители = ТекущиеДанные.Исполнители;
	Исполнители.Очистить();
	НоваяСтрока = Исполнители.Добавить();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("РольИсполнителя") Тогда 
			НоваяСтрока.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
			НоваяСтрока.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			НоваяСтрока.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение, "Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		КонецЕсли;
	Иначе
		НоваяСтрока.Исполнитель = ВыбранноеЗначение;
	КонецЕсли;	
	
	ТекущиеДанные.ИсполнителиСтр = ПредставлениеИсполнителя(Исполнители);
	
	Если ТекущиеДанные.Исполнители.Количество() = 1 И Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланТрудозатраты) Тогда 
		ТекущиеДанные.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланДлительность;
		
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(ТекущиеДанные.ТекущийПланТрудозатраты, ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат);
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = Строка(ТекущиеДанные.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
		
		СтрокаИсполнители = Исполнители[0];
		СтрокаИсполнители.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	КонецЕсли;	
		
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрПриИзменении(Элемент)
	
	Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИсполнителиСтр) Тогда 
		Исполнители.Очистить();
		Возврат;
	КонецЕсли;
	
	СтрокаИсполнители = Исполнители[0];
	Если ТипЗнч(СтрокаИсполнители.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(СтрокаИсполнители.Исполнитель) Тогда 
		
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаИсполнители.Исполнитель, "ИспользуетсяСОбъектамиАдресации") Тогда 
			Результат = Неопределено;
 
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", 
				Новый Структура("РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
					СтрокаИсполнители.Исполнитель, 
					СтрокаИсполнители.ОсновнойОбъектАдресации, 
					СтрокаИсполнители.ДополнительныйОбъектАдресации), 
				ЭтотОбъект,,,, Новый ОписаниеОповещения("ИсполнителиСтрПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("СтрокаИсполнители", СтрокаИсполнители)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрПриИзмененииЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	СтрокаИсполнители = ДополнительныеПараметры.СтрокаИсполнители;
	
	
	Результат = Результат1;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СтрокаИсполнители.Исполнитель = Результат.РольИсполнителя;
		СтрокаИсполнители.ОсновнойОбъектАдресации = Результат.ОсновнойОбъектАдресации;
		СтрокаИсполнители.ДополнительныйОбъектАдресации = Результат.ДополнительныйОбъектАдресации;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	
	УстановитьВидимость(РежимПросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	
	УстановитьДоступностьПолейДереваЗадач(РежимРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Наименование = ТекущиеДанные.НаименованиеЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) 
		И ТекущиеДанные.ТекущийПланНачало = НачалоДня(ТекущиеДанные.ТекущийПланНачало)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(ТекущиеДанные.ГрафикРаботы), 
			ТекущиеДанные.ГрафикРаботы, 
			РеквизитыПроекта.ГрафикРаботы);
			
		ТекущиеДанные.ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			ТекущиеДанные.ТекущийПланНачало);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 	
		ТекущиеДанные.ТекущийПланДлительность = 0;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланДлительность) Тогда 
		ТекущиеДанные.ТекущийПланОкончание = ТекущиеДанные.ТекущийПланНачало;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланДлительность) Тогда 	
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		ТекущиеДанные.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
			ТекущиеДанные.ТекущийПланНачало, 
			ТекущиеДанные.ТекущийПланДлительность, 
			ТекущиеДанные.ТекущийПланЕдиницаДлительности);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) 
		И ТекущиеДанные.ТекущийПланОкончание = НачалоДня(ТекущиеДанные.ТекущийПланОкончание)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(ТекущиеДанные.ГрафикРаботы),
			ТекущиеДанные.ГрафикРаботы,
			РеквизитыПроекта.ГрафикРаботы);
			
		ТекущиеДанные.ТекущийПланОкончание = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			ТекущиеДанные.ТекущийПланОкончание);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) Тогда 	
		ТекущиеДанные.ТекущийПланДлительность = 0;	
	
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланДлительность) Тогда 
		ТекущиеДанные.ТекущийПланНачало = ТекущиеДанные.ТекущийПланОкончание;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 	
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		ТекущиеДанные.ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(ПроектнаяЗадачаСтруктура, 
			ТекущиеДанные.ТекущийПланНачало, 
			ТекущиеДанные.ТекущийПланОкончание, 
			ТекущиеДанные.ТекущийПланЕдиницаДлительности);
			
		ТекущиеДанные.ТекущийПланДлительностьСтр = ТекущиеДанные.ТекущийПланДлительность;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланДлительностьЗадачиСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НачальнаяДлительность = ТекущиеДанные.ТекущийПланДлительность;
	Попытка
		ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ТекущиеДанные.ТекущийПланДлительностьСтр);
		ТекущийПланДлительность = Число(ЧисловаяЧасть);
	Исключение
		ТекстСообщения = НСтр("ru = 'Указано некорректное значение длительности'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ТекущийПланДлительностьЗадачиСтрПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("НачальнаяДлительность, ТекущиеДанные", НачальнаяДлительность, ТекущиеДанные)), ТекстСообщения);
		Возврат;
	КонецПопытки;	
	
	ТекущиеДанные.ТекущийПланДлительность = ТекущийПланДлительность;
	
	ПодписьТекПланДлительность = ПолучитьПодписьДлительности(ТекущиеДанные.ТекущийПланДлительность, ТекущиеДанные.ТекущийПланЕдиницаДлительности);
	ТекущиеДанные.ТекущийПланДлительностьСтр = Строка(ТекущиеДанные.ТекущийПланДлительность) + " " + ПодписьТекПланДлительность;
	
	ПроектнаяЗадачаСтруктура = Новый Структура;
	ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
	ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
	
	
	Если ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 
			ТекущиеДанные.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.ТекущийПланНачало, 
				ТекущиеДанные.ТекущийПланДлительность, 
				ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) Тогда 
			ТекущиеДанные.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.ТекущийПланОкончание, 
				ТекущиеДанные.ТекущийПланДлительность, 
				ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланДлительностьЗадачиСтрПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	НачальнаяДлительность = ДополнительныеПараметры.НачальнаяДлительность;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	ТекущиеДанные.ТекущийПланДлительностьСтр = НачальнаяДлительность;

КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланДлительностьЗадачиСтрРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТекущийПланДлительность = ТекущиеДанные.ТекущийПланДлительность + Направление;
	
	ПодписьТекПланДлительность = ПолучитьПодписьДлительности(ТекущиеДанные.ТекущийПланДлительность, ТекущиеДанные.ТекущийПланЕдиницаДлительности);
	ТекущиеДанные.ТекущийПланДлительностьСтр = Строка(ТекущиеДанные.ТекущийПланДлительность) + " " + ПодписьТекПланДлительность;
	
	ПроектнаяЗадачаСтруктура = Новый Структура;
	ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
	ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
	
	Если ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 
			ТекущиеДанные.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.ТекущийПланНачало, 
				ТекущиеДанные.ТекущийПланДлительность, 
				ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) Тогда 
			ТекущиеДанные.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.ТекущийПланОкончание, 
				ТекущиеДанные.ТекущийПланДлительность, 
				ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НачальныеТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	Попытка
		ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ТекущиеДанные.ТекущийПланТрудозатратыСтр);
		ТекущийПланТрудозатраты = Число(ЧисловаяЧасть);
	Исключение
		ТекстСообщения = НСтр("ru = 'Указано некорректное значение трудозатрат'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ТекущийПланТрудозатратыСтрПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("НачальныеТрудозатраты, ТекущиеДанные", НачальныеТрудозатраты, ТекущиеДанные)), ТекстСообщения);
		Возврат;
	КонецПопытки;	
	ТекущиеДанные.ТекущийПланТрудозатраты = ТекущийПланТрудозатраты;
	
	Если ТекущиеДанные.ТекущийПланТрудозатраты > 0 Тогда 
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(ТекущиеДанные.ТекущийПланТрудозатраты, ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат);
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = Строка(ТекущиеДанные.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
	Иначе	
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = "";
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	Если Исполнители.Количество() = 1 Тогда 
		СтрокаИсполнители = Исполнители[0];
		СтрокаИсполнители.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыСтрПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	НачальныеТрудозатраты = ДополнительныеПараметры.НачальныеТрудозатраты;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	ТекущиеДанные.ТекущийПланТрудозатратыСтр = НачальныеТрудозатраты;

КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыСтрРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	
	ТекущиеДанные.ТекущийПланТрудозатраты = ТекущийПланТрудозатраты + Направление;
	
	Если ТекущиеДанные.ТекущийПланТрудозатраты > 0 Тогда 
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(ТекущиеДанные.ТекущийПланТрудозатраты, ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат);
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = Строка(ТекущиеДанные.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
	Иначе	
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = "";
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	Если Исполнители.Количество() = 1 Тогда 
		СтрокаИсполнители = Исполнители[0];
		СтрокаИсполнители.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьФактСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НачальнаяДлительность = ТекущиеДанные.ДлительностьФакт;
	Попытка
		ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ТекущиеДанные.ДлительностьФактСтр);
		ДлительностьФакт = Число(ЧисловаяЧасть);
	Исключение
		ТекстСообщения = НСтр("ru = 'Указано некорректное значение длительности'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ДлительностьФактСтрПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("НачальнаяДлительность, ТекущиеДанные", НачальнаяДлительность, ТекущиеДанные)), ТекстСообщения);
		Возврат;
	КонецПопытки;	
	ТекущиеДанные.ДлительностьФакт = ДлительностьФакт;
	
	Если ТекущиеДанные.ДлительностьФакт > 0 Тогда 
		ПодписьТекФактДлительность = ПолучитьПодписьДлительности(ТекущиеДанные.ДлительностьФакт, ТекущиеДанные.ЕдиницаДлительностиФакт);
		ТекущиеДанные.ДлительностьФактСтр = Строка(ТекущиеДанные.ДлительностьФакт) + " " + ПодписьТекФактДлительность;
	Иначе	
		ТекущиеДанные.ДлительностьФактСтр = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НачалоФакт) Тогда 
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		ТекущиеДанные.ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.НачалоФакт, 
				ТекущиеДанные.ДлительностьФакт, 
				ТекущиеДанные.ЕдиницаДлительностиФакт);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьФактСтрПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	НачальнаяДлительность = ДополнительныеПараметры.НачальнаяДлительность;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	ТекущиеДанные.ДлительностьФактСтр = НачальнаяДлительность;

КонецПроцедуры

&НаКлиенте
Процедура ДлительностьФактСтрРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДлительностьФакт = ТекущиеДанные.ДлительностьФакт;
	
	ТекущиеДанные.ДлительностьФакт = ДлительностьФакт + Направление;
	
	Если ТекущиеДанные.ДлительностьФакт > 0 Тогда 
		ПодписьТекФактДлительность = ПолучитьПодписьДлительности(ТекущиеДанные.ДлительностьФакт, ТекущиеДанные.ЕдиницаДлительностиФакт);
		ТекущиеДанные.ДлительностьФактСтр = Строка(ТекущиеДанные.ДлительностьФакт) + " " + ПодписьТекФактДлительность;
	Иначе	
		ТекущиеДанные.ДлительностьФактСтр = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НачалоФакт) Тогда 
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		ТекущиеДанные.ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
				ТекущиеДанные.НачалоФакт, 
				ТекущиеДанные.ДлительностьФакт, 
				ТекущиеДанные.ЕдиницаДлительностиФакт);
				
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ДЕРЕВА ЗАДАЧ

&НаКлиенте
Процедура ДобавитьПодчиненную(Команда)
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
		СообщениеТекст = НСтр("ru = 'У вас нет прав на добавление проектных задач.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Добавление задач запрещено.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РежимРедактирования = "ВСписке" Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		Иначе
			ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
			НовыйЭлемент = ЭлементДерева.ПолучитьЭлементы().Добавить();
		КонецЕсли;	
		
		Элементы.ДеревоЗадач.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
		Элементы.ДеревоЗадач.ИзменитьСтроку();
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Проект", Проект);
		
		ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущийДанные <> Неопределено Тогда 
			ПараметрыФормы.Вставить("Родитель", ТекущийДанные.Ссылка);
		КонецЕсли;	
		
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследующую(Команда)
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
		СообщениеТекст = НСтр("ru = 'У вас нет прав на добавление проектных задач.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Добавление задач запрещено.'");
		ПоказатьПредупреждение(Неопределено, СообщениеТекст);
		Возврат;
	КонецЕсли;
	
	Если РежимРедактирования = "ВСписке" Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		Иначе
			ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
			РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
			
			Если РодительЭлемента = Неопределено Тогда 
				НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
			Иначе
				НовыйЭлемент = РодительЭлемента.ПолучитьЭлементы().Добавить();
			КонецЕсли;	
			
			Предшественники = НовыйЭлемент.Предшественники;
			
			СтрокаПредшественник = Предшественники.Добавить();
			СтрокаПредшественник.Предшественник = ЭлементДерева.Ссылка;
			СтрокаПредшественник.ТипЗависимости = ПредопределенноеЗначение("Перечисление.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало");
			
			НовыйЭлемент.ПредшественникиСтр = ПредставлениеПредшественников(Предшественники);
		КонецЕсли;	
		
		Элементы.ДеревоЗадач.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
		Элементы.ДеревоЗадач.ИзменитьСтроку();
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Проект", Проект);
		
		ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущийДанные <> Неопределено Тогда 
			ПараметрыФормы.Вставить("Родитель", ТекущийДанные.РодительскаяЗадача);
			ПараметрыФормы.Вставить("Предшественник", ТекущийДанные.Ссылка);
		КонецЕсли;	
		
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньНиже(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	НаУровеньНижеСервер(
		Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка, 
		Элементы.ДеревоЗадач.ТекущиеДанные.РодительскаяЗадача);
		
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхзадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньВыше(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.РодительскаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;

	НаУровеньВышеСервер(
		Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка, 
		Элементы.ДеревоЗадач.ТекущиеДанные.РодительскаяЗадача);
		
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхзадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
    УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);

КонецПроцедуры

&НаКлиенте
Процедура Вверх(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	ВверхСервер();
		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхзадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Вниз(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	ВнизСервер();
		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхзадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
		
	ЗаполнитьДеревоЗадач();
	
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗадачиИзMSProject(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Проект", Проект);
	ОткрытьФорму("Обработка.ИмпортПроектаИзMicrosoftProject.Форма", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееСостояние(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ТекущееСостояние");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкороДолжныЗавершиться(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ДолжныЗакончиться");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкороДолжныНачаться(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ДолжныНачаться");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПоСрокам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПланФактПоСрокам");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПоТрудозатратам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПланФактПоТрудозатратам");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьЗадачи(Команда)
	
	Если Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СвязатьЗадачиСервер();
	Если Результат Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Установлена связь между задачами.'"),,,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущийДанные.Ссылка);
	
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
		
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	Элементы.ДеревоЗадачПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ВременнаяТекущаяПроектнаяЗадача = ТекущаяПроектнаяЗадача;
	ЗаполнитьДеревоЗадач();
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ВременнаяТекущаяПроектнаяЗадача);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДИАГРАММА ГАНТА

&НаСервере
Процедура ЗаполнитьДиаграммуГанта()
	
	// Получаем диаграмму и запрещаем на время заполнения ее обновление.
	// В случае большого объема данных это существенно ускорит выполнение.
	Диаграмма = ДиаграммаГанта;
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.ИнтервалыФона.Очистить();
	
	Для Каждого Шкала Из Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		Шкала.Метки.Очистить();
	КонецЦикла;	
	
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	Диаграмма.ОбластьПостроения.Право = 1;
	
	// Создаем таблицу значений, в которую, по мере обхода запроса, будем заносить связи.
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("Конец");
	Связи.Колонки.Добавить("Начало");
	Связи.Колонки.Добавить("ТипЗависимости");
	
	// Серия будет одна.
	Серия = Диаграмма.Серии.Добавить();
	
	// Заводим переменные для определения максимальной и минимальной дат работ.
	МаксимальнаяДата = NULL;
	МинимальнаяДата = NULL;
	
	Строки = ДеревоЗадач.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из Строки Цикл
		ЗаполнитьОднуТочкуДиаграммыГанта(СтрокаДерева, Связи, Серия, МаксимальнаяДата, МинимальнаяДата);
	КонецЦикла;
	
	// Теперь в интервале минимальной и максимальной дат заполняем интервалы выходных дней.
	Если МинимальнаяДата <> NULL Тогда
		
		День = 3600 * 24;
		Неделя = 3600 * 24 * 7;
		МаксимальнаяДата = МаксимальнаяДата + Неделя * 4;
		
		ГрафикРаботы = Проект.ГрафикРаботы;
		Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
			ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		КонецЕсли;
		
		РабочиеДни = Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(ГрафикРаботы.Календарь, Год(МинимальнаяДата));
		Если Год(МаксимальнаяДата) > Год(МинимальнаяДата) Тогда 
			врРабочиеДни = Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(ГрафикРаботы.Календарь, Год(МаксимальнаяДата));
			Для Каждого Элемент Из врРабочиеДни Цикл
				РабочиеДни.Добавить(Элемент);
			КонецЦикла;	
		КонецЕсли;	 
		
		
		ТекДата = МинимальнаяДата;
		Пока ТекДата <= МаксимальнаяДата Цикл;
			
			РабочийДень = (РабочиеДни.Найти(НачалоДня(ТекДата)) <> Неопределено);
			
			Если Не РабочийДень Тогда
			
				Кон = КонецДня(ТекДата);
				Нач = НачалоДня(ТекДата);
				Диаграмма.ИнтервалыФона.Добавить(Нач, Кон);
				
			КонецЕсли;	
			
			ТекДата = ТекДата + День;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	// По заполненной таблице создаем связи.
	СоздатьСвязиНаДиаграммеГанта(Связи, Диаграмма, Серия);
	
	// Находим элемент шкалы времени для непериодических меток.
	ЭлементМеток = ПолучитьЭлементДляМеток(Диаграмма);
	
	// Создаем метку - текущая дата
	Метка = ЭлементМеток.Метки.Добавить(ТекущаяДата());
	Метка.Текст = НСтр("ru = 'Текущая дата'");
	Метка.ЦветТекста = WebЦвета.Красный;
	Метка.ЦветЛинии = Метка.ЦветТекста;
	
	// Развертываем первую точку - рекурсивно. 
	Если Диаграмма.Точки.Количество() > 0 Тогда
		Диаграмма.РазвернутьТочку(Диаграмма.Точки.Получить(0), Истина);
	КонецЕсли;
	
	// Включаем обновление диаграммы.
	Диаграмма.Обновление = Истина;
	
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОднуТочкуДиаграммыГанта(СтрокаДерева, Связи, Серия, МаксимальнаяДата, МинимальнаяДата)
	
	Диаграмма = ДиаграммаГанта;
	
	ЦветЗапланированного = WebЦвета.Васильковый;
	ЦветНепросроченного = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
	ЦветПросроченного = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветВыполненого =  ЦветаСтиля.ЗавершенныйБизнесПроцесс; 
	ЦветНеназначенного = WebЦвета.НейтральноКоричневый;
	ЦветРодителя = WebЦвета.Черный;
	
	Если ЗначениеЗаполнено(СтрокаДерева.НачалоФакт) И ЗначениеЗаполнено(СтрокаДерева.ОкончаниеФакт) Тогда 
		ДатаНачала = СтрокаДерева.НачалоФакт;
		ДатаОкончания = СтрокаДерева.ОкончаниеФакт;
	Иначе	
		ДатаНачала = СтрокаДерева.ТекущийПланНачало;
		ДатаОкончания = СтрокаДерева.ТекущийПланОкончание;
	КонецЕсли;	
	
	
	НужноДобавитьСтроку = Истина;
	
	// Если даты не заполнены и нет дочерних задач - не добавляем точку
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания)
		И СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		
		НужноДобавитьСтроку = Ложь;
		
	КонецЕсли;	
	
	Если НужноДобавитьСтроку Тогда
		
		// Поскольку серия одна, каждой работе соответствует одна точка и одно значение.
		
		// Инициализируем точку.
		Точка = Диаграмма.УстановитьТочку(СтрокаДерева.Ссылка, 
											?(СтрокаДерева.РодительскаяЗадача.Пустая(), 
				  							Неопределено,
											СтрокаДерева.РодительскаяЗадача));
											
		Точка.Текст = СтрокаДерева.Наименование;
		
		Диаграмма.РазвернутьТочку(Точка, Истина);
		
		// Инициализируем значение.
		Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
		
		Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда	
			 
			Если ЗначениеЗаполнено(СтрокаДерева.ОкончаниеФакт) Тогда
				Значение.Редактирование = Ложь;
			Иначе	
				Значение.Редактирование = Истина;
			КонецЕсли;	
			
			// Добавляем интервал. В данном примере у каждой работы единственный интервал.
			Интервал = Значение.Добавить();
			Интервал.Начало = ДатаНачала;
			Интервал.Конец = ДатаОкончания;
			
			// Формируем подпись.
			УстановитьТекстЗначения(Интервал);
			
			ЭтоРодитель = (СтрокаДерева.ПолучитьЭлементы().Количество() <> 0);
			
			// Определяем статус задачи.
			Если ЭтоРодитель Тогда
				Значение.Цвет = ЦветРодителя;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ОкончаниеФакт) Тогда
				Значение.Цвет = ЦветВыполненого;
			ИначеЕсли ДатаОкончания < ТекущаяДата() Тогда
				Значение.Цвет = ЦветПросроченного;
			ИначеЕсли ДатаНачала < ТекущаяДата() И Не ЗначениеЗаполнено(СтрокаДерева.НачалоФакт) Тогда 		
				Значение.Цвет = ЦветНеназначенного;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.НачалоФакт) Тогда 	
				Значение.Цвет = ЦветНепросроченного;
			Иначе
				Значение.Цвет = ЦветЗапланированного;
			КонецЕсли;
			
			// Если надо, корректируем максимальную и минимальную даты.
			Если МаксимальнаяДата = NULL Или МаксимальнаяДата < ДатаОкончания Тогда
				МаксимальнаяДата = ДатаОкончания;
			КонецЕсли;				
			
			Если МинимальнаяДата = NULL Или МинимальнаяДата > ДатаНачала Тогда
				МинимальнаяДата = ДатаНачала;
			КонецЕсли;	
			
			// Получаем связи данной работы и заносим в таблицу.
			Для Каждого СтрокаДереваПред Из СтрокаДерева.Предшественники Цикл
				Связь = Связи.Добавить();
				Связь.Начало = СтрокаДереваПред.Предшественник;
				Связь.Конец = СтрокаДерева.Ссылка;
				Связь.ТипЗависимости = СтрокаДереваПред.ТипЗависимости;
			КонецЦикла;
			
		КонецЕсли;			
		
		Если СтрокаДерева.Веха Тогда
			
			// Находим элемент шкалы времени для непериодических меток.
			ЭлементМеток = ПолучитьЭлементДляМеток(Диаграмма);
			
			// Создаем метку - для вехи 
			Метка = ЭлементМеток.Метки.Добавить(ДатаНачала);
			Метка.Текст = СтрокаДерева.Наименование;
			Метка.ЦветТекста = WebЦвета.Красный;
			Метка.ЦветЛинии = Метка.ЦветТекста;
			
		КонецЕсли;
		
		Строки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			ЗаполнитьОднуТочкуДиаграммыГанта(Строка, Связи, Серия, МаксимальнаяДата, МинимальнаяДата);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСвязиНаДиаграммеГанта(Связи, Диаграмма, Серия)
	
	ТекущаяТочка = NULL;
	Для Каждого Связь Из Связи Цикл 
		
		Если ТекущаяТочка = NULL Или ТекущаяТочка.Значение <> Связь.Конец Тогда
			ТекущаяТочка = Диаграмма.УстановитьТочку(Связь.Конец);
		КонецЕсли;			
		
		ТочкаНачала = Диаграмма.УстановитьТочку(Связь.Начало);
		Значение = Диаграмма.ПолучитьЗначение(ТочкаНачала, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалНачала = Интервал;
			Прервать;
		КонецЦикла;				
		Значение = Диаграмма.ПолучитьЗначение(ТекущаяТочка, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалКонца = Интервал;
			Прервать;
		КонецЦикла;				
		
		Если ИнтервалНачала = Неопределено ИЛИ ИнтервалКонца = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвязьДобавленная = ИнтервалНачала.Добавить(ИнтервалКонца);
		
		Если Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
		ИначеЕсли Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоКонец;
		ИначеЕсли Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
		ИначеЕсли Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.КонецКонец;
		КонецЕсли;	
		
		Если ИнтервалНачала.Конец <= ИнтервалКонца.Начало Тогда
			СвязьДобавленная.Цвет = WebЦвета.Синий;
		Иначе			
			СвязьДобавленная.Цвет = WebЦвета.Красный;
		КонецЕсли;			
		
	КонецЦикла;				
	
КонецПроцедуры // СоздатьСвязи(Связи, Диаграмма, Серия)

&НаСервере
Функция ПолучитьЭлементДляМеток(Диаграмма)
	
	// Ищем элемент шкалы времени с ОтображатьПериодическиеМетки = Ложь
	Для Каждого Элемент Из Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		
		Если Элемент.ОтображатьПериодическиеМетки = Ложь Тогда
			ЭлементМеток = Элемент;
			Возврат ЭлементМеток;
		КонецЕсли;			
		
	КонецЦикла;						
	
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;
	
	Возврат ЭлементМеток;
	
КонецФункции // ПолучитьЭлементДляМеток(Диаграмма)

&НаСервере
Процедура УстановитьТекстЗначения(Интервал)
	
	Интервал.Значение.Текст = Строка(День(Интервал.Начало)) + "." 
		+ Строка(Месяц(Интервал.Начало)) + "-" 
		+ Строка(День(Интервал.Конец)) + "." 
		+ Строка(Месяц(Интервал.Конец));
									 
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗадачуИзДиаграммыГанта(Задача, ИнтервалНачало, ИнтервалКонец)
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.Заблокировать();
	
	Если ЗадачаОбъект.Веха Тогда
		
		Если ИнтервалНачало <> ЗадачаОбъект.ТекущийПланНачало Тогда
			ИнтервалКонец = ИнтервалНачало;
		КонецЕсли;	
		
		Если ИнтервалКонец <> ЗадачаОбъект.ТекущийПланОкончание Тогда
			ИнтервалНачало = ИнтервалКонец;
		КонецЕсли;
		
		ЗадачаОбъект.ТекущийПланНачало = ИнтервалНачало;
		ЗадачаОбъект.ТекущийПланОкончание = ИнтервалКонец;
		ЗадачаОбъект.ТекущийПланДлительность = 0;
		ЗадачаОбъект.Записать();
		
	Иначе
		
		Если ИнтервалНачало <> ЗадачаОбъект.ТекущийПланНачало И ИнтервалКонец <> ЗадачаОбъект.ТекущийПланОкончание Тогда // перенесли отрезок
			
			ЗадачаОбъект.ТекущийПланНачало = ИнтервалНачало;
			ЗадачаОбъект.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ЗадачаОбъект, 
			ЗадачаОбъект.ТекущийПланНачало, 
			ЗадачаОбъект.ТекущийПланДлительность, 
			ЗадачаОбъект.ТекущийПланЕдиницаДлительности);
			ЗадачаОбъект.Записать();
			
		Иначе // изменили отрезок
			
			ЗадачаОбъект.ТекущийПланНачало = ИнтервалНачало;
			ЗадачаОбъект.ТекущийПланОкончание = ИнтервалКонец;
			ЗадачаОбъект.ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(ЗадачаОбъект, 
			ЗадачаОбъект.ТекущийПланНачало, 
			ЗадачаОбъект.ТекущийПланОкончание, 
			ЗадачаОбъект.ТекущийПланЕдиницаДлительности);
			ЗадачаОбъект.Записать();
			
		КонецЕсли;	
		
	КонецЕсли;
		
	ЗадачаОбъект.Записать();
	ЗадачаОбъект.Разблокировать();
	
	МассивИзмененныхЗадач = Новый Массив;
	РаботаСПроектами.РассчитатьПланПроекта(Задача, МассивИзмененныхЗадач);
	ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДИАГРАММЫ ГАНТА

&НаКлиенте
Процедура ДиаграммаГантаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	
	ЗадачаСсылка = Неопределено;
	
	Если ТипЗнч(Значения) = Тип("Массив") И Значения.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Значения[0].Точка.Значение) Тогда
			ЗадачаСсылка = Значения[0].Точка.Значение;
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Значения) = Тип("ЗначениеДиаграммыГанта") Тогда	
		
		ЗадачаСсылка = Значения.Точка.Значение;
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗадачаСсылка);
		
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
		СообщениеТекст = НСтр("ru = 'У вас нет прав на изменение проектных задач.'");
		ПоказатьПредупреждение(Неопределено,СообщениеТекст);
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
		СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Изменение плана запрещено.'");
		ПоказатьПредупреждение(Неопределено,СообщениеТекст);
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		Значение = Интервал.Значение.Точка.Значение;
		Начало = Интервал.Начало;
		Конец = Интервал.Конец;
		
		ИзменитьЗадачуИзДиаграммыГанта(Значение, Начало, Конец);
	Исключение	
		ОтменаРедактирования = Истина;
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьИзMSProject(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Обработка.ИмпортПроектаИзMicrosoftProject.Форма", ПараметрыФормы, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
