
////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбщиеТрудозатраты()
	
	Если Объект.Исполнители.Количество() > 0 Тогда 
		Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	ТекущийПланТрудозатраты = 0;
	
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		ТекущийПланТрудозатраты = ТекущийПланТрудозатраты + Исполнитель.ТекущийПланТрудозатраты;
	КонецЦикла;
	
	Объект.ТекущийПланТрудозатраты = ТекущийПланТрудозатраты;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если Объект.Веха Тогда 
		Элементы.ТекущийПланДлительность.Доступность = Ложь;
		Элементы.ТекущийПланЕдиницаДлительности.Доступность = Ложь;
		
		Элементы.ДлительностьФакт.Доступность = Ложь;
		Элементы.ЕдиницаДлительностиФакт.Доступность = Ложь;
		
		Элементы.ГруппаИсполнители.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.ТекущийПланДлительность.Доступность = Истина;
		Элементы.ТекущийПланЕдиницаДлительности.Доступность = Истина;
		
		Элементы.ДлительностьФакт.Доступность = Истина;
		Элементы.ЕдиницаДлительностиФакт.Доступность = Истина;
		
		Элементы.ГруппаИсполнители.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, 
		РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИсполнителейЗадачи()
	
	МассивОсновныхПроцессов = РаботаСПроектами.ПолучитьОсновныеБизнесПроцессы(Объект.Ссылка, Истина);
	Если МассивОсновныхПроцессов.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'По данной задаче запущено один или несколько основных процессов. Вы можете вручную изменить состав исполнителей в них.'");
		ПоказатьПредупреждение(Неопределено,ТекстСообщения,, НСтр("Изменение исполнителей задачи"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыОкончания()
	
	Если ТекущийПланОкончаниеСсылки <> Объект.ТекущийПланОкончание Тогда
		МассивОсновныхПроцессов = РаботаСПроектами.ПолучитьОсновныеБизнесПроцессы(Объект.Ссылка, Истина);
		Если МассивОсновныхПроцессов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Изменился плановый срок завершения проектной задачи. Изменить срок исполнения в основном процессе по данной задаче?'");
			Режим = Новый СписокЗначений;
			Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить'"));
			Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не изменять'"));
			Ответ = Вопрос(ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
			    Возврат;
			КонецЕсли;
			ИзменитьСрокОсновногоПроцесса(МассивОсновныхПроцессов[0]);
		ИначеЕсли МассивОсновныхПроцессов.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Изменился плановый срок завершения проектной задачи. Вы можете вручную изменить срок исполнения в основных процессах по данной задаче.'");
			ПоказатьПредупреждение(Неопределено,ТекстСообщения,, НСтр("Изменение даты окончания задачи"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьСрокОсновногоПроцесса(ОсновнойПроцессСсылка)
	
	Если ОсновнойПроцессСсылка <> Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(ОсновнойПроцессСсылка);
		ОсновнойПроцесс = ОсновнойПроцессСсылка.ПолучитьОбъект();
		ПараметрыПереносаСрока = Новый Структура;
		//Если ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач") Тогда
		//	ПараметрыПереносаСрока.Вставить("ПереносСрока", Истина);
		//	ПараметрыПереносаСрока.Вставить("БизнесПроцессПереноса", 
		//		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ПустаяСсылка());
		//	ПараметрыПереносаСрока.Вставить("КомментарийАвтора", 
		//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//			НСтр("ru = 'Изменение срока завершения проектной задачи ""%1""'"),
		//			Строка(Объект.Ссылка)));
		//	ПараметрыПереносаСрока.Вставить("Пользователь", Пользователи.ТекущийПользователь());
		//	ПараметрыПереносаСрока.Вставить("СтарыйСрок", ТекущийПланОкончаниеСсылки);
		//	ПараметрыПереносаСрока.Вставить("СтараяДлительностьДни", 0);
		//	ПараметрыПереносаСрока.Вставить("СтараяДлительностьЧасы", 0);
		//	ПараметрыПереносаСрока.Вставить("НовыйСрок", Объект.ТекущийПланОкончание);
		//	ПараметрыПереносаСрока.Вставить("НоваяДлительностьДни", 0);
		//	ПараметрыПереносаСрока.Вставить("НоваяДлительностьЧасы", 0);
		//	ПараметрыПереносаСрока.Вставить("Предмет", ОсновнойПроцессСсылка);
		//КонецЕсли;
		
		//Если ТипЗнч(ОсновнойПроцессСсылка) <> Тип("БизнесПроцессСсылка.Согласование") Тогда
		//	ОсновнойПроцесс.СрокИсполнения = Объект.ТекущийПланОкончание;
		//КонецЕсли;
		
		ОсновнойПроцесс.Записать();
		Если ОсновнойПроцесс.Метаданные().ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
			ОсновнойПроцесс.ИзменитьРеквизитыНевыполненныхЗадач(ОсновнойПроцесс.Исполнители, ПараметрыПереносаСрока);
		Иначе
			ОсновнойПроцесс.ИзменитьРеквизитыНевыполненныхЗадач(ПараметрыПереносаСрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьФактическиеТрудозатратыИсполнителей()
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	ТаблицаУчастников = РаботаСПроектами.ПолучитьФактическиеТрудозатратыИсполнителейПроектнойЗадачи(
		Объект.Ссылка,
		Объект.ЕдиницаТрудозатратФакт);
		
	Для Каждого Строка Из ТаблицаУчастников Цикл
		Для Каждого Участник Из Объект.Исполнители Цикл
			Если Участник.Исполнитель = Строка.Исполнитель
				И (Участник.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации
					ИЛИ
					НЕ ЗначениеЗаполнено(Участник.ОсновнойОбъектАдресации)
					И НЕ ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации))
				И (Участник.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации 
					ИЛИ
					НЕ ЗначениеЗаполнено(Участник.ДополнительныйОбъектАдресации)
					И НЕ ЗначениеЗаполнено(Строка.ДополнительныйОбъектАдресации)) Тогда
				
				Участник.ТрудозатратыФакт = Строка.ТрудозатратыФакт;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ЕдиницаТрудозатратПриИзмененииСервер()
	
	ТрудозатратыФакт = РаботасПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(
		Объект.Ссылка,
		Объект.ЕдиницаТрудозатратФакт);
	ПолучитьФактическиеТрудозатратыИсполнителей();
	//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
	ПолучитьПлановыеТрудозатратыПоЗаявкам();
	//АбисСофт-Кострицын Олег-Финиш  17 января 2014 г.
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме()
	
	Чтение = Объект.Владелец.РедактируетсяВСтороннейСистеме;
	Элементы.Владелец.ТолькоПросмотр = Чтение;
	Элементы.Родитель.ТолькоПросмотр = Чтение;
	
	Если Не Объект.СуммарнаяЗадача Тогда 
		Элементы.ТекущийПланНачало.ТолькоПросмотр = Чтение;
		Элементы.ТекущийПланОкончание.ТолькоПросмотр = Чтение;
		Элементы.ТекущийПланДлительность.ТолькоПросмотр = Чтение;
		Элементы.ТекущийПланЕдиницаДлительности.ТолькоПросмотр = Чтение;
		Элементы.Веха.ТолькоПросмотр = Чтение;
	КонецЕсли;	
	
	Элементы.ТекущийПланЕдиницаТрудозатрат.ТолькоПросмотр = Чтение;
	Элементы.ГруппаПредшественники.ТолькоПросмотр = Чтение;
	Элементы.ГрафикРаботы.ТолькоПросмотр = Чтение;
	Элементы.Исполнители.ТолькоПросмотр = Чтение;
	Элементы.ЕдиницаТрудозатратФакт.ТолькоПросмотр = Чтение;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеВыбораИсполнителя(Текст = "")
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Строка Из Объект.Владелец.ПроектнаяКоманда Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если Текст <> "" И Нрег(Лев(Строка.Исполнитель, СтрДлина(Текст))) <> НРег(Текст) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Исполнитель", Строка.Исполнитель);
		ЗначениеВыбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ЗначениеВыбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель);
		ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка.ДополнительныйОбъектАдресации) Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель) + "(" + Строка.ОсновнойОбъектАдресации + ", " + Строка.ДополнительныйОбъектАдресации + ")";
		ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель) + "(" + Строка.ОсновнойОбъектАдресации + ")";
		Иначе
			ПредставлениеВыбора = Строка(Строка.Исполнитель);
		КонецЕсли;	
		
		ДанныеВыбора.Добавить(ЗначениеВыбора, ПредставлениеВыбора);
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции	

//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
&НаСервере
Процедура ПолучитьПлановыеТрудозатратыПоЗаявкам()
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	ТаблицаУчастников = РаботаСПроектами.ПолучитьПлановыеТрудозатратыПоПроектнойЗадачи(
		Объект.Ссылка,
		Объект.ЕдиницаТрудозатратФакт);
		
	Для Каждого Строка Из ТаблицаУчастников Цикл
		Для Каждого Участник Из Объект.Исполнители Цикл
			Если Участник.Исполнитель = Строка.Исполнитель Тогда
				Участник.ТрудозатратыПланПоЗаявкам = Строка.ТрудозатратыПланПоЗаявкам;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры
//АбисСофт-Кострицын Олег-Финиш рт  17 января 2014 г.

///////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если ЗначениеЗаполнено(Параметры.Проект) Тогда 
			Объект.Владелец = Параметры.Проект;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Параметры.Родитель) Тогда 
			Объект.Родитель = Параметры.Родитель;
		КонецЕсли;	
		
		СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта;
		Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
		
		
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда 		
			РеквизитыПроекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Владелец,
				"Состояние, ЕдиницаТрудозатратЗадач, ЕдиницаДлительностиЗадач, ТекущийПланНачало, ТекущийПланОкончание, СпособПланирования");
				
			СпособПланирования = РеквизитыПроекта.СпособПланирования;	
				
			Объект.ТекущийПланЕдиницаТрудозатрат = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
			Объект.ЕдиницаТрудозатратФакт = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
			
			Объект.ТекущийПланЕдиницаДлительности = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
			Объект.ЕдиницаДлительностиФакт = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
			
			Если СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда 
				Объект.ТекущийПланНачало = РеквизитыПроекта.ТекущийПланНачало;
				Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
			Иначе
				Объект.ТекущийПланОкончание = РеквизитыПроекта.ТекущийПланОкончание;
				Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноПозже;
			КонецЕсли;	
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Родитель) Тогда 
			Объект.ТекущийПланНачало = Объект.Родитель.ТекущийПланНачало;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Параметры.Предшественник) Тогда 
			НоваяСтрока = Объект.Предшественники.Добавить();
			НоваяСтрока.Предшественник = Параметры.Предшественник;
			НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			
			Объект.ТекущийПланНачало = Параметры.Предшественник.ТекущийПланОкончание;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Объект.ТекущийПланДлительность) Тогда 
			Объект.ТекущийПланДлительность = 1;
		КонецЕсли;	
		
		Если Объект.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше Тогда 
			Если ЗначениеЗаполнено(Объект.ТекущийПланНачало) И ЗначениеЗаполнено(Объект.ТекущийПланДлительность) Тогда 
				Объект.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
					Объект.ТекущийПланНачало, 
					Объект.ТекущийПланДлительность, 
					Объект.ТекущийПланЕдиницаДлительности);
			КонецЕсли;	
		Иначе
			Если ЗначениеЗаполнено(Объект.ТекущийПланОкончание) И ЗначениеЗаполнено(Объект.ТекущийПланДлительность) Тогда 
				Объект.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
				Объект.ТекущийПланОкончание, 
				Объект.ТекущийПланДлительность, 
				Объект.ТекущийПланЕдиницаДлительности);
			КонецЕсли;	
		КонецЕсли;
		
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
		//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
		СписокСотрудниковНаЗадачу = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, "");
		Объект.Исполнители.Очистить();
		Для Каждого Эл Из СписокСотрудниковНаЗадачу Цикл
			НовыйУчастник = Объект.Исполнители.Добавить();
			НовыйУчастник.Исполнитель = Эл.Значение.Исполнитель;
		КонецЦикла;
		//АбисСофт-Кострицын Олег-финиш  17 января 2014 г.
	Иначе
		ТекущийПланОкончаниеСсылки = Объект.Ссылка.ТекущийПланОкончание;
		
		// Получение фактических трудозатрат проектной задачи
		ТрудозатратыФакт = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(Объект.Ссылка);
		ПолучитьФактическиеТрудозатратыИсполнителей();
		
		//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
		ПолучитьПлановыеТрудозатратыПоЗаявкам();
		//АбисСофт-Кострицын Олег-Финиш  17 января 2014 г.
	КонецЕсли;	
	
	Если ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботыПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Владелец, "ГрафикРаботы");
	КонецЕсли;
	ЗаполненаПроектнаяКоманда = (Объект.Владелец.ПроектнаяКоманда.Количество() > 0);
	
	Если Объект.СуммарнаяЗадача Тогда 
		Элементы.ТекущийПланНачало.ТолькоПросмотр = Истина;
		Элементы.ТекущийПланОкончание.ТолькоПросмотр = Истина;
		Элементы.ТекущийПланДлительность.ТолькоПросмотр = Истина;
		Элементы.ТекущийПланЕдиницаДлительности.ТолькоПросмотр = Истина;
		
		Элементы.НачалоФакт.ТолькоПросмотр = Истина;
		Элементы.ОкончаниеФакт.ТолькоПросмотр = Истина;
		Элементы.ДлительностьФакт.ТолькоПросмотр = Истина;
		Элементы.ЕдиницаДлительностиФакт.ТолькоПросмотр = Истина;
		
		Элементы.Веха.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	// Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаДополнительныеРеквизиты");
		
	Если ПустаяСтрока(ТипПредмета) Тогда
		Элементы.Предмет.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда 
		Элементы.Владелец.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// вывод единицы измерения в заголовки полей
	Если ЗначениеЗаполнено(Объект.ТекущийПланЕдиницаТрудозатрат) Тогда 
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План (%1)'"),
				Строка(Объект.ТекущийПланЕдиницаТрудозатрат));
	Иначе		
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			НСтр("ru = 'План'");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЕдиницаТрудозатратФакт) Тогда 
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Факт (%1)'"),
				Строка(Объект.ЕдиницаТрудозатратФакт));
	Иначе		
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			НСтр("ru = 'Факт'");
	КонецЕсли;
	
	// Доступность значения ограничения
	Если Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше")
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НеПрименять")
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноПозже") Тогда 
		Элементы.ДатаОграничения.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.ДатаОграничения.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.ФормаУстановитьТипПредмета(ЭтотОбъект);
	
	РодительСсылки = Объект.Ссылка.Родитель;
	ПроектСсылки = Объект.Ссылка.Владелец;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
	    ЭтотОбъект.Элементы.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.УказатьТрудозатраты);
	

	УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме();
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	РассчитатьОбщиеТрудозатраты();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйОбъект = Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка);
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Если ЭтоНовыйОбъект ИЛИ НеобходимоПересчитатьКодСДР Тогда
		// получение кода СДР
		ДанныеКода = РаботаСПроектами.ПолучитьКодСДРИНомерЗадачиВУровне(ТекущийОбъект.Владелец, ТекущийОбъект.Родитель);
		ТекущийОбъект.КодСДР = ДанныеКода.КодСДР;
		ТекущийОбъект.НомерЗадачиВУровне = ДанныеКода.НомерЗадачиВУровне;
	КонецЕсли;
	
	ТекущийРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийОбъект.Ссылка, "Родитель");
	ПараметрыЗаписи.Вставить("ТекущийРодитель", ТекущийРодитель);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	// Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МассивИзмененныхЗадач = Новый Массив;
	МассивИзмененныхЗадач.Добавить(ТекущийОбъект.Ссылка);
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ТекущийРодитель) И ПараметрыЗаписи.ТекущийРодитель <> ТекущийОбъект.Родитель Тогда 
		РаботаСПроектами.РассчитатьПланПроекта(ПараметрыЗаписи.ТекущийРодитель, МассивИзмененныхЗадач);
	КонецЕсли;	
	РаботаСПроектами.РассчитатьПланПроекта(ТекущийОбъект.Ссылка, МассивИзмененныхЗадач);
	
	ПараметрыЗаписи.Вставить("МассивИзмененныхЗадач", МассивИзмененныхЗадач);
	
	Прочитать();
		
	ПолучитьФактическиеТрудозатратыИсполнителей();
	
	//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
	ПолучитьПлановыеТрудозатратыПоЗаявкам();
	//АбисСофт-Кострицын Олег-Финиш  17 января 2014 г.
	
	РодительСсылки = Объект.Ссылка.Родитель;
	ПроектСсылки = Объект.Ссылка.Владелец;
	
	НеобходимоПересчитатьКодСДР = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Проект", Объект.Владелец);
	ПараметрОповещения.Вставить("Родитель", Объект.Родитель);
	ПараметрОповещения.Вставить("ПроектнаяЗадача", Объект.Ссылка);
	ПараметрОповещения.Вставить("МассивИзмененныхЗадач", ПараметрыЗаписи.МассивИзмененныхЗадач);
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда 
		Оповестить("СозданаПроектнаяЗадача", ПараметрОповещения, ЭтотОбъект);
	Иначе	
		Оповестить("ИзмененаПроектнаяЗадача", ПараметрОповещения, ЭтотОбъект);
	КонецЕсли;	
	
	Если Не ПараметрыЗаписи.ЭтоНовый Тогда 
		Если ТекущийПланОкончаниеСсылки <> Объект.ТекущийПланОкончание Тогда
			ПриИзмененииДатыОкончания();
			ТекущийПланОкончаниеСсылки = Объект.ТекущийПланОкончание;
		КонецЕсли;
		
		Если ИзменилисьРеквизитыИсполнителей Тогда
			ПриИзмененииИсполнителейЗадачи();
			ИзменилисьРеквизитыИсполнителей = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессами.ФормаУстановитьТипПредмета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	ИначеЕсли (ИмяСобытия = "БизнесПроцессСтартован" И Параметр.Свойство("ПроектнаяЗадача") И Параметр.ПроектнаяЗадача = Объект.Ссылка) Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "Изменение_ФактическиеТрудозатратыПроектнойЗадачи"
		И (Параметр = Объект.Ссылка ИЛИ НЕ ЗначениеЗаполнено(параметр)) Тогда
		ЕдиницаТрудозатратПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере                   
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Предшественники.Количество() > 0 Тогда 
		Для Каждого Предшественник Из Объект.Предшественники Цикл
			Если ЗначениеЗаполнено(Предшественник.Задержка) И Не ЗначениеЗаполнено(Предшественник.ЕдиницаЗадержки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указана единица задержки для предшественника ""%1"".'"),
						Предшественник.Предшественник), ,
					"Объект.Предшественники", ,
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

	
/////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ИсполнителиИсполнительПриИзменении(Элемент)
	
	Если ЗаполненаПроектнаяКоманда Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТипЗнч(ТекущийДанные.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(ТекущийДанные.Исполнитель) Тогда 
		
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийДанные.Исполнитель, "ИспользуетсяСОбъектамиАдресации") Тогда 
			Результат = Неопределено;
 
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", 
				Новый Структура("РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
					ТекущийДанные.Исполнитель, 
					ТекущийДанные.ОсновнойОбъектАдресации, 
					ТекущийДанные.ДополнительныйОбъектАдресации), 
				ЭтотОбъект,,,, Новый ОписаниеОповещения("ИсполнителиИсполнительПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекущийДанные", ТекущийДанные)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПриИзмененииЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	ТекущийДанные = ДополнительныеПараметры.ТекущийДанные;
	
	
	Результат = Результат1;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекущийДанные.Исполнитель = Результат.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = Результат.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = Результат.ДополнительныйОбъектАдресации;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗаполненаПроектнаяКоманда Тогда 
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, "");
	Иначе
		РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент,Элементы.Исполнители.ТекущиеДанные.Исполнитель,,Истина,,
			Элементы.ПроектнаяКоманда.ТекущиеДанные.ОсновнойОбъектАдресации, 
			Элементы.ПроектнаяКоманда.ТекущиеДанные.ДополнительныйОбъектАдресации,,Ложь,Ложь,Истина,Ложь);	
	КонецЕсли;		
			
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("РольИсполнителя") Тогда 
			ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
			ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Иначе
			//ЗаполнитьЗначенияСвойств(ТекущийДанные, ВыбранноеЗначение, "Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			//АбисСофт-Кострицын Олег-Старт  25 января 2014 г.
				ЗаполнитьЗначенияСвойств(ТекущийДанные, ВыбранноеЗначение, "Исполнитель");
			//АбисСофт-Кострицын Олег-финиш  25 января 2014 г.
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		Если ЗаполненаПроектнаяКоманда Тогда 
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, Текст);
		Иначе
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		Если ЗаполненаПроектнаяКоманда Тогда 
			
			ДанныеВыбораУчастника = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Объект.Владелец, Текст);
			Если ДанныеВыбораУчастника.Количество() = 1 Тогда 
				ВыбранноеЗначение = ДанныеВыбораУчастника[0].Значение;
				
				ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
				ЗаполнитьЗначенияСвойств(ТекущийДанные, ВыбранноеЗначение, "Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				
				Модифицированность = Истина;
			Иначе	
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = ДанныеВыбораУчастника;
			КонецЕсли;
			
		Иначе
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		//Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
			Элементы.Исполнители.ТекущиеДанные.Исполнитель = РолиПустаяСсылка;
		//АбисСофт-Кострицын Олег-финиш  17 января 2014 г.
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	РассчитатьОбщиеТрудозатраты();	
	ИзменилисьРеквизитыИсполнителей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыПриИзменении(Элемент)
	
	РассчитатьОбщиеТрудозатраты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланНачало) 
		И Объект.ТекущийПланНачало = НачалоДня(Объект.ТекущийПланНачало)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			Объект.ТекущийПланНачало);
	КонецЕсли;
	
	Если Объект.Веха Тогда 
		Объект.ТекущийПланОкончание = Объект.ТекущийПланНачало;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ТекущийПланНачало) Тогда 	
		Объект.ТекущийПланДлительность = 0;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ТекущийПланДлительность) Тогда 	
		Объект.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			Объект.ТекущийПланНачало, 
			Объект.ТекущийПланДлительность, 
			Объект.ТекущийПланЕдиницаДлительности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланОкончание) 
		И Объект.ТекущийПланОкончание = НачалоДня(Объект.ТекущийПланОкончание)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ТекущийПланОкончание = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			Объект.ТекущийПланОкончание);
	КонецЕсли;
	
	Если Объект.Веха Тогда 
		Объект.ТекущийПланНачало = Объект.ТекущийПланОкончание;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ТекущийПланОкончание) Тогда 	
		Объект.ТекущийПланДлительность = 0;	
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ТекущийПланНачало) Тогда 	
		Объект.ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
			Объект.ТекущийПланНачало, 
			Объект.ТекущийПланОкончание, 
			Объект.ТекущийПланЕдиницаДлительности);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланДлительностьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланНачало) Тогда 
		Объект.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			Объект.ТекущийПланНачало, 
			Объект.ТекущийПланДлительность, 
			Объект.ТекущийПланЕдиницаДлительности);
			
	ИначеЕсли ЗначениеЗаполнено(Объект.ТекущийПланОкончание) Тогда 		
		Объект.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			Объект.ТекущийПланОкончание, 
			Объект.ТекущийПланДлительность, 
			Объект.ТекущийПланЕдиницаДлительности);		
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланЕдиницаДлительностиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланНачало) Тогда 
		Объект.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			Объект.ТекущийПланНачало, 
			Объект.ТекущийПланДлительность, 
			Объект.ТекущийПланЕдиницаДлительности);
			
	ИначеЕсли ЗначениеЗаполнено(Объект.ТекущийПланОкончание) Тогда 		
		Объект.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			Объект.ТекущийПланОкончание, 
			Объект.ТекущийПланДлительность, 
			Объект.ТекущийПланЕдиницаДлительности);		
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоФакт) 
		И Объект.НачалоФакт = НачалоДня(Объект.НачалоФакт)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.НачалоФакт = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			Объект.НачалоФакт);
	КонецЕсли;
	
	Если Объект.Веха Тогда 
		Объект.ОкончаниеФакт = Объект.НачалоФакт;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.НачалоФакт) Тогда 	
		Объект.ДлительностьФакт = 0;
		Объект.ОкончаниеФакт = '00010101';
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДлительностьФакт) Тогда 
		Объект.ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			Объект.НачалоФакт, 
			Объект.ДлительностьФакт, 
			Объект.ЕдиницаДлительностиФакт);
			
	ИначеЕсли ЗначениеЗаполнено(Объект.ОкончаниеФакт) Тогда 		
		Объект.ДлительностьФакт = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
			Объект.НачалоФакт, 
			Объект.ОкончаниеФакт, 
			Объект.ЕдиницаДлительностиФакт);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеФакт) 
		И Объект.ОкончаниеФакт = НачалоДня(Объект.ОкончаниеФакт)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ОкончаниеФакт = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			Объект.ОкончаниеФакт);
	КонецЕсли;
	
	Если Объект.Веха Тогда 
		Объект.НачалоФакт = Объект.ОкончаниеФакт;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.НачалоФакт) Тогда 	
		Объект.ДлительностьФакт = РаботаСПроектами.РассчитатьДлительностьПериода(Объект, 
			Объект.НачалоФакт, 
			Объект.ОкончаниеФакт, 
			Объект.ЕдиницаДлительностиФакт);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоФакт) Тогда 
		Объект.ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			Объект.НачалоФакт, 
			Объект.ДлительностьФакт, 
			Объект.ЕдиницаДлительностиФакт);
			
	ИначеЕсли ЗначениеЗаполнено(Объект.ОкончаниеФакт) Тогда 		
		Объект.НачалоФакт = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			Объект.ОкончаниеФакт, 
			Объект.ДлительностьФакт, 
			Объект.ЕдиницаДлительностиФакт);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДлительностиФактПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоФакт) Тогда 
		Объект.ОкончаниеФакт = РаботаСПроектами.РассчитатьОкончаниеПериода(Объект, 
			Объект.НачалоФакт, 
			Объект.ДлительностьФакт, 
			Объект.ЕдиницаДлительностиФакт);
			
	ИначеЕсли ЗначениеЗаполнено(Объект.ОкончаниеФакт) Тогда 		
		Объект.НачалоФакт = РаботаСПроектами.РассчитатьНачалоПериода(Объект, 
			Объект.ОкончаниеФакт, 
			Объект.ДлительностьФакт, 
			Объект.ЕдиницаДлительностиФакт);
			
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВехаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
	Если Объект.Веха Тогда 
		Объект.ТекущийПланОкончание = Объект.ТекущийПланНачало;
		Объект.ТекущийПланТрудозатраты = 0;
		Объект.ТекущийПланДлительность = 0;
		
		Объект.ОкончаниеФакт = Объект.НачалоФакт;
		Объект.ДлительностьФакт = 0;
		
		Объект.ТекущийПланТрудозатраты = 0;
		Объект.Исполнители.Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	НеобходимоПересчитатьКодСДР = ПроектСсылки <> Объект.Владелец;
	
	// Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	НеобходимоПересчитатьКодСДР = РодительСсылки <> Объект.Родитель;	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура("Владелец", Объект.Владелец);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.Родитель = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиПредшественникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиПредшественникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораЗадачиПроекта(Текст, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшественникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Предшественники.ТекущиеДанные;
	Если НоваяСтрока Тогда 
		ТекущиеДанные.ТипЗависимости =
			ПредопределенноеЗначение("Перечисление.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТипПредметаПриИзменении(Элемент)
	
	Элементы.Предмет.ТолькоПросмотр = ПустаяСтрока(ТипПредмета);
	
	Если Не ЗначениеЗаполнено(Объект.Предмет) Тогда
		Объект.Предмет = Неопределено;
		Возврат;
	КонецЕсли;
	
	ИмяТипаПредмета = Строка(ТипЗнч(Объект.Предмет));
	Для Каждого ЭлементСписка Из Элементы.ТипПредмета.СписокВыбора Цикл
		Если ЭлементСписка.Значение = ТипПредмета И ЭлементСписка.Представление = ИмяТипаПредмета Тогда
			Возврат; // Предмет имеет тот же тип, что ТипПредмета - очищать не надо
		КонецЕсли;	
	КонецЦикла;	

	Объект.Предмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранныйТип = ТипПредмета;
	РаботаСФайламиКлиент.ОбъектВыборСФайлами(Элемент, ВыбранныйТип, Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаТрудозатратФактПриИзменении(Элемент)
	
	ПолучитьФактическиеТрудозатратыИсполнителей();
	
	//АбисСофт-Кострицын Олег-Старт  17 января 2014 г.
	ПолучитьПлановыеТрудозатратыПоЗаявкам();
	//АбисСофт-Кострицын Олег-Финиш  17 января 2014 г.

	Если ЗначениеЗаполнено(Объект.ЕдиницаТрудозатратФакт) Тогда 
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Факт (%1)'"),
				Строка(Объект.ЕдиницаТрудозатратФакт));
	Иначе		
		Элементы.ИсполнителиТрудозатратыФакт.Заголовок = 
			НСтр("ru = 'Факт'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланЕдиницаТрудозатратПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекущийПланЕдиницаТрудозатрат) Тогда 
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План (%1)'"),
				Строка(Объект.ТекущийПланЕдиницаТрудозатрат));
	Иначе		
		Элементы.ИсполнителиТекущийПланТрудозатраты.Заголовок = 
			НСтр("ru = 'План'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОграниченияПриИзменении(Элемент)
	
	// Доступность значения ограничения
	Если Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше")
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НеПрименять")
	 Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноПозже") Тогда 
		Элементы.ДатаОграничения.ТолькоПросмотр = Истина;
		Объект.ДатаОграничения = '00010101';
	Иначе	
		Элементы.ДатаОграничения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОграниченияПриИзменении(Элемент)
	
	Если Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НачалоНеРанее") Тогда 
		
		Если ЗначениеЗаполнено(Объект.ДатаОграничения) 
		И Объект.ДатаОграничения = НачалоДня(Объект.ДатаОграничения)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ДатаОграничения = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			Объект.ДатаОграничения);
		КонецЕсли;
		
	ИначеЕсли Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НачалоНеПозднее") 
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ОкончаниеНеПозднее")  	
		Или Объект.ТипОграничения = ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ОкончаниеНеРанее") Тогда 
		
		Если ЗначениеЗаполнено(Объект.ДатаОграничения) 
		И Объект.ДатаОграничения = НачалоДня(Объект.ДатаОграничения)
		И ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = 
			?(ЗначениеЗаполнено(Объект.ГрафикРаботы),
			Объект.ГрафикРаботы,
			ГрафикРаботыПроекта);
		Объект.ДатаОграничения = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			Объект.ДатаОграничения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////////////
// КОМАНДЫ ФОРМЫ
                  
&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ПараметрыОтчета = Неопределено;

		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект, Новый Структура("ПараметрыОповещения", ПараметрыОповещения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
	
	
	ПараметрыОтчета = Результат;
	Если ПараметрыОтчета <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеФакт) Тогда
		ДатаОтчета = Объект.ОкончаниеФакт;
		ЗадачаЗавершена = Истина;
	Иначе
		ДатаОтчета = ТекущаяДата();
		ЗадачаЗавершена = Ложь;
	КонецЕсли;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтотОбъект.Элементы.ПереключитьХронометраж,
		ЗадачаЗавершена);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоПроекту(Команда)
	Если Объект.Исполнители.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоПроектуЗавершение", ЭтотОбъект), "Перезаполнить таблицу?",РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоПроектуКоманду();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоПроектуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПроектуКоманду();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПроектуКоманду()
	Объект.Исполнители.Очистить();
	СписокИсполнителей = СформироватьДанныеВыбораИсполнителя();
	Для Каждого Участник Из СписокИсполнителей Цикл
		НовыйУчастник = Объект.Исполнители.Добавить();
		НовыйУчастник.Исполнитель = Участник.Значение.Исполнитель;
	КонецЦикла;
	ТрудозатратыФакт = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(Объект.Ссылка);
	
	ПолучитьФактическиеТрудозатратыИсполнителей();
	ПолучитьПлановыеТрудозатратыПоЗаявкам();
КонецПроцедуры
