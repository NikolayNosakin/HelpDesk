
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	
	Если ЗначениеЗаполнено(Диалог.Каталог) Тогда
		ПапкаДляЭкспорта = ФайловыеФункцииСлужебныйКлиент.НормализоватьКаталог(Диалог.Каталог);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'В Веб-клиенте выгрузка файлов в папку не поддерживается.'"));
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("СписокОбъектов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СформироватьСписокФайлов();
	ВыбраноФайлов = ПосчитатьКоличествоВыбранных(СписокФайловДляВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПосчитатьКоличествоВыбранных(Список)
	
	ВыбраноФайлов = 0;
	Для Каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Выгружать Тогда
			ВыбраноФайлов = ВыбраноФайлов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбраноФайлов;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	#Если НЕ ВебКлиент Тогда
		ОчиститьСообщения();
		Если НЕ ЗначениеЗаполнено(ПапкаДляЭкспорта) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Папка для выгрузки"" не заполнено'"),, "ПапкаДляЭкспорта");
			Возврат;
		КонецЕсли;
		// Проверим - каталог выгрузки существует?
		КаталогВыгрузки = Новый Файл(ПапкаДляЭкспорта);
		
		Если не КаталогВыгрузки.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указанная папка не найдена'"),, "ПапкаДляЭкспорта");
			Возврат;			
		КонецЕсли;
						
		// А теперь начнем выгрузку
		Успех = ОбойтиСписокФайлов(СписокФайловДляВыбора, ПапкаДляЭкспорта + "\", Истина);
		
		Если Успех Тогда		
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохранение выбранных файлов в каталог на диске ""%1"" успешно завершено!'"),
				Строка(ПапкаДляЭкспорта)));
			Предупреждение(НСтр("ru = 'Файлы успешно сохранены'"));			
			Закрыть();
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

// Функция, которая собственно и выгружает файлы на локальный диск
//
// Параметры:
//  ТаблицаФайлов - дерево значений с выгружаемыми файлами.
//  БазовыйКаталогСохранения - строка с именем папки, в которую сохраняются файлы.
//                 В ней воссоздается структура папок (как в дереве файлов)
//                 при необходимости.//
// Возвращаемое значение:
//  Истина       - можно продолжать выгрузку / выгрузка завершена успешно
//  Ложь         - действие завершено с ошибками / выгрузка завершена с ошибками
&НаКлиенте
Функция ОбойтиСписокФайлов(ТаблицаФайлов, Знач БазовыйКаталогСохранения, ЕщеНеВстретилиВыгружаемуюПапку)
	#Если НЕ ВебКлиент Тогда		
		Для Каждого ЗаписьФайла из ТаблицаФайлов Цикл
			
			Если НЕ ЗаписьФайла.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаписьФайла.ТекущаяВерсия <> NULL и ЗаписьФайла.ТекущаяВерсия.Пустая() Тогда
				// Это элемент справочника Файлы без ссылки на версию файла - пропустим
				Продолжить;
			КонецЕсли;
			
			// Сформируем путь к каталогу и пойдем дальше. Создавать каталоги будем
			БазовыйКаталогСохраненияФайла = БазовыйКаталогСохранения;
						
			// Проверим наличие базового каталога: если нет - создадим
			Папка = Новый Файл(БазовыйКаталогСохраненияФайла);
			Если Не Папка.Существует() Тогда
				Пока Истина Цикл
					Попытка
						СоздатьКаталог(БазовыйКаталогСохраненияФайла);
						Прервать;
					Исключение
						// По какой-то причине каталог не создался ...
						ИнфоОшибка = ИнформацияОбОшибке();
						
						стрТекст =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						     НСтр("ru = 'Ошибка создания папки ""%1"".
						                |Причина: %2'"),
						     БазовыйКаталогСохраненияФайла,
						     ПодробноеПредставлениеОшибки(ИнфоОшибка) );
						
						Результат = Вопрос(стрТекст, РежимДиалогаВопрос.ПрерватьПовторитьПропустить, , КодВозвратаДиалога.Повторить);
						Если Результат = КодВозвратаДиалога.Прервать Тогда
							// Просто выйдем с ошибкой
							Возврат Ложь;
						ИначеЕсли Результат = КодВозвратаДиалога.Пропустить Тогда
							// Пропустим данную ветку дерева и пойдем дальше
							Возврат Истина;
						Иначе
							// Попробуем повторить создание папки
							Продолжить;
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
						
			// Пишем файл в базовый каталог
			ИмяФайлаСРасширением = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ЗаписьФайла.ПолноеНаименование, ЗаписьФайла.Расширение);
			ПолноеИмяФайла = БазовыйКаталогСохраненияФайла + ИмяФайлаСРасширением;
			
			// Проверка возможности записи файла
			Результат = КодВозвратаДиалога.Отмена;
			Пока Истина Цикл
				ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
				Если ФайлНаДиске.Существует() и ФайлНаДиске.ЭтоКаталог() Тогда
					ТекстВопроса =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					  НСтр("ru = 'Вместо файла ""%1""  существует папка с таким же именем. Повторить экспорт этого файла?'"),
					  ПолноеИмяФайла );
					
					Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена, ,КодВозвратаДиалога.Отмена);
					
					Если Результат = КодВозвратаДиалога.Повторить Тогда
						// Повторяем попытку выгрузки
						Продолжить;
					КонецЕсли;
				Иначе
					// Файла нет - идем дальше
					Результат = КодВозвратаДиалога.Повторить;
				КонецЕсли;
				Прервать;
			КонецЦикла;
			Если Результат = КодВозвратаДиалога.Отмена Тогда
				// Игнорируем файл с именем как у папки
				Продолжить;
			КонецЕсли;
			Результат = КодВозвратаДиалога.Нет;
			
			// Если файл существует, то 
			Если ФайлНаДиске.Существует() Тогда
				Счетчик = 1;
				Пока Истина Цикл
					ИмяФайлаСРасширением = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИмяСРасширением(ЗаписьФайла.ПолноеНаименование + " (" + Строка(Счетчик) + ")", ЗаписьФайла.Расширение);	
					ПолноеИмяФайла = БазовыйКаталогСохраненияФайла + ИмяФайлаСРасширением;
					ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
					Если НЕ ФайлНаДиске.Существует() Тогда
						Прервать;
					КонецЕсли;
					Счетчик = Счетчик + 1;
				КонецЦикла;
				Результат = КодВозвратаДиалога.Да;
			Иначе
				// Файла нет, спрашивать не будем
				Результат = КодВозвратаДиалога.Да;
			КонецЕсли;
			
			// Если можно - запишем файл в файловую систему
			Если Результат = КодВозвратаДиалога.Да Тогда
				Пока Истина Цикл
					Попытка
						ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
						Если ФайлНаДиске.Существует() Тогда
							
							// Снимем флаг R|O для возможности удаления
							ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
						КонецЕсли;
						
						// Всегда удалим и потом создадим заново
						УдалитьФайлы(ПолноеИмяФайла);
						
						РазмерВМб = ЗаписьФайла.Размер / (1024 * 1024);
						
						//// Обновим индикатор прогресса
						НадписьПодробнее =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сохраняется на диск файл ""%1"" (%2 Мб)...'"),
							ФайлНаДиске.Имя,
							ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
						
						Состояние(
							,
							,
							НадписьПодробнее, 
							БиблиотекаКартинок.Информация32);
						
						// Запишем файл заново
						стрАдрес = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ЗаписьФайла.ТекущаяВерсия, УникальныйИдентификатор);
						ПолучитьФайл(стрАдрес, ПолноеИмяФайла, Ложь);
						
						// для варианта с хранением файлов на диске (на сервере) удаляем файл из временного хранилища после получения
						Если ЭтоАдресВременногоХранилища(стрАдрес) Тогда
							УдалитьИзВременногоХранилища(стрАдрес);
						КонецЕсли;
						
						ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
						
						// Сделаем файл только для чтения
						ФайлНаДиске.УстановитьТолькоЧтение(Истина);
						
						ДатаСоздаваемогоФайлаНаДиске = ЗаписьФайла.ДатаМодификацииУниверсальная;
						ОбщегоНазначенияКлиент.ПреобразоватьЗимнееВремяКТекущему(ДатаСоздаваемогоФайлаНаДиске);
						
						// Поставим время модифицикации - как в информационной базе
						ФайлНаДиске.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);
						Прервать;
					Исключение
						
						// По какой-то случилась файловая ошибка при записи файла и изменении его атрибутов ...
						ИнфоОшибка = ИнформацияОбОшибке();
						стрТекст =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						  НСтр("ru = 'Ошибка записи файла ""%1"".
						             |Причина: %2'"),
						  ПолноеИмяФайла,
						  ПодробноеПредставлениеОшибки(ИнфоОшибка) );
						
						Результат = Вопрос(стрТекст, РежимДиалогаВопрос.ПрерватьПовторитьПропустить, , КодВозвратаДиалога.Повторить);
						Если Результат = КодВозвратаДиалога.Прервать Тогда
							
							// Просто выйдем с ошибкой
							Возврат Ложь;
						ИначеЕсли Результат = КодВозвратаДиалога.Пропустить Тогда
							
							// Пропустим этот файл и пойдем дальше
							Прервать;
						Иначе
							
							// Попробуем повторить создание папки
							Продолжить;
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	#КонецЕсли
КонецФункции 

&НаСервере
Процедура СформироватьСписокФайлов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Файлы.ТекущаяВерсия,
	               |	Файлы.ПолноеНаименование КАК ПолноеНаименование,
	               |	Файлы.ТекущаяВерсия.Расширение КАК Расширение,
	               |	Файлы.ТекущаяВерсия.Размер КАК Размер,
	               |	Файлы.ТекущаяВерсия.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	               |	Файлы.Ссылка,
	               |	Файлы.ПометкаУдаления,
	               |	Файлы.ВладелецФайла КАК Папка,
	               |	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ТипВладельца,
	               |	ИСТИНА КАК Выгружать
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               |	Файлы.Ссылка В(&МассивСсылок)
	               |	И Файлы.ТекущаяВерсия <> ЗНАЧЕНИЕ(Справочник.ВерсииФайлов.ПустаяСсылка)
	               |	И Файлы.ПометкаУдаления = ЛОЖЬ";
	Если ТипЗнч(Параметры.СписокОбъектов) = Тип("СписокЗначений") Тогда				   
		МассивСсылок = Параметры.СписокОбъектов.ВыгрузитьЗначения();
		Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Иначе
		Запрос.Параметры.Вставить("МассивСсылок", Параметры.СписокОбъектов);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ЗначениеВДанныеФормы(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой), СписокФайловДляВыбора);

КонецПроцедуры

&НаКлиенте
Процедура СписокФайловДляВыбораВыгружатьПриИзменении(Элемент)
	ВыбраноФайлов = ПосчитатьКоличествоВыбранных(СписокФайловДляВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для Каждого Строка Из СписокФайловДляВыбора Цикл
		
		Строка.Выгружать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	
	Для Каждого Строка Из СписокФайловДляВыбора Цикл
		
		Строка.Выгружать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры
