
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	Если ИмяКаталога = Неопределено ИЛИ ПустаяСтрока(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СпрашиватьРежимРедактированияПриОткрытииФайла;
		Если СпрашиватьРежимРедактированияПриОткрытииФайла = Истина Тогда
			
			Результат = Неопределено;

			
			ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия",,,,,, Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, Новый Структура("ДанныеФайла", ДанныеФайла)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	СписокВыборФрагмент(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	
	
	Результат = Результат1;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	БольшеНеСпрашивать = Результат.БольшеНеСпрашивать;
	Если БольшеНеСпрашивать = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Ложь);
	КонецЕсли;
	
	КакОткрывать = Результат.КакОткрывать;
	Если КакОткрывать = 1 Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(ДанныеФайла, УникальныйИдентификатор);
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		УстановитьДоступностьФайловыхКомманд();
		Возврат;
	КонецЕсли;
	
	
	СписокВыборФрагмент(ДанныеФайла);

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборФрагмент(Знач ДанныеФайла)
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, УникальныйИдентификатор); 
	
	//СтандартнаяОбработка = Ложь;
	//РаботаСФайламиКлиент.ОткрытьФайл(
	//	РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, УникальныйИдентификатор));

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ФайлОснование = Элементы.Список.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		Попытка
			ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
			РаботаСФайламиКлиент.СозданиеНовогоФайла(ВладелецФайла.Значение, ЭтотОбъект);
		Исключение
			ПоказатьПредупреждение(Неопределено, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		
		ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла.Значение, ФайлОснование);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		Элементы.Список.Обновить();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Список.ТекущаяСтрока = Параметр;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено Тогда
			
			ВладелецФайлаСписка = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
			
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = ВладелецФайлаСписка.Значение Тогда
					Элементы.Список.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Список.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			УстановитьДоступностьФайловыхКомманд();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда 
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;	
	
	Если Параметры.Свойство("ВладелецФайла") Тогда 
		Список.Параметры.УстановитьЗначениеПараметра(
			"Владелец", Параметры.ВладелецФайла);
		КонецЕсли;	
		
	Список.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь", Пользователи.ТекущийПользователь());
		
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Список);		
	
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	Попытка
		ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
		РаботаСФайламиКлиент.СозданиеНовогоФайла(ВладелецФайла.Значение, ЭтотОбъект);
	Исключение
		ПоказатьПредупреждение(Неопределено, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
			ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор,
		Элементы.Список.ТекущиеДанные.ХранитьВерсии,
		Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Список.ТекущиеДанные.Редактирует);
		
	УстановитьДоступностьФайловыхКомманд();
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;

	КомандыРаботыСФайламиКлиент.Занять(Элементы.Список.ТекущаяСтрока);
	
	УстановитьДоступностьФайловыхКомманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОсвободитьФайл(
		Элементы.Список.ТекущаяСтрока,
		Элементы.Список.ТекущиеДанные.ХранитьВерсии,
		Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Список.ТекущиеДанные.Редактирует);
		
	УстановитьДоступностьФайловыхКомманд();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.Редактировать(Элементы.Список.ТекущаяСтрока);
	
	УстановитьДоступностьФайловыхКомманд();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОпубликоватьФайл(
		Элементы.Список.ТекущаяСтрока, 
		УникальныйИдентификатор);
	КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
	ВладелецФайлаСписка = ВладелецФайла.Значение;
	
	Если ВладелецФайлаСписка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКомманд()
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			УстановитьДоступностьКомманд(Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
				Элементы.Список.ТекущиеДанные.Редактирует);
					
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомманд(РедактируетТекущийПользователь, Редактирует)
	
	Элементы.ЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	
	Элементы.СохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	
	Элементы.Освободить.Доступность = Не Редактирует.Пустая();
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокОсвободить.Доступность = Не Редактирует.Пустая();
	
	Элементы.Занять.Доступность = Редактирует.Пустая();
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокЗанять.Доступность = Редактирует.Пустая();
	
	Элементы.Редактировать.Доступность = Истина;
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокРедактировать.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		УстановитьДоступностьФайловыхКомманд();
	КонецЕсли;	
КонецПроцедуры

// Доступны файловые команды - есть хотя бы одна строка в списке и выделена не группировка
&НаКлиенте
Функция ФайловыеКомандыДоступны()
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	#Если Не ВебКлиент Тогда
		МассивИменФайлов = ФайловыеФункцииСлужебныйКлиент.ПолучитьСписокИмпортируемыхФайлов();
		
		Если МассивИменФайлов.Количество() > 0 Тогда
			
			ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("Владелец"));
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПапкаДляДобавления", ВладелецФайла.Значение);
			ПараметрыФормы.Вставить("МассивИменФайлов",   МассивИменФайлов);
			
			ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыФормы);
		КонецЕсли;
	#Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В Веб-клиенте импорт файлов не поддерживается.
		                          |Используйте команду ""Создать"" в списке файлов.'"));
	#КонецЕсли
	
КонецПроцедуры
