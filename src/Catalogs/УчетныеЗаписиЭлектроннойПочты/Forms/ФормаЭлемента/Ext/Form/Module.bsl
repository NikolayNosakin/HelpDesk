////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ИмяПользователя = Строка(Пользователи.ТекущийПользователь());
		Объект.ВПредставлениеВключатьИмяПользователя = Истина;
	КонецЕсли;
	
	ВидимостьНастроекПочтовогоКлиента =
		Не Объект.Ссылка.Пустая()
		И Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная;
	
	Элементы.СтраницаПапки.Доступность = ВидимостьНастроекПочтовогоКлиента;
		
	ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Объект);
	УдалятьСообщенияССервера = (Объект.ПериодХраненияСообщенийНаСервере > 0);
	
	Если Объект.Ссылка.Пустая() Тогда
		Строка = Объект.ОтветственныеЗаОбработкуПисем.Добавить();
		Строка.Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная;
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	Если Объект.SMTPАутентификация <> Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Объект.ПользовательSMTP = "";
		Объект.ПарольSMTP = "";
	КонецЕсли;
	
	Если Объект.IMAPаутентификация <> Перечисления.ВариантыIMAPАутентификации.ЗадаетсяПараметрами Тогда
		Объект.ПользовательIMAP = "";
		Объект.ПарольIMAP = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	// Создание папок почты при необходимости
	Если Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Если Не ЗначениеЗаполнено(ПапкаВходящие) 
			И Не ЗначениеЗаполнено(ПапкаИсходящие) 
			И Не ЗначениеЗаполнено(ПапкаОтправленные) 
			И Не ЗначениеЗаполнено(ПапкаЧерновики) 
			И Не ЗначениеЗаполнено(ПапкаКорзина) Тогда
			
			УстановитьпривилегированныйРежим(Истина);
			
			// Создание корневой папки для учетной записи
			КорневаяПапка = Справочники.ПапкиПисем.СоздатьЭлемент();
			КорневаяПапка.ВидПапки = Перечисления.ВидыПапокПисем.Общая;
			КорневаяПапка.ВариантОтображенияКоличестваПисем =
				Справочники.ПапкиПисем.ПолучитьВариантОтображенияКоличестваПисемВПапкеПоУмолчанию(
					Перечисления.ВидыПапокПисем.Общая);
			КорневаяПапка.Наименование = Объект.Наименование;
			КорневаяПапка.Записать();
			
			// Создание предопределенных папок
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Входящие);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Исходящие);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Отправленные);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Черновики);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Корзина);
			
			УстановитьпривилегированныйРежим(Ложь);
			
			// Перечитать информацию о папках
			ПолучитьПредопределенныеПапки(Объект.Ссылка);
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СоздатьПредопределеннуюПодпапку(КорневаяПапка, ВидПапки)
	
	// Создание папки
	Папка = Справочники.ПапкиПисем.СоздатьЭлемент();
	Папка.Родитель = КорневаяПапка;
	Папка.ВидПапки = ВидПапки;
	Папка.ВариантОтображенияКоличестваПисем =
		Справочники.ПапкиПисем.ПолучитьВариантОтображенияКоличестваПисемВПапкеПоУмолчанию(ВидПапки);
	Папка.Наименование = Строка(ВидПапки);
	Папка.Записать();
	
	// Сохранение сведений о принадлежности созданной папке к учетной записи
	РегистрыСведений.ПапкиУчетныхЗаписей.УстановитьПапку(
		Объект.Ссылка,
		ВидПапки,
		Папка.Ссылка);
	
	Возврат Папка.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьПредопределенныеПапки(ТекущийОбъект);
		
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("УчетнаяЗаписьЭлектроннойПочтыСохранена", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредопределенныеПапки(ТекущийОбъект)
	
	ПапкаВходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Входящие);
	
	ПапкаИсходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Исходящие);
	
	ПапкаОтправленные = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Отправленные);
	
	ПапкаЧерновики = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Черновики);
	
	ПапкаКорзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Корзина);
	
КонецПроцедуры

&НаКлиенте
Процедура SMTPАутентификацияПриИзменении(Элемент)
	
	SMTPАутентификацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура SMTPАутентификацияПриИзмененииСервер()
	
	Если Объект.SMTPАутентификация <> Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Объект.СпособSMTPАутентификации = Неопределено;
		Объект.ПользовательSMTP = "";
		Объект.ПарольSMTP = "";
	КонецЕсли;
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляПолученияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляОтправкиПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы()
	
	Если Объект.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Элементы.ПользовательSMTP.Доступность = Истина;
		Элементы.ПарольSMTP.Доступность = Истина;
		Элементы.СпособSMTPАутентификации.Доступность = Истина;
	Иначе
		Элементы.ПользовательSMTP.Доступность = Ложь;
		Элементы.ПарольSMTP.Доступность = Ложь;
		Элементы.СпособSMTPАутентификации.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.НастройкиСервераВходящейПочты.Доступность = Объект.ИспользоватьДляПолучения;
	Элементы.НастройкиСервераИсходящейПочты.Доступность = Объект.ИспользоватьДляОтправки;
	
	Элементы.УдалятьСообщенияССервера.Доступность = Объект.ОставлятьКопииСообщенийНаСервере;
	Элементы.ОставлятьКопииСообщенийЧислоДней.Доступность =
		Объект.ОставлятьКопииСообщенийНаСервере И УдалятьСообщенияССервера;
	
	Если Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Элементы.СтраницаПапки.Доступность = Истина;
	Иначе
		Элементы.СтраницаПапки.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаIMAP.Видимость = Объект.ИспользоватьIMAP;
	Элементы.ГруппаPOP3.Видимость = Не Объект.ИспользоватьIMAP;
	
	Если Объект.IMAPаутентификация = Перечисления.ВариантыIMAPАутентификации.ЗадаетсяПараметрами Тогда
		Элементы.ПользовательIMAP.Доступность = Истина;
		Элементы.ПарольIMAP.Доступность = Истина;
	Иначе
		Элементы.ПользовательIMAP.Доступность = Ложь;
		Элементы.ПарольIMAP.Доступность = Ложь;
	КонецЕсли;

	Элементы.ГруппаТаблицыСобытий.Видимость = Объект.ИспользоватьДляОтправки;
	Элементы.РаспределительЗаявок.Видимость = Объект.ИспользоватьДляПолучения И Объект.АвтоматическиСоздаватьЗаявки;

КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	АдресИнфо = РаботаСоСтроками.РазложитьАдресЭлектроннойПочты(Объект.АдресЭлектроннойПочты);
	НастройкиПочтовогоСервера = ПолучитьПредопределенныеНастройкиПочтовогоСервера(Объект.АдресЭлектроннойПочты);
	
	Если ЗначениеЗаполнено(НастройкиПочтовогоСервера) Тогда
		Если Не ЗначениеЗаполнено(Объект.СерверВходящейПочтыPOP3)
			И НастройкиПочтовогоСервера.Свойство("СерверВходящейПочтыPOP3")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СерверВходящейПочтыPOP3) Тогда
			Объект.СерверВходящейПочтыPOP3 = НастройкиПочтовогоСервера.СерверВходящейПочтыPOP3;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СерверИсходящейПочтыSMTP)
			И НастройкиПочтовогоСервера.Свойство("СерверИсходящейПочтыSMTP")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СерверИсходящейПочтыSMTP) Тогда
			Объект.СерверИсходящейПочтыSMTP= НастройкиПочтовогоСервера.СерверИсходящейПочтыSMTP;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Пользователь)
			И НастройкиПочтовогоСервера.Свойство("Пользователь")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.Пользователь) Тогда
			Объект.Пользователь = НастройкиПочтовогоСервера.Пользователь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СпособPOP3Аутентификации)
			И НастройкиПочтовогоСервера.Свойство("СпособPOP3Аутентификации")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СпособPOP3Аутентификации) Тогда
			Объект.СпособPOP3Аутентификации = НастройкиПочтовогоСервера.СпособPOP3Аутентификации;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.SMTPАутентификация)
			И НастройкиПочтовогоСервера.Свойство("SMTPАутентификация")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.SMTPАутентификация) Тогда
			Объект.SMTPАутентификация = НастройкиПочтовогоСервера.SMTPАутентификация;
		КонецЕсли;
	Иначе
		Объект.Пользователь = АдресИнфо.Пользователь;
	КонецЕсли;
	
	Объект.Наименование = Объект.АдресЭлектроннойПочты;
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредопределенныеНастройкиПочтовогоСервера(Адрес)
	
	АдресИнфо = РаботаСоСтроками.РазложитьАдресЭлектроннойПочты(Адрес);
	
	Результат = Новый Структура;
	Если ВРег(АдресИнфо.Домен) = ВРег("mail.ru") Тогда
		Результат.Вставить("СерверВходящейПочтыPOP3", "pop.mail.ru");
		Результат.Вставить("СерверИсходящейПочтыSMTP", "smtp.mail.ru");
		Результат.Вставить("Пользователь", Адрес);
		Результат.Вставить("СпособPOP3Аутентификации", ПредопределенноеЗначение("Перечисление.СпособыPOP3Аутентификации.Обычная"));
		Результат.Вставить("SMTPАутентификация", ПредопределенноеЗначение("Перечисление.ВариантыSMTPАутентификации.АналогичноPOP3"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИмяПользователяПриИзменении(Элемент)
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВПредставлениеВключатьИмяПользователяПриИзменении(Элемент)
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	
	ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОставлятьКопииСообщенийНаСервереПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьСообщенияССервераПриИзменении(Элемент)
	
	Если Не УдалятьСообщенияССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеАдреса(Объект)
	
	Если Объект.ВПредставлениеВключатьИмяПользователя Тогда
		ПредставлениеАдреса = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(Объект.ИмяПользователя, Объект.АдресЭлектроннойПочты);
	Иначе
		ПредставлениеАдреса = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты("", Объект.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка списка Ответственных на дубли
	Для каждого	Эл Из Объект.ОтветственныеЗаОбработкуПисем Цикл
		
		Для Индекс = Эл.НомерСтроки ПО Объект.ОтветственныеЗаОбработкуПисем.Количество() - 1 Цикл
			
			Если Эл.Пользователь = Объект.ОтветственныеЗаОбработкуПисем[Индекс].Пользователь Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Ответственный указан дважды.'"),
					,
					"Объект.ОтветственныеЗаОбработкуПисем[" + Индекс + "].Пользователь",
					,
					Отказ);

				Отказ = Истина;
				
			КонецЕсли;	
					
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиСоздаватьЗаявкиПриИзменении(Элемент)
	ОбновитьСвойстваЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытийЗаявокСообщениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ОбработкаСобытийЗаявок.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РедактируемыйТекст",ТекСтрока.Сообщение);
	ПараметрыФормы.Вставить("Заголовок","Введите текст сообщения");
	ПараметрыФормы.Вставить("Описание","В тексте письма можно использовать реквизиты заявки, указывая их в тексте в формате : ##<Реквизит заявки>##
	|Для добавления текста дополнения по событию ""Добавлен ответ"" используйте предопределенный реквизит ##ОписаниеДополненияКЗаявке##
	|Для добавления текста исходного письма используйте предопределенный реквизит ##ТекстИсходногоПисьма##
	|Для добавления истории по заявке используйте предопределенный реквизит ##ИсторияПоЗаявке##
	|Для добавления ссылки на заявку используйте предопределенный реквизит ##СсылкаНаЗаявку{Представление ссылки заявки в тексте}## или ##СсылкаНаЗаявку## для стандартного представления");
	
	ФормаРедактора = ПолучитьФорму("ОбщаяФорма.ФормаРедактированияТекста",ПараметрыФормы,Элемент);
	Сообщение = ФормаРедактора.ОткрытьМодально();	
	Если Сообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока.Сообщение = Сообщение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытийЗаявокТемаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытийЗаявокСообщениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытийЗаявокТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ОбработкаСобытийЗаявок.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РедактируемыйТекст",ТекСтрока.Тема);
	ПараметрыФормы.Вставить("Заголовок","Введите текст темы");
	ПараметрыФормы.Вставить("Описание","В теме можно использовать реквизиты заявки, указывая их в тексте в формате : ##<Реквизит заявки>##"+Символы.ПС+"Для добавления темы исходного письма используйте предопределенный реквизит ##ТемаИсходногоПисьма##");
	
	ФормаРедактора = ПолучитьФорму("ОбщаяФорма.ФормаРедактированияТекста",ПараметрыФормы,Элемент);
	Тема = ФормаРедактора.ОткрытьМодально();	
	Если Тема = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока.Тема = Тема;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSSLПриИзменении(Элемент)
	Объект.ПортPOP3 = ?(Объект.ИспользоватьSSLPOP3,995,110);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSSLSMTPПриИзменении(Элемент)
	Объект.ПортSMTP = ?(Объект.ИспользоватьSSLSMTP,465,25);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьSSLIMAPПриИзменении(Элемент)
	Объект.ПортIMAP = ?(Объект.ИспользоватьSSLIMAP,993,143);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьIMAPПриИзменении(Элемент)
	ОбновитьСвойстваЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура IMAPаутентификацияПриИзменении(Элемент)
	  IMAPАутентификацияПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура IMAPАутентификацияПриИзмененииСервер()
	
	Если Объект.IMAPаутентификация <> Перечисления.ВариантыIMAPАутентификации.ЗадаетсяПараметрами Тогда
		Объект.ПользовательIMAP = "";
		Объект.ПарольIMAP = "";
	КонецЕсли;
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

