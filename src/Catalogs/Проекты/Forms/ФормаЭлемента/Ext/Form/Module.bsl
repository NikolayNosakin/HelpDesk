

////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРабочуюДату(Дата, ПутьКДанным, Начало)
	
	Если ЗначениеЗаполнено(Дата) И Дата = НачалоДня(Дата) Тогда
		
		Если ИспользоватьГрафикиРаботы Тогда 
			
			Если ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда
				ГрафикПланирования = Объект.ГрафикРаботы;
			Иначе
				ГрафикПланирования = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			КонецЕсли;
			
			Если ГрафикиРаботы.ЭтоРабочийДень(Дата, ГрафикПланирования) Тогда
				Если Начало Тогда
					Дата = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(ГрафикПланирования, Дата);
				Иначе
					Дата = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикПланирования, Дата);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Начало Тогда
				Дата = НачалоДня(Дата);
			Иначе
				Дата = КонецДня(Дата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме()
	
	Просмотр = Объект.РедактируетсяВСтороннейСистеме;
	Элементы.ТекущийПланНачало.ТолькоПросмотр = Просмотр;
	Элементы.ТекущийПланОкончание.ТолькоПросмотр = Просмотр;
	Элементы.ГрафикРаботы.ТолькоПросмотр = Просмотр;
	Элементы.ЕдиницаТрудозатратЗадач.ТолькоПросмотр = Просмотр;
	Элементы.ЕдиницаДлительностиЗадач.ТолькоПросмотр = Просмотр;
	Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Просмотр;
	Элементы.ПроектнаяКоманда.ТолькоПросмотр = Просмотр;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.ПроектнаяКоманда.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)

	ПроектнаяКоманда = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для Каждого Строка Из ПроектнаяКоманда Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Исполнитель", Строка.Исполнитель);
		СтруктураОтбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		СтруктураОтбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		
		НайденныеСтроки = Объект.ПроектнаяКоманда.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НоваяСтрока = Объект.ПроектнаяКоманда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	КоличествоСтрок = Объект.ПроектнаяКоманда.Количество();
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		Строка = Объект.ПроектнаяКоманда[КоличествоСтрок - 1 - Инд];
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Исполнитель", Строка.Исполнитель);
		СтруктураОтбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		СтруктураОтбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
			
		НайденныеСтроки = ПроектнаяКоманда.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Объект.ПроектнаяКоманда.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнфоНадписи()
	
	ОкончаниеПоДаннымЗадач = ОкончаниеПоДаннымЗадач(Объект.Ссылка);	
	Если НачалоДня(ОкончаниеПоДаннымЗадач) = НачалоДня(Объект.ТекущийПланОкончание) Тогда 
		Элементы.ОкончаниеПоДаннымЗадач.Заголовок = "";
	Иначе
		Элементы.ОкончаниеПоДаннымЗадач.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(по данным задач: %1)'"),
			Формат(ОкончаниеПоДаннымЗадач, "ДФ='дд.ММ.гггг'"));
	КонецЕсли;	
	
	ТрудозатратыПоДаннымЗадач = ТрудозатратыПоДаннымЗадач(Объект.Ссылка);
	Если ТрудозатратыПоДаннымЗадач = Объект.ТекущийПланТрудозатраты Тогда 
		Элементы.ТрудозатратыПоДаннымЗадач.Заголовок = "";
	Иначе
		Элементы.ТрудозатратыПоДаннымЗадач.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(по данным задач: %1)'"),
			Формат(ТрудозатратыПоДаннымЗадач, "ЧЦ=10; ЧДЦ=2; ЧН=0"));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОкончаниеПоДаннымЗадач(ПроектСсылка)
	
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Возврат Объект.ТекущийПланОкончание;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	(НЕ ПроектныеЗадачи.ПометкаУдаления)
		|	И ПроектныеЗадачи.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Объект.ТекущийПланОкончание;
	КонецЕсли;
	
	ДатаОкончанияПоПлану = РаботаСПроектами.ВычислитьТекущийПланОкончанияПроекта(ПроектСсылка);
	
	Возврат ДатаОкончанияПоПлану;
	
КонецФункции

&НаСервере
Функция ТрудозатратыПоДаннымЗадач(ПроектСсылка)
	
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ТекущийПланТрудозатраты) Тогда 
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	(НЕ ПроектныеЗадачи.ПометкаУдаления)
		|	И ПроектныеЗадачи.Владелец = &Владелец";
		
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;
	
	ТрудозатратыПоПлану = РаботаСПроектами.ВычислитьПлановыеТрудозатратыПроекта(ПроектСсылка);
	
	Возврат ТрудозатратыПоПлану;
	
КонецФункции


///////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	Параметры.ПисьмоОснование = Параметры.Основание;
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА 
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		ЕстьЗадачиПроекта = Не Запрос.Выполнить().Пустой();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// Установка даты начала
	ТекущаяДата = ТекущаяДата();
	Если Объект.Ссылка.Пустая() Тогда	
		
		Если ИспользоватьГрафикиРаботы Тогда 
			Объект.ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
				Объект.ГрафикРаботы,
				ТекущаяДата - Секунда(ТекущаяДата));
		Иначе
			Объект.ТекущийПланНачало = НачалоДня(ТекущаяДата);
		КонецЕсли;	
			
	КонецЕсли;	
	
	Если Объект.Состояние = Перечисления.СостоянияПроектов.Завершен Тогда
		ПроектЗавершен = Истина;	
	Иначе
		ПроектЗавершен = Ложь;
	КонецЕсли;
	НачальноеСостояние = Объект.Состояние;
		
	// Копирование
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		// Копирование задач
		Если Параметры.Свойство("КопироватьЗадачи") И Параметры.КопироватьЗадачи Тогда
			КопироватьЗадачи = Истина;
			ПроектЗначениеКопирования = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаДополнительныеРеквизиты");
		
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
	    ЭтотОбъект.Элементы.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.УказатьТрудозатраты);	
		
	ВывестиИнфоНадписи();
	
	Если Не Объект.ЗагруженИзMSProject Тогда
		Элементы.ГруппаЗагрузкаИзВнешнейСистемы.Видимость = Ложь;
	КонецЕсли;
	
	// Установка режима "Только просмотр" для проектов, которые редактируются в стороненй системе
	УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме();
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Педаховский Юрий 11,02,2014 начало
	УстановитьПараметрыДинамическогоСписка();
	// Педаховский Юрий 11,02,2014 конец

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	
	//АбисСофт-Кострицын Олег-Старт  2 июля 2014 г.
	ПосчитатьИтогиПоТаблицеКомандировки();
	//АбисСофт-Кострицын Олег-финиш  2 июля 2014 г.
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НачальноеСостояние <> Объект.Состояние 
	   И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПроектов.Завершен") 
	   И ЗначениеЗаполнено(Объект.Ссылка)
	Тогда 
		Если РаботаСПроектами.ЕстьНезавершенныеПроектныеЗадачи(Объект.Ссылка) Тогда 
			ТекстВопроса = НСтр("ru = 'В проекте имеются незавершенные проектные задачи. Вы действительно хотите отметить проект как завершенный?'");
			Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Если Результат <> КодВозвратаДиалога.Да Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
		
	НачальноеСостояние = Объект.Состояние;	
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "СозданаПроектнаяЗадача"
		ИЛИ ИмяСобытия = "ИзмененаПроектнаяЗадача")
		И Параметр.Проект = Объект.Ссылка Тогда 
		
		Прочитать();
		
	//АбисСофт-Кострицын Олег-Старт  2 июля 2014 г.
	ИначеЕсли ИмяСобытия = "ИзмененаЗаписьОКомандировке" Тогда 
	    Элементы.ТаблицаКомандировок.Обновить();
		ПосчитатьИтогиПоТаблицеКомандировки();
	//АбисСофт-Кострицын Олег-финиш  2 июля 2014 г.

	// Обработчик механизма "Свойства"
	ИначеЕсли УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	// Копирование задач
	Если КопироватьЗадачи Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПроектныеЗадачи.Ссылка КАК Ссылка,
			|	ПроектныеЗадачи.КодСДР
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &ВладелецЗадачи
			|	И ПроектныеЗадачи.ПометкаУдаления = Ложь
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("ВладелецЗадачи", ПроектЗначениеКопирования);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Запрос.Выполнить().Выбрать();
			СкопированныеЗадачи = Новый ТаблицаЗначений;
			СкопированныеЗадачи.Колонки.Добавить("Ссылка");
			СкопированныеЗадачи.Колонки.Добавить("КодСДР");
			Пока Выборка.Следующий() Цикл
				ПроектнаяЗадачаОбъект = Выборка.Ссылка;
				ПроектнаяЗадачаКопия = ПроектнаяЗадачаОбъект.Скопировать();
				ПроектнаяЗадачаКопия.Владелец = Объект.Ссылка;
				Если ЗначениеЗаполнено(ПроектнаяЗадачаКопия.Родитель) Тогда
					РодительСтрока = СкопированныеЗадачи.Найти(ПроектнаяЗадачаКопия.Родитель.КодСДР, "КодСДР");
					ПроектнаяЗадачаКопия.Родитель = РодительСтрока.Ссылка; 
				КонецЕсли;						
				ПроектнаяЗадачаКопия.Записать();
				СкопированнаяЗадача = СкопированныеЗадачи.Добавить();
				СкопированнаяЗадача.Ссылка = ПроектнаяЗадачаКопия.Ссылка;
				СкопированнаяЗадача.КодСДР = ПроектнаяЗадачаКопия.КодСДР;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СсылкаНаВнешнийФайлНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.СсылкаНаВнешнийФайл) = Тип("Строка") Тогда
		НачатьЗапускПриложения(Неопределено, Объект.СсылкаНаВнешнийФайл);
	ИначеЕсли ТипЗнч(Объект.СсылкаНаВнешнийФайл) = Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(Неопределено, Объект.СсылкаНаВнешнийФайл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеПриИзменении(Элемент)
	
	ПолучитьРабочуюДату(Объект.ТекущийПланОкончание, "Объект.ТекущийПланОкончание", Ложь);
	ВывестиИнфоНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыПриИзменении(Элемент)
	
	ВывестиИнфоНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзменении(Элемент)
	
	ПолучитьРабочуюДату(Объект.ТекущийПланНачало, "Объект.ТекущийПланНачало", Истина);
		
КонецПроцедуры


&НаКлиенте
Процедура ПроектнаяКомандаИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Элементы.ПроектнаяКоманда.ТекущиеДанные.Исполнитель,,Истина,,
	//	Элементы.ПроектнаяКоманда.ТекущиеДанные.ОсновнойОбъектАдресации, 
	//	Элементы.ПроектнаяКоманда.ТекущиеДанные.ДополнительныйОбъектАдресации,,Ложь,Ложь,Истина,Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.ПроектнаяКоманда.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.ПроектнаяКоманда.ТекущиеДанные;
	Если ТипЗнч(ТекущийДанные.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(ТекущийДанные.Исполнитель) Тогда 
		
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийДанные.Исполнитель, "ИспользуетсяСОбъектамиАдресации") Тогда  
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", 
				Новый Структура("РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
					ТекущийДанные.Исполнитель, 
					ТекущийДанные.ОсновнойОбъектАдресации, 
					ТекущийДанные.ДополнительныйОбъектАдресации), 
				ЭтотОбъект,,,, Новый ОписаниеОповещения("ПроектнаяКомандаИсполнительПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекущийДанные", ТекущийДанные)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительПриИзмененииЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	ТекущийДанные = ДополнительныеПараметры.ТекущийДанные;
	
	
	Результат = Результат1;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекущийДанные.Исполнитель = Результат.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = Результат.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = Результат.ДополнительныйОбъектАдресации;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ПроектнаяКоманда.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;	
	
КонецПроцедуры


///////////////////////////////////////
// КОМАНДЫ ФОРМЫ
                  

&НаКлиенте
Процедура ОткрытьПлан(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Для перехода к плану проект необходимо записать. Выполнить запись?'");

		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьПланЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьПланФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не Записать() Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьОповещениеПользователя(
	"Создание:", 
	ПолучитьНавигационнуюСсылку(Объект.Ссылка),
	Строка(Объект.Ссылка),
	БиблиотекаКартинок.Информация32);
	
	
	ОткрытьПланФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланФрагмент()
	
	Перем ПараметрыФормы;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ОткрытьФорму("Справочник.ПроектныеЗадачи.Форма.ФормаПланаПроекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтотОбъект.Элементы.ПереключитьХронометраж,
		ПроектЗавершен);
		
КонецПроцедуры
			
&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
				
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект, Новый Структура("ПараметрыОповещения", ПараметрыОповещения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
	
	
	ПараметрыОтчета = Результат;
	Если ПараметрыОтчета <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		// установка связей
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.ПисьмоОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзMSProject(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ОткрытьФорму("Обработка.ИмпортПроектаИзMicrosoftProject.Форма", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗагрузитьИзMSProjectЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзMSProjectЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Копировать задачи проекта %1?'"),
		Строка(Объект.Ссылка));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, КопироватьЗадачи", Объект.Ссылка, Ложь);
		ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ЗначениеКопирования, КопироватьЗадачи", Объект.Ссылка, Истина);
	ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор участников проектной команды'"));
	ПараметрыФормы.Вставить("ВыбранныеЗаголовок", НСтр("ru = 'Выбранные участники проектной команды'"));
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ТолькоПростыеРоли", Ложь);
	ПараметрыФормы.Вставить("БезВнешнихРолей", Ложь);
	ПараметрыФормы.Вставить("ПоказыватьФункции", Ложь);
	ПараметрыФормы.Вставить("ПодбиратьГруппыПользователей", Ложь);
	ПараметрыФормы.Вставить("ПоказыватьКорреспондентов", Ложь);
	ПараметрыФормы.Вставить("ПоказыватьРоли", Истина);	
	ПараметрыФормы.Вставить("ПоказыватьПользователей", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ПодборИсполнителей", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроектаПриИзменении(Элемент)
	
	ПриИзмененииВидПроекта();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПроекта()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппыПользователейПроектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)  
	
	//ТекстВопроса = "Перед созданием записи проект нужно записать.Продолжить?";
	//Если ЭтотОбъект.Модифицированность или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
	//		Отказ = Истина;
	//	КонецЕсли;	
	//	Попытка
	//		Записать();
	//	Исключение 
	//		Отказ = Истина;
	//	КонецПопытки;	
	//КонецЕсли;		

	Отказ = Не Копирование;
	
	Если НеобходимоЗаписатьОбъект() Тогда
		
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Не Копирование Тогда
		
		ФормаЗаписи = ПолучитьФорму("РегистрСведений.СоответствиеПроектовГруппПользователей.ФормаЗаписи", , Элемент);
		ФормаЗаписи.Запись.Проект = Объект.Ссылка;
		ФормаЗаписи.Открыть();
	КонецЕсли;
	
	УстановитьПараметрыДинамическогоСписка();

КонецПроцедуры

&НаКлиенте
Функция НеобходимоЗаписатьОбъект()
	
	ТекстВопроса = "Перед созданием записи проект нужно записать.Продолжить?";
	
	Результат = КодВозвратаДиалога.Да;

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Результат = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);			
	КонецЕсли;
	
	Возврат Результат = КодВозвратаДиалога.Да;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()
	
	ЗначенеиеГруппаПользователей = ГруппыПользователейПроекта.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Проект")); 
	Если ЗначенеиеГруппаПользователей = Неопределено 
		ИЛИ (ЗначенеиеГруппаПользователей.Значение <> Объект.Ссылка)
		ИЛИ (Не ЗначенеиеГруппаПользователей.Использование)Тогда
		
		ГруппыПользователейПроекта.Параметры.УстановитьЗначениеПараметра("Проект", Объект.Ссылка);
	КонецЕсли;
	
	//АбисСофт-Кострицын Олег-Старт  2 июля 2014 г.
	ЭлементыОтбора = ТаблицаКомандировок.Отбор.Элементы;
	Если ЭлементыОтбора.Количество() <> 0 Тогда
		ТекОтбор = ТаблицаКомандировок.Отбор.Элементы.Получить(0);
		Текотбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ТекОтбор.Использование = Истина;
		ТекОтбор.ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	//АбисСофт-Кострицын Олег-финиш  2 июля 2014 г.
КонецПроцедуры

&НаСервере
Процедура ПосчитатьИтогиПоТаблицеКомандировки()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомандировкиПоПроекту.Ссылка,
		|	КомандировкиПоПроекту.Владелец,
		|	КомандировкиПоПроекту.Наименование,
		|	КомандировкиПоПроекту.Сотрудник,
		|	КомандировкиПоПроекту.ДатаНачала,
		|	КомандировкиПоПроекту.ДатаОкончания,
		|	КомандировкиПоПроекту.КоличествоДней,
		|	КомандировкиПоПроекту.Цель,
		|	КомандировкиПоПроекту.План,
		|	КомандировкиПоПроекту.Проезд,
		|	КомандировкиПоПроекту.Командировочные,
		|	КомандировкиПоПроекту.ПрочиеРасходы,
		|	КомандировкиПоПроекту.Проживание
		|ИЗ
		|	Справочник.КомандировкиПоПроекту КАК КомандировкиПоПроекту
		|ГДЕ
		|	КомандировкиПоПроекту.ПометкаУдаления = ЛОЖЬ
		|	И КомандировкиПоПроекту.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ТаблКомандировок = РезультатЗапроса.Выгрузить();
	
	ИтогКомандировочные = 0;
	ИтогПроживание = 0;
	ИтогПрочиеРасходы = 0;
	ИтогПроезд = 0;
	СуммаКомандировочных = 0;
	Для Каждого Стр Из ТаблКомандировок Цикл
		ИтогКомандировочные = ИтогКомандировочные+Стр.Командировочные;
		ИтогПроживание = ИтогПроживание+Стр.Проживание;
		ИтогПрочиеРасходы = ИтогПрочиеРасходы+Стр.ПрочиеРасходы;
		ИтогПроезд = ИтогПроезд+Стр.Проезд;
		
		Если Не Стр.План Тогда
			СуммаКомандировочных = СуммаКомандировочных + Стр.Командировочные+Стр.Проживание+Стр.ПрочиеРасходы+Стр.Проезд;
		КонецЕслИ;	
	КонецЦикла;
	РассчитатьБюджетПроекта();
КонецПроцедуры

&НаКлиенте
Процедура БюджетПроектаПриИзменении(Элемент)
	РассчитатьБюджетПроекта();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентФОТПриИзменении(Элемент)
	РассчитатьБюджетПроекта();
КонецПроцедуры

&НаКлиенте
Процедура ПроцентРППриИзменении(Элемент)
	РассчитатьБюджетПроекта();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБюджет(Команда)
	РассчитатьБюджетПроекта();
КонецПроцедуры

&НаСервере
Процедура РассчитатьБюджетПроекта()
	Объект.СуммаФОТ   = (Объект.БюджетПроекта - ЭтотОбъект.СуммаКомандировочных)*(Объект.ПроцентФОТ/100); 
	Объект.СуммаФОТКРаспределению = Объект.СуммаФОТ - Объект.СуммаФОТ*(Объект.ПроцентРП/100);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Длительность / 3600) КАК Длительность,
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Проект,
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Исполнитель
		|ПОМЕСТИТЬ ПлановыеЗатратыВремени
		|ИЗ
		|	РегистрСведений.ПлановыеТрудозатратыПоЗаявкам.СрезПоследних(&ДатаСреза, Проект = &Проект) КАК ПлановыеТрудозатратыПоЗаявкамСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Проект,
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТарифыПоВидамРаботСрезПоследних.РольНаПроекте,
		|	ТарифыПоВидамРаботСрезПоследних.Проект,
		|	МАКСИМУМ(ТарифыПоВидамРаботСрезПоследних.Тариф) КАК Тариф
		|ПОМЕСТИТЬ ВыборкаТарифов
		|ИЗ
		|	РегистрСведений.ТарифыПоВидамРабот.СрезПоследних(&ДатаСреза, Проект = &Проект) КАК ТарифыПоВидамРаботСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ТарифыПоВидамРаботСрезПоследних.Проект,
		|	ТарифыПоВидамРаботСрезПоследних.РольНаПроекте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеЗатратыВремени.Длительность * ЕСТЬNULL(ВыборкаТарифов.Тариф, 0) КАК СуммаЗатрат,
		|	ПлановыеЗатратыВремени.Исполнитель
		|ИЗ
		|	ПлановыеЗатратыВремени КАК ПлановыеЗатратыВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаТарифов КАК ВыборкаТарифов
		|		ПО ПлановыеЗатратыВремени.Проект = ВыборкаТарифов.Проект
		|			И ПлановыеЗатратыВремени.Исполнитель = ВыборкаТарифов.РольНаПроекте";

	Запрос.УстановитьПараметр("ДатаСреза",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СуммаФОТНорма = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаФОТНорма = СуммаФОТНорма + ВыборкаДетальныеЗаписи.СуммаЗатрат;
	КонецЦикла;

	ЭтотОбъект.СуммаФОТНорма = СуммаФОТНорма;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияПоПроектамОбороты.Проект,
		|	СУММА(НачисленияПоПроектамОбороты.СуммаОборот) КАК СуммаЗатрат
		|ИЗ
		|	РегистрНакопления.НачисленияПоПроектам.Обороты(, &ДатаКон, , Проект = &Проект) КАК НачисленияПоПроектамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияПоПроектамОбороты.Проект";

	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Проект",Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СуммаФОТФакт = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СуммаФОТФакт = СуммаФОТФакт + ВыборкаДетальныеЗаписи.СуммаЗатрат;
	КонецЦикла;
	ЭтотОбъект.СуммаФОТФакт = СуммаФОТФакт;
	
	
	ЭтотОбъект.СуммаПремииНорма = Объект.СуммаФОТКРаспределению - СуммаФОТНорма;
	ЭтотОбъект.СуммаПремииФакт = Объект.СуммаФОТКРаспределению - СуммаФОТФакт;
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьРасходыНаКомандировку(Команда)
	ПосчитатьИтогиПоТаблицеКомандировки();
КонецПроцедуры
