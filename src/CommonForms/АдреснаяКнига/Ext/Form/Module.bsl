////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	
	Если МножественныйВыбор Тогда
		Заголовок = НСтр("ru='Подбор адресатов'");
	КонецЕсли;	
	
	Если Параметры.Свойство("ТекущийКонтакт") Тогда
		ТекущийКонтакт = Параметры.ТекущийКонтакт;
	КонецЕсли;	
	
	ЗаполнитьТаблицуПолучателей();
	УстановитьГруппуПоУмолчанию();
	
	НастроитьВидПросмотра();
	ЗаполнитьПользователей();
	ЗаполнитьМоиКонтакты();
	
	ЗаполнитьИзбранное();

	ОбновитьЗакладкуКонтактов();
	
	ЗагрузитьПозицииСписков();
	
	Если Не МножественныйВыбор Тогда
		Элементы.ГруппаПолучателиПереместить.Видимость = Ложь;
	КонецЕсли;	
	
	СохранениеВводимыхЗначений.ЗагрузитьСписокВыбора(ЭтотОбъект, "СтрокаПоиска");
	
	ЭтоФайловаяБаза = ПолучитьЭтоФайловаяБаза();
	ИспользоватьПолнотекстовыйПоиск = ПолучитьИспользоватьПолнотекстовыйПоиск();
	
	Если Не ИспользоватьПолнотекстовыйПоиск Или ЭтоФайловаяБаза Тогда
		
		Элементы.СтраницаПоиск.Видимость = Ложь;
		
	Иначе
		
		Если ЧислоОбъектовПоискаПревышаетМаксимум() Тогда
			Элементы.СтраницаПоиск.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	СписокНичегоНеНайдено.Добавить(НСтр("ru='Ничего не найдено'"));
		
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьГруппыПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПозицииВСписках();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ЧислоОбъектовПоискаПревышаетМаксимум()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимумЗаписей = 100000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.Контрагенты КАК Корреспонденты";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьИспользоватьПолнотекстовыйПоиск()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьПолнотекстовыйПоиск = Константы.ИспользоватьПолнотекстовыйПоиск.Получить();
	Возврат ИспользоватьПолнотекстовыйПоиск;
	
КонецФункции

&НаСервере
Функция ПолучитьЭтоФайловаяБаза()
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
КонецФункции

&НаСервере
Процедура НастроитьВидПросмотра()
	
	Элементы.ВидПросмотра.СписокВыбора.Очистить();
	Элементы.ВидПросмотра.СписокВыбора.Добавить(НСтр("ru = 'Списком'"));
	//Элементы.ВидПросмотра.СписокВыбора.Добавить(НСтр("ru = 'По подразделениям'"));
	Элементы.ВидПросмотра.СписокВыбора.Добавить(НСтр("ru = 'По группам пользователей'"));
	
	ВидПросмотра = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ВидПросмотра");
	Если Элементы.ВидПросмотра.СписокВыбора.НайтиПоЗначению(ВидПросмотра) = Неопределено Тогда
		ВидПросмотра = НСтр("ru = 'По группам пользователей'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователей()
	
	Если ВидПросмотра = НСтр("ru = 'По группам пользователей'") Тогда
		ЗаполнитьПользователейВГруппах();
	ИначеЕсли ВидПросмотра = НСтр("ru = 'По подразделениям'") Тогда	
		ЗаполнитьПользователейВПодразделениях();
	ИначеЕсли ВидПросмотра = НСтр("ru = 'Списком'") Тогда
		ЗаполнитьПользователейСписком();
	КонецЕсли;	
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ВидПросмотра", ВидПросмотра);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоиКонтакты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникГруппыЛичныхАдресатов.Ссылка КАК ГруппаСсылка,
		|	СправочникГруппыЛичныхАдресатов.ПометкаУдаления КАК ГруппаПометкаУдаления,
		|	СправочникГруппыЛичныхАдресатов.Предопределенный КАК ГруппаПредопределенный,
		|	СправочникГруппыЛичныхАдресатов.Наименование КАК ГруппаНаименование,
		|	ЛичныеАдресаты.Ссылка КАК ЛичныеАдресатыСсылка,
		|	ЛичныеАдресаты.ПометкаУдаления КАК ЛичныеАдресатыПометкаУдаления,
		|	ЛичныеАдресаты.Наименование КАК ЛичныеАдресатыНаименование,
		|	ЛичныеАдресаты.КонтактнаяИнформация.(
		|		Тип,
		|		АдресЭП
		|	)
		|ИЗ
		|	Справочник.ГруппыЛичныхАдресатов КАК СправочникГруппыЛичныхАдресатов
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|		ПО СправочникГруппыЛичныхАдресатов.Ссылка = ЛичныеАдресаты.Группа
		|ГДЕ
		|	ЕСТЬNULL(СправочникГруппыЛичныхАдресатов.Пользователь, ЛичныеАдресаты.Пользователь) = &Пользователь
		|	И ЕСТЬNULL(ЛичныеАдресаты.Пользователь, СправочникГруппыЛичныхАдресатов.Пользователь) = &Пользователь
		|	И ЛичныеАдресаты.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаСсылка ИЕРАРХИЯ,
		|	ЛичныеАдресатыНаименование";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	ВыборкаДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоКонтактов.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ЛичныеАдресатыНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваМоиКонтакты(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваМоиКонтакты(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	СтрокаДереваГруппы = Неопределено;
	ЭлементыДляДобавленияПользователей = КореньДерева;
	
	Если ЗначениеЗаполнено(Выборка.ГруппаСсылка) Тогда
	
		СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
		Если СтрокаДереваГруппы = Неопределено Тогда
			
			СтрокаДереваГруппы = КореньДерева.Добавить();
			ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
			
			СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
			СтрокаДереваГруппы.Группа = Выборка.ГруппаСсылка;
			СтрокаДереваГруппы.Ссылка = Выборка.ГруппаСсылка;
			СтрокаДереваГруппы.НомерКартинки = ?(Выборка.ГруппаПометкаУдаления, 2, 3);
			СтрокаДереваГруппы.Представление = СтрокаДереваГруппы.Наименование;
			
		КонецЕсли;
		
		ЭлементыДляДобавленияПользователей = СтрокаДереваГруппы.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ЛичныеАдресатыСсылка) Тогда
		
		СтрокаДереваПользователь = ЭлементыДляДобавленияПользователей.Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.ЛичныеАдресатыНаименование;
		СтрокаДереваПользователь.Группа = Выборка.ГруппаСсылка;
		СтрокаДереваПользователь.Ссылка = Выборка.ЛичныеАдресатыСсылка;
		СтрокаДереваПользователь.НомерКартинки = ?(Выборка.ЛичныеАдресатыПометкаУдаления = Истина, 0, 1);
		СтрокаДереваПользователь.ЭтоАдресат = Истина;
		
		Для Каждого СтрокаКонтактнойИнформации Из Выборка.КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				СтрокаДереваПользователь.АдресEmail = СтрокаКонтактнойИнформации.АдресЭП;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СтрокаДереваПользователь.АдресEmail) Тогда
			СтрокаДереваПользователь.НомерКартинки = 4;
		КонецЕсли;	
		
		СтрокаДереваПользователь.Представление = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Строка(СтрокаДереваПользователь.Наименование),
				СтрокаДереваПользователь.АдресEmail);
		
	КонецЕсли;	
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ЛичныеАдресатыНаименование");
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваМоиКонтакты(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейВПодразделениях()
	
	ВыборкаДерево = ПользователиСерверПовтИсп.ПолучитьПользователейВПодразделениях();
		
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Дерево;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВПодразделениях(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваПользователейВПодразделениях(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
	Если СтрокаДереваГруппы = Неопределено Тогда
		
		СтрокаДереваГруппы = КореньДерева.Добавить();
		
		ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
		
		СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
		СтрокаДереваГруппы.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваГруппы.НомерКартинки = 3;
		
	КонецЕсли;	
	
	СтрокаДереваПользователь = СтрокаДереваГруппы.ПолучитьЭлементы().Добавить();
	
	СтрокаДереваПользователь.Наименование = Выборка.ПользователиНаименование;
	СтрокаДереваПользователь.ГруппаПользователей = Выборка.ГруппаСсылка;
	СтрокаДереваПользователь.Пользователь = Выборка.ПользователиСсылка;
	СтрокаДереваПользователь.НомерКартинки = ?(Выборка.ПользователиПометкаУдаления, 0, 1);
	СтрокаДереваПользователь.ЭтоПользователь = Истина;
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВПодразделениях(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейСписком()
	
	ВыборкаТаблица = ПользователиСерверПовтИсп.ПолучитьПользователейСписком();
		
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Список;
	
	Для Каждого Выборка Из ВыборкаТаблица Цикл
		
		СтрокаДереваПользователь = КореньДерева.Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.Наименование;
		СтрокаДереваПользователь.Пользователь = Выборка.Ссылка;
		СтрокаДереваПользователь.НомерКартинки = ?(Выборка.ПометкаУдаления, 0, 1);
		СтрокаДереваПользователь.ЭтоПользователь = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейВГруппах()
	
	ВыборкаДерево = ПользователиСерверПовтИсп.ПолучитьПользователейВГруппах();
		
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Дерево;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВГруппах(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваПользователейВГруппах(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
	Если СтрокаДереваГруппы = Неопределено Тогда
		
		СтрокаДереваГруппы = КореньДерева.Добавить();
		ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
		
		СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
		СтрокаДереваГруппы.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваГруппы.НомерКартинки = ?(Выборка.ГруппаПометкаУдаления, 2, 3);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Выборка.ПользователиСсылка) Тогда
		
		СтрокаДереваПользователь = СтрокаДереваГруппы.ПолучитьЭлементы().Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.ПользователиНаименование;
		СтрокаДереваПользователь.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваПользователь.Пользователь = Выборка.ПользователиСсылка;
		СтрокаДереваПользователь.НомерКартинки = ?(Выборка.ПользователиПометкаУдаления = Истина, 0, 1);
		СтрокаДереваПользователь.ЭтоПользователь = Истина;
		
	КонецЕсли;	
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВГруппах(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПолучателей()
	
	табПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	Для Каждого ГруппаВыбранных Из Параметры.СписокВыбранных Цикл
		
		Если ГруппаВыбранных.Значение <> Неопределено Тогда
			
			Для Каждого Элемент Из ГруппаВыбранных.Значение Цикл
				
				новСтр = табПолучатели.Добавить();
				новСтр.Группа = ГруппаВыбранных.Представление;
				ЗаполнитьЗначенияСвойств(новСтр, Элемент);
				
				новСтр.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(новСтр.Адрес, новСтр.Контакт);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	табПолучатели.Сортировать("Группа");
	
	ЗначениеВРеквизитФормы(табПолучатели, "ПолучателиПисьма");
	
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиПользователей(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ПользователиАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(ТекущийПользователь);
				НоваяСтрока.Контакт = ТекущийПользователь;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуПоУмолчанию()
	
	Если Параметры.Свойство("ГруппаПоУмолчанию") Тогда
		ГруппаПоУмолчанию = Параметры.ГруппаПоУмолчанию;
	КонецЕсли;
	Если ПустаяСтрока(ГруппаПоУмолчанию) Тогда
		ГруппаПоУмолчанию = НСтр("ru = 'Кому'");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьЗакладкуКонтактов()
	
	ЧислоМоихКонтактов = Избранное.Количество();
	
	Элементы.СтраницаИзбранное.Видимость = (ЧислоМоихКонтактов > 0);
	
	Элементы.СтраницаИзбранное.Заголовок 
		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Мои контакты (%1)'"),
			ЧислоМоихКонтактов);
		
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
//КОМАНДЫ ФОРМЫ

&НаСервере
Процедура СохранитьПозицииВСписках()
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущееФизическоеЛицо", Элементы.Физлица.ТекущаяСтрока);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущийПользователь", ТекущийПользователь);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущийКорреспондент", Элементы.Корреспонденты.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПозицииСписков()
	
	СохраненноеФизическоеЛицо = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущееФизическоеЛицо");
	СохраненныйКорреспондент = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущийКорреспондент");
	СохраненныйПользователь = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущийПользователь");
	
	Если ЗначениеЗаполнено(ТекущийКонтакт) Тогда
		
		Если ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СохраненноеФизическоеЛицо = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			СохраненныйКорреспондент = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
			СохраненныйПользователь = ТекущийКонтакт;
		КонецЕсли;		
		
	КонецЕсли;	

	Элементы.Физлица.ТекущаяСтрока = СохраненноеФизическоеЛицо;
	Элементы.Корреспонденты.ТекущаяСтрока = СохраненныйКорреспондент;
	
	Если ЗначениеЗаполнено(СохраненныйКорреспондент) Тогда
		ЗаполнитьКорреспондентыАдреса(СохраненныйКорреспондент);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СохраненныйПользователь) Тогда
		
		Индекс = -1;
		НайтиВДеревеПоСсылке(ДеревоПользователей.ПолучитьЭлементы(), СохраненныйПользователь, Индекс, Истина);
		
		Если Индекс = -1 Тогда
			НайтиВДеревеПоСсылке(ДеревоПользователей.ПолучитьЭлементы(), СохраненныйПользователь, Индекс, Ложь);
		КонецЕсли;
		
		Если Индекс > -1 Тогда
			Элементы.ДеревоПользователей.ТекущаяСтрока = Индекс;
			
			ТекущийПользователь = СохраненныйПользователь;
			ПользователиАдреса.Очистить();
			ЗаполнитьАдресаПользователя(ТекущийПользователь);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НайтиВДеревеПоСсылке(КоллекцияЭлементовОдногоУровня, ИскомаяСсылка, Индекс, ПропускатьВсеПользователи)
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовОдногоУровня Цикл
		
		Если ПропускатьВсеПользователи И 
			СтрокаДерева.ГруппаПользователей = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДерева.Пользователь = ИскомаяСсылка Тогда
			Индекс = СтрокаДерева.ПолучитьИдентификатор();
		Иначе
			НайтиВДеревеПоСсылке(СтрокаДерева.ПолучитьЭлементы(), ИскомаяСсылка, Индекс, ПропускатьВсеПользователи);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Передает владельцу в качестве результата работы формы массив структур содержащих 
// адреса выбранных получателей и закрывает форму. 
//
&НаКлиенте
Процедура КомандаОКВыполнить()
	
	Если МножественныйВыбор Тогда
		
		Если ПолучателиПисьма.Количество() = 0 Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru= 'Выберите хотя бы одного получателя.'"));
			Возврат;
		КонецЕсли;
		
		Результат = Новый Массив;
		
		Для Каждого Стр Из ПолучателиПисьма Цикл
			Группа = ?(ПустаяСтрока(Стр.Группа), "Кому", Стр.Группа);
			Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", Стр.Адрес, Стр.Представление, Стр.Контакт, Группа);
			Результат.Добавить(Контакт);
		КонецЦикла;
		
		Закрыть(Результат);
		
	Иначе
		
		ВыполнитьВыборВОдиночномРежиме();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыборВОдиночномРежиме()
	
	ВозвращаемоеВыданоПредупреждение = Ложь;
	СтруктураАдресата = ПолучитьТекущегоАдресата(ВозвращаемоеВыданоПредупреждение);
	Если ТипЗнч(СтруктураАдресата) <> Тип("Структура") Тогда
		
		Если Не ВозвращаемоеВыданоПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru= 'Выберите получателя.'"));
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Группа = ГруппаПоУмолчанию;
	Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
		СтруктураАдресата.Адрес, СтруктураАдресата.Представление, СтруктураАдресата.Контакт, Группа);
	Результат.Добавить(Контакт);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзСпискаВВыбранное(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
		
		ПеренестиВыделенныеСтрокиПользователей(Элементы.ПользователиАдреса.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаИзбранное Тогда
		
		ПеренестиВыделенныеСтрокиИзбранного(Элементы.Избранное.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
		
		ПеренестиВыделенныеСтрокиКорреспондентов(Элементы.КорреспондентыАдреса.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда
		
		ПеренестиВыделенныеСтрокиФизическихЛиц(Элементы.ФизлицаАдреса.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		
		ПеренестиВыделенныеСтрокиПоиска(Элементы.ТаблицаНайденного.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда
		
		ПеренестиВыделенныеСтрокиМоихКонтактов(Элементы.МоиКонтактыАдреса.ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПросмотраПриИзменении(Элемент)
	
	ЗаполнитьПользователей();
	РазвернутьГруппыПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыПользователей()
	
	// Развернем узлы верхнего уровня
	Для Каждого СтрокаДерева Из ДеревоПользователей.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.ГруппаПользователей <> ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
			Элементы.ДеревоПользователей.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МножественныйВыбор Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
		ПеренестиВыделенныеСтрокиИзбранного(ВыделенныеСтроки);
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиИзбранного(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = Избранное.НайтиПоИдентификатору(ИдСтроки);
		
		АдресEmail = СтрокаДанных.КонтактнаяИнформация;
		Если ЗначениеЗаполнено(АдресEmail) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", АдресEmail);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = АдресEmail;
				НоваяСтрока.Представление = Строка(СтрокаДанных.Контакт);
				НоваяСтрока.Контакт = СтрокаДанных.Контакт;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВИзбранное(Контакт, КонтактнаяИнформация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КонтактыПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Контакт = Контакт;
	МенеджерЗаписи.КонтактнаяИнформация = КонтактнаяИнформация;
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	МенеджерЗаписи.Представление = ПолучитьПолноеПредставлениеАдреса(КонтактнаяИнформация, Контакт);
	
	МенеджерЗаписи.Записать(Истина);
	
	ЗаполнитьИзбранное();
	ОбновитьЗакладкуКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранноеПолучателя(Команда)
	
	Если ЭтотОбъект.ТекущийЭлемент = Элементы.ПолучателиПисьма Тогда
	
		Если Элементы.ПолучателиПисьма.ТекущиеДанные <> Неопределено Тогда
			
			ДобавитьВИзбранноеПолучателяСервер(Элементы.ПолучателиПисьма.ВыделенныеСтроки);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСТр("ru ='Для добавления в ""Мои контакты"" выберите адрес в списке выбранных адресов.'"));
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВИзбранноеПолучателяСервер(Знач ВыделенныеСтроки)
	
	Для Каждого ИдСтроки Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
	
		СтрокаДанных = ПолучателиПисьма.НайтиПоИдентификатору(ИдСтроки);
		ЗаписатьВИзбранное(СтрокаДанных.Контакт, СтрокаДанных.Адрес);
			
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВидПросмотраОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиКорреспондентов(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = КорреспондентыАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(СтрокаДанных.КонтактноеЛицо);
				НоваяСтрока.Контакт = СтрокаДанных.КонтактноеЛицо;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиФизическихЛиц(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ФизлицаАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(Элементы.Физлица.ТекущаяСтрока);
				НоваяСтрока.Контакт = Элементы.Физлица.ТекущаяСтрока;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьФизлицаАдреса(Элементы.Физлица.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизлицаАдреса(ТекущаяСтрока)
	
	ФизлицаАдреса.Очистить();
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = ФизлицаАдреса.Добавить();
		НоваяСтрока.АдресПочты = Строка.Значение;
		НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
		НоваяСтрока.НомерКартинки = 1;
			
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если МножественныйВыбор Тогда
		Если Не ДобавитьАдрес(Элементы.ФизлицаАдреса.ТекущиеДанные.АдресПочты, Элементы.Физлица.ТекущаяСтрока) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
		КонецЕсли;	
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьАдрес(АдресEmail, Контакт)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Отбор = Новый Структура();
	Отбор.Вставить("Адрес", АдресEmail);
	Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
	
	Если Строки.Количество() = 0 Тогда
	
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Адрес = АдресEmail;
		НоваяСтрока.Представление = Строка(Контакт);
		НоваяСтрока.Контакт = Контакт;
		НоваяСтрока.Группа = ГруппаПоУмолчанию;
		НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
		ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
		
		ОбновитьТекущуюСтрокуПолучателей();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ФизлицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Физлица.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиФизлицаВВыбранныеАдреса(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа);
		
	Иначе	
		
		Если МножественныйВыбор Тогда
		
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Ссылка) Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				ТекстВопроса = НСтр("ru ='Для этого физического лица не указан ни один адрес электронной почты.
					|Хотите ввести сейчас адрес электронной почты?'");
				
				Результат = Неопределено;

				
				ПоказатьВопрос(Новый ОписаниеОповещения("ФизлицаВыборЗавершение1", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
				
			КонецЕсли;	
			
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаВыборЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("ОткрытьНаЗакладкеКонтактнойИнформации", Истина);
		
		КодВозврата = Неопределено;
		
		
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ФизлицаВыборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФизлицаВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КодВозврата = Результат;
	ЗаполнитьФизлицаАдреса(Элементы.Корреспонденты.ТекущаяСтрока);

КонецПроцедуры

&НаСервере
Процедура ПеренестиФизлицаВВыбранныеАдреса(ФизлицоСсылка, ЭтоГруппа)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(ФизлицоСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			ДобавитьАдрес(ОсновнойАдрес, ФизлицоСсылка);
			
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛица.Ссылка,
			|	ФизическиеЛица.ЭтоГруппа
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", ФизлицоСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиФизлицаВВыбранныеАдреса(Строка.Ссылка, Строка.ЭтоГруппа);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеАдреса(Адрес, Вид)
	
	Представление = "";
	
	Если Строка(Вид) = "Email" ИЛИ Строка(Вид) = "E-mail" Тогда
		Представление = Адрес;
	Иначе
		Представление = Строка(Вид) + ": " + Адрес;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция ЭтоОсновнойАдрес(Вид)
	
	Если Строка(Вид) = "Email" ИЛИ Строка(Вид) = "E-mail" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПолноеПредставлениеАдреса(Адрес, Контакт)
	
	Представление = Строка(Контакт) + " <" + Строка(Адрес) + ">";
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАдресаПользователя(ТекущаяСтрока)
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = ПользователиАдреса.Добавить();
		НоваяСтрока.АдресПочты = Строка.Значение;
		НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
		НоваяСтрока.НомерКартинки = 1; // адрес
			
	КонецЦикла;	
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ЗаполнитьАдресаПользователя(ФизЛицо);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если МножественныйВыбор Тогда
		
		Если Не ДобавитьАдрес(Элементы.ПользователиАдреса.ТекущиеДанные.АдресПочты, ТекущийПользователь) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
		КонецЕсли;	
		
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
		
		Если ТекущийПользователь <> ТекущаяСтрока Тогда
			ТекущийПользователь = ТекущаяСтрока;
			ПользователиАдреса.Очистить();
			ЗаполнитьАдресаПользователя(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные.ЭтоПользователь Тогда
		ПоказатьЗначение(Неопределено, Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь);
	Иначе	
		ПоказатьЗначение(Неопределено, Элементы.ДеревоПользователей.ТекущиеДанные.ГруппаПользователей);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Корреспонденты.ТекущиеДанные <> Неопределено Тогда
	
		ТекущаяСтрока = Элементы.Корреспонденты.ТекущаяСтрока;
		
		Если ТекущийКорреспондент <> ТекущаяСтрока Тогда
			//ЗаполнитьКорреспондентыАдреса(Элементы.Корреспонденты.ТекущаяСтрока);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКорреспондентыАдреса(ТекущаяСтрока)
	
	ТекущийКорреспондент = ТекущаяСтрока;
	КорреспондентыАдреса.ПолучитьЭлементы().Очистить();
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = КорреспондентыАдреса.ПолучитьЭлементы().Добавить();
		НоваяСтрока.АдресПочты = Строка.Значение;
		НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
		НоваяСтрока.КонтактноеЛицо = ТекущийКорреспондент;
		НоваяСтрока.НомерКартинки = 1;// адрес
			
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка,
		|	КонтактныеЛица.Наименование,
		|	КонтактныеЛица.КонтактнаяИнформация.(
		|		АдресЭП,
		|		Тип,
		|		Вид
		|	)
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец";
		
	Запрос.УстановитьПараметр("Владелец", ТекущаяСтрока);	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Таблица Цикл
		
		НоваяСтрока = КорреспондентыАдреса.ПолучитьЭлементы().Добавить();
		НоваяСтрока.КонтактноеЛицо =  Строка.Ссылка;
		НоваяСтрока.КонтактноеЛицоПредставление = Строка(Строка.Ссылка);
		НоваяСтрока.НомерКартинки = 0; // контактное лицо
		НоваяСтрока.ЭтоКонтактноеЛицо = Истина;
		
		Для Каждого СтрокаАдреса Из Строка.КонтактнаяИнформация Цикл
			
			НоваяСтрокаАдреса = НоваяСтрока.ПолучитьЭлементы().Добавить();
			НоваяСтрокаАдреса.КонтактноеЛицо = Строка.Ссылка;
			НоваяСтрокаАдреса.АдресПочты = СтрокаАдреса.АдресЭП;
			НоваяСтрокаАдреса.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(СтрокаАдреса.АдресЭП, СтрокаАдреса.Вид);
			НоваяСтрокаАдреса.НомерКартинки = 1; // адрес
			
			Если ЭтоОсновнойАдрес(СтрокаАдреса.Вид) Тогда
				НоваяСтрока.ОсновнойАдрес = СтрокаАдреса.АдресЭП;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.КорреспондентыАдреса.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АдресПочты) Тогда
		
		Если МножественныйВыбор Тогда
			
			Если Не ДобавитьАдрес(ТекущиеДанные.АдресПочты, ТекущиеДанные.КонтактноеЛицо) Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
			КонецЕсли;	
			
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
		
	Иначе
		
		Если МножественныйВыбор Тогда
		
			Если ТекущиеДанные.ЭтоКонтактноеЛицо 
				И ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ОсновнойАдрес) Тогда
					
					Если Не ДобавитьАдрес(ТекущиеДанные.ОсновнойАдрес, ТекущиеДанные.КонтактноеЛицо) Тогда
						ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
					КонецЕсли;	
					
				Иначе
					
					ТекстВопроса = НСтр("ru ='Для этого контактного лица не указан ни один адрес электронной почты.
					|Хотите ввести сейчас адрес электронной почты?'");
					
					Результат = Неопределено;

					
					ПоказатьВопрос(Новый ОписаниеОповещения("КорреспондентыАдресаВыборЗавершение1", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
					
				КонецЕсли;
				
				
			КонецЕсли;	
		
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаВыборЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.КонтактноеЛицо);
		ПараметрыФормы.Вставить("ОткрытьНаЗакладкеКонтактнойИнформации", Истина);
		
		КодВозврата = Неопределено;
		
		
		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("КорреспондентыАдресаВыборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КодВозврата = Результат;
	ЗаполнитьКорреспондентыАдреса(Элементы.Корреспонденты.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзВыбранного(Команда)
	
	Если Элементы.ПолучателиПисьма.ТекущаяСтрока <> Неопределено Тогда
		
		Для Каждого ИдСтроки Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
			Строка = ПолучателиПисьма.НайтиПоИдентификатору(ИдСтроки);
			ПолучателиПисьма.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПослеУдаления(Элемент)
	
	ОбновитьЗакладкуКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ЗначениеЗаполнено(Элементы.КорреспондентыАдреса.ТекущиеДанные.АдресПочты) 
		И ЗначениеЗаполнено(Элементы.КорреспондентыАдреса.ТекущиеДанные.КонтактноеЛицо) Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.КорреспондентыАдреса.ТекущиеДанные.КонтактноеЛицо);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Элементы.Корреспонденты.ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Корреспонденты.ТекущиеДанные.Ссылка);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдреса(ТекущаяСтрока, ПолучатьФизЛицо = Истина)
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	МассивКонтактов = Новый Массив;	
	
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		ОписаниеКонтакта = Новый Структура("Значение, Вид", 
			Строка.Значение, Строка.Вид);
		МассивКонтактов.Добавить(ОписаниеКонтакта);
		
	КонецЦикла;	
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") И ПолучатьФизЛицо Тогда
		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			МассивФизлица = ПолучитьАдреса(ФизЛицо);
			Для Каждого Строка Из МассивФизлица Цикл
				МассивКонтактов.Добавить(Строка);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат МассивКонтактов;	
		
КонецФункции		

&НаСервере
Функция ПолучитьОсновнойАдрес(Пользователь)
	
	ТаблицаКонтактов = ПолучитьАдреса(Пользователь);
	
	Если ТаблицаКонтактов.Количество() <> 0 Тогда
		
		ОсновнойАдрес = "";
		
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			
			Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
				ОсновнойАдрес = Строка.Значение;
				Прервать;
			КонецЕсли;	
				
		КонецЦикла;	
		
		// Если основной адрес не заполнен, берем первый.
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
		КонецЕсли;	
		
		Возврат ОсновнойАдрес;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции		

&НаКлиенте
Процедура КорреспондентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиКорреспондентовВВыбранныеАдреса(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа);
		
	Иначе	
		
		Если МножественныйВыбор Тогда
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Ссылка) Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				ТекстВопроса = НСтр("ru ='Для этого корреспондента не указан ни один адрес электронной почты.
					|Хотите ввести сейчас адрес электронной почты?'");
				
				Результат = Неопределено;

				
				ПоказатьВопрос(Новый ОписаниеОповещения("КорреспондентыВыборЗавершение1", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
				
			КонецЕсли;	
			
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыВыборЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("ОткрытьНаЗакладкеКонтактнойИнформации", Истина);
		
		КодВозврата = Неопределено;
		
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("КорреспондентыВыборЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КодВозврата = Результат;
	ЗаполнитьКорреспондентыАдреса(Элементы.Корреспонденты.ТекущаяСтрока);

КонецПроцедуры

&НаСервере
Процедура ПеренестиКорреспондентовВВыбранныеАдреса(КорреспондентСсылка, ЭтоГруппа)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(КорреспондентСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, КорреспондентСсылка);
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Корреспонденты.Ссылка,
			|	Корреспонденты.ЭтоГруппа
			|ИЗ
			|	Справочник.Контрагенты КАК Корреспонденты
			|ГДЕ
			|	Корреспонденты.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", КорреспондентСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиКорреспондентовВВыбранныеАдреса(Строка.Ссылка, Строка.ЭтоГруппа);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДеревоПользователейВыполнитьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыполнитьВыбор()
	
	ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если МножественныйВыбор Тогда
	
		Если ТекущиеДанные.ЭтоПользователь Тогда
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Пользователь);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Пользователь) Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				Текст = НСтр("ru ='Для этого пользователя не указан ни один адрес электронной почты. 
					|Указать адрес может только сам пользователь или администратор.'");
				
				ПоказатьПредупреждение(Неопределено, Текст);
				
			КонецЕсли;
			
		Иначе // группа пользователей или отдел
			
			ПеренестиВВыбранныеАдреса(Элементы.ДеревоПользователей.ТекущаяСтрока);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоПользователь Тогда
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдреса(ИдСтроки)
	
	СтрокаДерева = ДеревоПользователей.НайтиПоИдентификатору(Элементы.ДеревоПользователей.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(СтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(СтрокаДерева)
	
	Если СтрокаДерева.ЭтоПользователь Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Пользователь);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, СтрокаДерева.Пользователь);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(ЭлементДерева);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьИзбранное()
	
	Избранное.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактыПользователей.Контакт,
		|	КонтактыПользователей.Представление,
		|	КонтактыПользователей.КонтактнаяИнформация
		|ИЗ
		|	РегистрСведений.КонтактыПользователей КАК КонтактыПользователей
		|ГДЕ
		|	КонтактыПользователей.Пользователь = &Пользователь
		|	И КонтактыПользователей.Тип = &Тип";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Таблица Цикл
		
		НоваяСтрока = Избранное.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.НомерКартинки = 1;
		
	КонецЦикла;	
	
КонецПроцедуры


&НаКлиенте
Процедура ИзбранноеПередУдалением(Элемент, Отказ)
	
	Если Вопрос(НСтр("ru = 'Удалить из списка выделенные контакты?'"), РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	УдалитьИзбранное();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзбранное()
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.КонтактыПользователей.СоздатьНаборЗаписей();
	
	Если Элементы.Избранное.ТекущаяСтрока <> Неопределено Тогда
		
		Для Каждого ИдСтроки Из Элементы.Избранное.ВыделенныеСтроки Цикл
			
			Строка = Избранное.НайтиПоИдентификатору(ИдСтроки);
			
			НаборЗаписей.Отбор.Контакт.Установить(Строка.Контакт);
			НаборЗаписей.Отбор.КонтактнаяИнформация.Установить(Строка.КонтактнаяИнформация);
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
			НаборЗаписей.Записать();
			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПеретаскиваниеДобавитьАдреса(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ПеретаскиваниеДобавитьАдреса(ПараметрыПеретаскиванияЗначение)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");
	
	Для Каждого СтрокаДанных Из ПараметрыПеретаскиванияЗначение Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Адрес", СтрокаДанных.Адрес);
		Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
		
		Если Строки.Количество() = 0 Тогда
		
			НоваяСтрока = Результат.Добавить();
			
			НоваяСтрока.Адрес = СтрокаДанных.Адрес;
			НоваяСтрока.Представление = Строка(СтрокаДанных.Контакт);
			НоваяСтрока.Контакт = СтрокаДанных.Контакт;
			
			НоваяСтрока.Группа = ГруппаПоУмолчанию;
			НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.КонтактнаяИнформация) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			Элемент.ТекущиеДанные.Контакт, Элемент.ТекущиеДанные.КонтактнаяИнформация);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			ТекущийПользователь, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			ТекущийКорреспондент, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			Элементы.Физлица.ТекущаяСтрока, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоПользователь Тогда
		
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Пользователь);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Пользователь, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;
		
	Иначе // группа пользователей или отдел
		
		ДобавитьАдресаВПараметрыПеретаскивания(Элементы.ДеревоПользователей.ТекущаяСтрока, ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаВПараметрыПеретаскивания(ИдСтроки, ПараметрыПеретаскиванияЗначение)
	
	СтрокаДерева = ДеревоПользователей.НайтиПоИдентификатору(Элементы.ДеревоПользователей.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьАдресаВПараметрыПеретаскиванияВсехПользователейВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаВПараметрыПеретаскиванияВсехПользователейВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение)
	
	Если СтрокаДерева.ЭтоПользователь Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Пользователь);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Данные = Новый Структура("Контакт, Адрес",
				СтрокаДерева.Пользователь, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ДобавитьАдресаВПараметрыПеретаскиванияВсехПользователейВГруппе(ЭлементДерева, ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура КорреспондентыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиКорреспондентовВПараметрыПеретаскивания(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа,
			ПараметрыПеретаскивания.Значение);
		
	Иначе	
		
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиКорреспондентовВПараметрыПеретаскивания(КорреспондентСсылка, ЭтоГруппа, ПараметрыПеретаскиванияЗначение)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(КорреспондентСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			Данные = Новый Структура("Контакт, Адрес",
				КорреспондентСсылка, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
			
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Корреспонденты.Ссылка,
			|	Корреспонденты.ЭтоГруппа
			|ИЗ
			|	Справочник.Контрагенты КАК Корреспонденты
			|ГДЕ
			|	Корреспонденты.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", КорреспондентСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиКорреспондентовВПараметрыПеретаскивания(Строка.Ссылка, Строка.ЭтоГруппа,
				ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	ТекущиеДанные = Элементы.Физлица.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиФизлицаВПараметрыПеретаскивания(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа,
			ПараметрыПеретаскивания.Значение);
		
	Иначе	
	
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиФизлицаВПараметрыПеретаскивания(ФизлицоСсылка, ЭтоГруппа, ПараметрыПеретаскиванияЗначение)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(ФизлицоСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			Данные = Новый Структура("Контакт, Адрес",
				ФизлицоСсылка, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
			
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛица.Ссылка,
			|	ФизическиеЛица.ЭтоГруппа
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", ФизлицоСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиФизлицаВПараметрыПеретаскивания(Строка.Ссылка, Строка.ЭтоГруппа,
				ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВыбранныеАдресаПодпись(Форма)
	
	ЧислоПолучателей = Форма.ПолучателиПисьма.Количество();
	
	Если ЧислоПолучателей = 0 Тогда
		Форма.Элементы.ДекорацияВыбранныеАдреса.Заголовок = НСтр("ru ='Выбранные адресаты:'");
	Иначе
		Форма.Элементы.ДекорацияВыбранныеАдреса.Заголовок 
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Выбранные адресаты (%1):'"),
				ЧислоПолучателей);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПослеУдаления(Элемент)
	
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущегоАдресата(ВозвращаемоеВыданоПредупреждение)
	
	ВозвращаемоеВыданоПредупреждение = Ложь;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаИзбранное Тогда
		
		ТекущиеДанные = Элементы.Избранное.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				ТекущиеДанные.КонтактнаяИнформация, ТекущиеДанные.Представление, ТекущиеДанные.Контакт);
			Возврат Контакт;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда	
		
		Если ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоПользователей Тогда
		
			ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				
				ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Пользователь);
				
				Если ТаблицаКонтактов.Количество() <> 0 Тогда
					
					ОсновнойАдрес = "";
					
					Для Каждого Строка Из ТаблицаКонтактов Цикл
						
						Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
							ОсновнойАдрес = Строка.Значение;
							Прервать;
						КонецЕсли;	
							
					КонецЦикла;	
					
					// Если основной адрес не заполнен, берем первый.
					Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
						ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
					КонецЕсли;	
					
					Контакт = Новый Структура("Адрес, Представление, Контакт", 
						ОсновнойАдрес, Строка(ТекущиеДанные.Пользователь), ТекущиеДанные.Пользователь);
					Возврат Контакт;
					
				Иначе
					
					Текст = НСтр("ru ='Для этого пользователя не указан ни один адрес электронной почты. 
						|Указать адрес может только сам пользователь или администратор.'");
					
					Предупреждение(Текст);
					ВозвращаемоеВыданоПредупреждение = Истина;
					Возврат Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				Элементы.ПользователиАдреса.ТекущиеДанные.АдресПочты, 
				Строка(ТекущийПользователь), ТекущийПользователь);
			Возврат Контакт;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда	
		
		Если ЭтотОбъект.ТекущийЭлемент = Элементы.Корреспонденты Тогда
			
			ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ОсновнойАдрес, 
					Строка(ТекущиеДанные.Ссылка), ТекущиеДанные.Ссылка);
				Возврат Контакт;
				
			Иначе
				
				Текст = НСтр("ru ='Для этого корреспондента не указан ни один адрес электронной почты.'");
				Предупреждение(Текст);
				ВозвращаемоеВыданоПредупреждение = Истина;
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ТекущиеДанные = Элементы.КорреспондентыАдреса.ТекущиеДанные;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.АдресПочты) Тогда
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ТекущиеДанные.АдресПочты, 
					Строка(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо);
				Возврат Контакт;
				
			Иначе
				
				Если ТекущиеДанные.ЭтоКонтактноеЛицо 
					И ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда
					
					Если ЗначениеЗаполнено(ТекущиеДанные.ОсновнойАдрес) Тогда
						
						Контакт = Новый Структура("Адрес, Представление, Контакт", 
							ТекущиеДанные.ОсновнойАдрес, 
							Строка(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо);
						Возврат Контакт;
						
					Иначе
						
						Текст = НСтр("ru ='Для этого контактного лица не указан ни один адрес электронной почты.'");
						
						Предупреждение(Текст);
						ВозвращаемоеВыданоПредупреждение = Истина;
						Возврат Неопределено;
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда	
		
		Если ЭтотОбъект.ТекущийЭлемент = Элементы.Физлица Тогда
			
			ТекущиеДанные = Элементы.Физлица.ТекущиеДанные;
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ОсновнойАдрес, 
					Строка(ТекущиеДанные.Ссылка), ТекущиеДанные.Ссылка);
				Возврат Контакт;

			Иначе
				
				Текст = НСтр("ru ='Для этого физического лица не указан ни один адрес электронной почты.'");
				Предупреждение(Текст);
				ВозвращаемоеВыданоПредупреждение = Истина;
				Возврат Неопределено;
				
			КонецЕсли;	
			
		Иначе	
			
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				Элементы.ФизлицаАдреса.ТекущиеДанные.АдресПочты, 
				Строка(Элементы.Физлица.ТекущаяСтрока), Элементы.Физлица.ТекущаяСтрока);
			Возврат Контакт;
			
		КонецЕсли;		
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		
		ТекущиеДанные = Элементы.ТаблицаНайденного.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				ТекущиеДанные.Адрес, ТекущиеДанные.Представление, ТекущиеДанные.Контакт);
			Возврат Контакт;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда	
		
		Если ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоКонтактов Тогда
		
			ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				
				ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
				
				Если ТаблицаКонтактов.Количество() <> 0 Тогда
					
					ОсновнойАдрес = "";
					
					Для Каждого Строка Из ТаблицаКонтактов Цикл
						
						Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
							ОсновнойАдрес = Строка.Значение;
							Прервать;
						КонецЕсли;	
							
					КонецЦикла;	
					
					// Если основной адрес не заполнен, берем первый.
					Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
						ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
					КонецЕсли;	
					
					Контакт = Новый Структура("Адрес, Представление, Контакт", 
						ОсновнойАдрес, Строка(ТекущиеДанные.Ссылка), ТекущиеДанные.Ссылка);
					Возврат Контакт;
					
				Иначе
					
					Текст = НСтр("ru ='Для этого личного адресата не указан ни один адрес электронной почты.'");
					
					Предупреждение(Текст);
					ВозвращаемоеВыданоПредупреждение = Истина;
					Возврат Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				Элементы.МоиКонтактыАдреса.ТекущиеДанные.АдресПочты, 
				Строка(ТекущийЛичныйАдресат), ТекущийЛичныйАдресат);
			Возврат Контакт;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура НайтиАдресатов(Команда)
	
	НайтиАдресатовКлиент();	
			
КонецПроцедуры

&НаКлиенте
Процедура НайтиАдресатовКлиент()
	
	Попытка
		
		Если СтрДлина(СтрокаПоиска) < 2 Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Строка поиска должна быть не менее двух знаков.'"));
			Возврат;
		КонецЕсли;
		
		ТаблицаНайденного.Очистить();
		
		НайтиНаСервере();
		
		Если СлишкомМногоРезультатов Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Полнотекстовый поиск не может быть выполнен. Найдено слишком много результатов, уточните запрос.'"));
			Возврат;
		КонецЕсли;
		
		Если ПолноеКоличество > 50 Тогда
			Предупреждение(НСтр("ru = 'Найдено более 50 адресатов. Уточните поисковое выражение и повторите поиск.'"));
		КонецЕсли;
		
		Если ТаблицаНайденного.Количество() <> 0 Тогда
			СохранениеВводимыхЗначенийКлиент.ОбновитьСписокВыбора(ЭтотОбъект, "СтрокаПоиска");
		КонецЕсли;	
		
	Исключение
		ПоказатьПредупреждение(Неопределено,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки	
			
КонецПроцедуры

&НаСервере
Процедура НайтиНаСервере()
	
	ТекущаяСтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	Если Не ПолнотекстовыйПоискКлиентСервер.СтрокаПоискаСодержитСпецСимволы(СтрокаПоиска) Тогда
		ТекущаяСтрокаПоиска = ТекущаяСтрокаПоиска + "*";
	КонецЕсли;	
	
	РезультатовНаСтранице = 50;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(ТекущаяСтрокаПоиска, РезультатовНаСтранице);
	
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Справочники.Контрагенты);
	ОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛица);
	ОбластьПоиска.Добавить(Метаданные.Справочники.Пользователи);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ФизическиеЛица);
	
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	СписокПоиска.ПолучатьОписание = Ложь;
	
	ВремяНачалаПоиска = ТекущаяДата();
	
	СписокПоиска.ПерваяЧасть();
	
	СлишкомМногоРезультатов = СписокПоиска.СлишкомМногоРезультатов();
	КоличествоРезультатов = СписокПоиска.Количество();
	ПолноеКоличество = СписокПоиска.ПолноеКоличество();
	
	Для каждого Результат Из СписокПоиска Цикл
		
		ТаблицаКонтактов = ПолучитьАдреса(Результат.Значение, Ложь);
		
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			
			Если ЗначениеЗаполнено(Результат.Значение) Тогда // адрес email заполнен
				
				НоваяСтрока = ТаблицаНайденного.Добавить();
				НоваяСтрока.Контакт = Результат.Значение;
				НоваяСтрока.Адрес = Строка.Значение;
				НоваяСтрока.Представление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЦикла;
	
	Если ТаблицаНайденного.Количество() = 0 Тогда
		Элементы.СтраницыНайденного.ТекущаяСтраница = Элементы.СтраницаНичегоНеНайдено;
	Иначе	
		Элементы.СтраницыНайденного.ТекущаяСтраница = Элементы.СтраницаСписокНайденного;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоиска = ВыбранноеЗначение;
	НайтиАдресатовКлиент();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МножественныйВыбор Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
		ПеренестиВыделенныеСтрокиПоиска(ВыделенныеСтроки);
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиПоиска(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ТаблицаНайденного.НайтиПоИдентификатору(ИдСтроки);
		
		АдресEmail = СтрокаДанных.Адрес;
		Если ЗначениеЗаполнено(АдресEmail) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", АдресEmail);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = АдресEmail;
				НоваяСтрока.Представление = Строка(СтрокаДанных.Контакт);
				НоваяСтрока.Контакт = СтрокаДанных.Контакт;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюСтрокуПолучателей()
	
	Если ПолучателиПисьма.Количество() <> 0 Тогда
		ИдентификаторПоследнейДобавленнойСтроки = ПолучателиПисьма[ПолучателиПисьма.Количество() - 1].ПолучитьИдентификатор();
		Элементы.ПолучателиПисьма.ТекущаяСтрока = ИдентификаторПоследнейДобавленнойСтроки;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	НайтиАдресатовКлиент();	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контакт) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			Элемент.ТекущиеДанные.Контакт, Элемент.ТекущиеДанные.Адрес);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контакт) Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если МножественныйВыбор Тогда
	
		Если ТекущиеДанные.ЭтоАдресат Тогда
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Ссылка) Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru='Личный адресат с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				Текст = НСтр("ru ='Для этого личного адресата не указан ни один адрес электронной почты.'");
				
				ПоказатьПредупреждение(Неопределено, Текст);
				
			КонецЕсли;
			
		Иначе // группа личных адресатов
			
			ПеренестиВВыбранныеАдресаЛичныхАдресатов(Элементы.ДеревоКонтактов.ТекущаяСтрока);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоАдресат Тогда
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаЛичныхАдресатов(ИдСтроки)
	
	СтрокаДерева = ДеревоКонтактов.НайтиПоИдентификатору(Элементы.ДеревоКонтактов.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВВыбранныеАдресаВсехЛичныхАдресатовВГруппе(СтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаВсехЛичныхАдресатовВГруппе(СтрокаДерева)
	
	Если СтрокаДерева.ЭтоАдресат Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Ссылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, СтрокаДерева.Ссылка);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПеренестиВВыбранныеАдресаВсехЛичныхАдресатовВГруппе(ЭлементДерева);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
	
		ТекущаяСтрока = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
		
		Если ТекущийЛичныйАдресат <> ТекущаяСтрока Тогда
			ЗаполнитьМоиКонтактыАдреса(ТекущаяСтрока);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоиКонтактыАдреса(ТекущаяСтрока)
	
	ТекущийЛичныйАдресат = ТекущаяСтрока;
	
	МоиКонтактыАдреса.Очистить();
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = МоиКонтактыАдреса.Добавить();
		
		НоваяСтрока.АдресПочты = Строка.Значение;
		НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
		НоваяСтрока.НомерКартинки = 1;
			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиМоихКонтактов(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = МоиКонтактыАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(ТекущийЛичныйАдресат);
				НоваяСтрока.Контакт = ТекущийЛичныйАдресат;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ОбновитьВыбранныеАдресаПодпись(ЭтотОбъект);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если МножественныйВыбор Тогда
		
		Если Не ДобавитьАдрес(Элементы.МоиКонтактыАдреса.ТекущиеДанные.АдресПочты, ТекущийЛичныйАдресат) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Личный адресат с таким адресом почты уже выбран.'"));
		КонецЕсли;	
		
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			ТекущийЛичныйАдресат, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоАдресат Тогда
		
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;
		
	Иначе // группа пользователей или отдел
		
		ДобавитьАдресаКонтактовВПараметрыПеретаскивания(Элементы.ДеревоКонтактов.ТекущаяСтрока, ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаКонтактовВПараметрыПеретаскивания(ИдСтроки, ПараметрыПеретаскиванияЗначение)
	
	СтрокаДерева = ДеревоКонтактов.НайтиПоИдентификатору(Элементы.ДеревоКонтактов.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьАдресаКонтактовВПараметрыПеретаскиванияВсехКонтактовВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаКонтактовВПараметрыПеретаскиванияВсехКонтактовВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение)
	
	Если СтрокаДерева.ЭтоАдресат Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Ссылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Данные = Новый Структура("Контакт, Адрес",
				СтрокаДерева.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ДобавитьАдресаКонтактовВПараметрыПеретаскиванияВсехКонтактовВГруппе(ЭлементДерева, ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(Неопределено, Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			
			Пометка = Ложь;
			
			Если Пометка Тогда 
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Cнять с ""%1"" пометку на удаление?'"),
					Строка(Элемент.ТекущиеДанные.Наименование));
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пометить ""%1"" на удаление?'"),
					Строка(Элемент.ТекущиеДанные.Наименование));
			КонецЕсли;	
			
			Результат = Неопределено;
	
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоКонтактовПередУдалениемЗавершение2", ЭтотОбъект, Новый Структура("Пометка, Элемент", Пометка, Элемент)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ПометкаУдаления = Ложь;
		
		Если ПометкаУдаления Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоКонтактовПередУдалениемЗавершение1", ЭтотОбъект, Новый Структура("ПометкаУдаления, Режим, Элемент", ПометкаУдаления, Режим, Элемент)), НСтр("ru = 'Пометить выделенные элементы на удаление?'"), Режим);
            Возврат;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоКонтактовПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ПометкаУдаления, Элемент", ПометкаУдаления, Элемент)), НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'"), Режим);
            Возврат;
		КонецЕсли;
		
		ДеревоКонтактовПередУдалениемФрагмент1(ПометкаУдаления, Элемент);


		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Пометка = ДополнительныеПараметры.Пометка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Результат = РезультатВопроса;
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	
	ПометитьНаУдаление(Элемент.ТекущиеДанные.Ссылка, Не Пометка);
	
	ЗаполнитьМоиКонтакты();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
	Режим = ДополнительныеПараметры.Режим;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКонтактовПередУдалениемФрагмент1(ПометкаУдаления, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемФрагмент1(ПометкаУдаления, Знач Элемент)
	
	ДеревоКонтактовПередУдалениемФрагмент(ПометкаУдаления, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПометкаУдаления = ДополнительныеПараметры.ПометкаУдаления;
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоКонтактовПередУдалениемФрагмент(ПометкаУдаления, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемФрагмент(ПометкаУдаления, Знач Элемент)
	
	ПометитьНаУдалениеСтроки(Элемент.ВыделенныеСтроки, ПометкаУдаления);
	ЗаполнитьМоиКонтакты();

КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдаление(Ссылка, Пометка)
	
	ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
	СправочникОбъект = Ссылка.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Пометка, Истина);
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеСтроки(Знач МассивСтрок, Пометка)
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицыКонтакт = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаТаблицы);
		ПометитьНаУдаление(СтрокаТаблицыКонтакт.Ссылка, Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзOutlook(Команда)
	
	Состояние(НСтр("ru='Выполняется загрузка из адресной книги Outlook. Пожалуйста подождите...'"));
	
	МассивКонтактов = РаботаСЛичнымиАдресатамиКлиент.ЗагрузитьКонтактыИзOutlook();

	ЧислоЗагруженных = РаботаСЛичнымиАдресатами.ЗаписатьКонтакты(МассивКонтактов);
	ЗаполнитьМоиКонтакты();
	
	Состояние();
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Загрузка из адресной книги Outlook завершена. Загружено: %1.'"), 
		Формат(ЧислоЗагруженных, "ЧН=0"));
	ПоказатьПредупреждение(Неопределено, СтрокаСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

