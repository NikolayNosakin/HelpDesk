////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеОбластиЧтения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтотОбъект.ИмяФормы,
		"ПоложениеОбластиЧтения",
		"Отключена");
	
	ОбновитьПоложениеОбластиЧтенияСервер();
	
	ОтображатьУдаленные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтотОбъект.ИмяФормы,
		"ОтображатьУдаленные",
		Ложь);
	
	ОтображатьУдаленныеСервер();
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	
	УстановитьРежимПросмотраПапок();
	ЗаполнитьДеревоПапок();
	
	ЭтоФайловаяБаза = ПолучитьЭтоФайловаяБаза();
	Если ЭтоФайловаяБаза Тогда
		Элементы.ОтправитьИПолучитьПисьма.Видимость = Истина;
		Элементы.Обновить.Видимость = Ложь;
	Иначе
		Элементы.ОтправитьИПолучитьПисьма.Видимость = Ложь;
		Элементы.Обновить.Видимость = Истина;
	КонецЕсли;
	
	СостояниеДереваПапок = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтотОбъект.ИмяФормы, "СостояниеДерева", Неопределено);
	Если ЗначениеЗаполнено(СостояниеДереваПапок)
		И СостояниеДереваПапок.Свойство("ТекСсылка")
		И ЗначениеЗаполнено(СостояниеДереваПапок.ТекСсылка) Тогда
		УстановитьОтборПоПапкеСервер(СостояниеДереваПапок.ТекСсылка);
	КонецЕсли;
	
	ТекущееПисьмо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтотОбъект.ИмяФормы, "ТекущееПисьмо", Неопределено);
	Если ЗначениеЗаполнено(ТекущееПисьмо) И ВстроеннаяПочтаСервер.ПисьмоДоступно(ТекущееПисьмо) Тогда
		Предпросмотр = ВстроеннаяПочтаСервер.СформироватьТекстHTMLДляПисьма(
			ТекущееПисьмо,
			УникальныйИдентификатор);
		УстановитьВидимостьДоступностьКоманд(ТекущееПисьмо, Элементы);
		
		ОбработатьТекстHTMLСервер(Предпросмотр);
	КонецЕсли;
	
	НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТекстHTMLСервер(ТекстHTML)
	СимвНачала = СтрНайти(ТекстHTML,"##<");
	Если СимвНачала <> 0 Тогда
		СимвКонца = СтрНайти(ТекстHTML,">##",НаправлениеПоиска.СНачала,СимвНачала);
		АдресТаблицыВложений = Сред(ТекстHTML,СимвНачала+3,СимвКонца-СимвНачала-3);
		ТекстПисьма = СтрЗаменить(ТекстHTML,"##<"+АдресТаблицыВложений+">##","");
		
		Если ЭтоАдресВременногоХранилища(АдресТаблицыВложений) Тогда
			ДанныеТаблицаВложений = ПолучитьИзВременногоХранилища(АдресТаблицыВложений);
			
			Если ТипЗнч(ДанныеТаблицаВложений) = Тип("Строка") Тогда
				ТаблицаВложенийССервера = ЗначениеИзСтрокиВнутр(ДанныеТаблицаВложений);
				Если ТипЗнч(ТаблицаВложенийССервера) = Тип("ТаблицаЗначений") Тогда
					ТаблицаВложений.Загрузить(ТаблицаВложенийССервера);
					УдалитьИзВременногоХранилища(АдресТаблицыВложений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотраПапок()
	
	РежимПапокБыстрогоДоступа = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтотОбъект.ИмяФормы, "РежимМоиПапки", Ложь);
	
	Если РежимПапокБыстрогоДоступа Тогда
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе	
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗагруженыПисьма" Тогда
		ОбновитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрочтеноПисьмо" Тогда
		ОбновитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ОтправленоПисьмо" Тогда
		ОбновитьСписок();
		ПодключитьОбработчикОжидания("ОбновитьСписокЧерез3Секунды", 3, Истина);
		ПодключитьОбработчикОжидания("ОбновитьСписокЧерез12Секунд", 12, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "ПисьмоИзменено" Тогда
		ОбновитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлагПисьма" Тогда
		ОбновитьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = "ПапкаПисемСохранена" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ЗаполнитьДеревоПапок();
		СостояниеДерева.ТекСсылка = Параметр;
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	
	ЗаполнитьСвойстваПапок();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЧерез3Секунды()
	
	ЗаполнитьСвойстваПапок();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЧерез12Секунд()
	
	ЗаполнитьСвойстваПапок();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СостояниеДереваПапок <> Неопределено Тогда
		ВосстановитьСостояниеДереваПапок(СостояниеДереваПапок);
	КонецЕсли;
	
	УстановитьАвтообновлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;	

	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "СостояниеДерева", СостояниеДерева);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "ПоложениеОбластиЧтения", ПоложениеОбластиЧтения);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "ОтображатьУдаленные", ОтображатьУдаленные);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "ТекущееПисьмо", ТекущееПисьмо);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСервер()
	
	Элементы.Список.Обновить();
	ЗаполнитьСвойстваПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучитьПочту(Команда)
	
	ОчиститьСообщения();
	
	Текст = НСтр("ru ='Идет отправка и загрузка электронной почты. Пожалуйста подождите...'");
	Состояние(Текст,,, БиблиотекаКартинок.ПолучитьОтправитьПочту);
	
	ВозвращаемыйМассивОшибок = ОтправитьПолучитьПочтуСервер();
	
	Если ВозвращаемыйМассивОшибок.Количество() <> 0 Тогда
		
		Состояние();
		
		ПараметрыФормы = Новый Структура("МассивОшибок", ВозвращаемыйМассивОшибок);
		ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаОтчета", ПараметрыФормы);
		
	Иначе
		
		Оповестить("ЗагруженыПисьма");
		Состояние(НСтр("ru ='Отправка и загрузка электронной почты завершена успешно.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьПолучитьПочтуСервер()
	
	СообщенияОбОшибках = ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма();
	ЗаполнитьСвойстваПапок();
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	Письмо = ПолучитьТекущееПисьмо(Истина);
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	Письмо = ПолучитьТекущееПисьмо(Истина);
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Письмо = ПолучитьТекущееПисьмо(Истина);
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ПереслатьПисьмо(Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапку(Команда)
	
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуКлиент()
	
	ЗначенияЗаполнения = Новый Структура;
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(Элементы.Папки.ТекущиеДанные.Ссылка)
			И ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ТекущиеДанные.Ссылка) Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ПапкиПисем.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПисьмаИзMicrosoftOutlook(Команда)
	
	ПоказатьПредупреждение(Неопределено, "Функционал не поддерживается");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПочты(Команда)
	
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСвойствоПрочтеноСервер(Письма, Истина);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакНепрочтенные(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСвойствоПрочтеноСервер(Письма, Ложь);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСнизу(Команда)
	
	ПоложениеОбластиЧтения = "Снизу";
	ОбновитьПоложениеОбластиЧтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ПоложениеОбластиЧтения = "Справа";
	ОбновитьПоложениеОбластиЧтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ПоложениеОбластиЧтения = "Отключена";
	ОбновитьПоложениеОбластиЧтения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ОтображатьУдаленныеСервер(Истина);
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер(ЗаполнятьДеревоПапок = Ложь)
	
	Элементы.ОтображатьУдаленные.Пометка = ОтображатьУдаленные;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	Если ЗаполнятьДеревоПапок Тогда
		ЗаполнитьДеревоПапок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьВКорзинуСервер(Письма);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВКорзинуСервер(Письма)
	
	ВстроеннаяПочтаСервер.ПоместитьПисьмаВКорзину(Письма);
	ЗаполнитьСвойстваПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПисьмо(Команда)
	
	Письмо = ПолучитьТекущееПисьмо(Истина);
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Знач Оповещение, Команда)
	
	Результат = Неопределено;

	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение", ЭтотОбъект), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение6", ЭтотОбъект), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение5", ЭтотОбъект), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение4", ЭтотОбъект), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение3", ЭтотОбъект), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение2", ЭтотОбъект), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение1", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), Новый ОписаниеОповещения("НастроитьАвтообновлениеЗавершение", ЭтотОбъект), ЭтотОбъект, НастройкиАвтообновления);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Ссылка = ТекущийОтборПоПапке Тогда
			ОтключитьОбработчикОжидания("ОбработчикПапкиПриАктивизацииСтроки");
		Иначе
			ПодключитьОбработчикОжидания("ОбработчикПапкиПриАктивизацииСтроки", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПапкиПриАктивизацииСтроки();
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Ссылка <> ТекущийОтборПоПапке Тогда
			УстановитьОтборПоПапкеСервер(ТекущиеДанные.Ссылка, Элементы.Папки.ТекущаяСтрока);
			ТекущееПисьмо = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);
	
	Письмо = ПолучитьТекущееПисьмо(Ложь);
	Если Письмо = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Письмо <> ТекущееПисьмо Тогда
		УстановитьВидимостьДоступностьКоманд(Письмо, Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	Если ПоложениеОбластиЧтения <> "Отключена" Тогда
		// Формирование предспросмотра
		ТекущийСписок = Элементы.Список;
		Если ТекущийСписок = Неопределено Тогда
			Предпросмотр = "";
			Возврат;
		КонецЕсли;
		Если ТекущийСписок.ТекущаяСтрока = Неопределено
			Или ТекущийСписок.ТекущиеДанные = Неопределено
			Или ТипЗнч(ТекущийСписок.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Предпросмотр = "<html><body></body></html>";
			Возврат;
		КонецЕсли;
		
		Если ТекущийСписок.ТекущиеДанные.Ссылка <> ТекущееПисьмо Тогда
			Предпросмотр = ВстроеннаяПочтаСервер.СформироватьТекстHTMLДляПисьма(
				ТекущийСписок.ТекущиеДанные.Ссылка,
				УникальныйИдентификатор);
			ТекущееПисьмо = ТекущийСписок.ТекущиеДанные.Ссылка;
			
			ОбработатьТекстHTMLСервер(Предпросмотр);
			
			Если ТаблицаВложений.Количество()<>0 Тогда
				РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(Предпросмотр,ТаблицаВложений);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			ТекущееПисьмо = Элементы.Список.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьКоманд(Письмо, Элементы)
	
	ЭтоВходящееПисьмо = ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо);
	ЭтоИсходящееПисьмо = ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо);
	
	Элементы.Ответить.Доступность = ЭтоВходящееПисьмо;
	Элементы.СписокКонтекстноеМенюОтветить.Доступность = ЭтоВходящееПисьмо;
	Элементы.ОтветитьВсем.Доступность = ЭтоВходящееПисьмо;
	Элементы.СписокКонтекстноеМенюОтветитьВсем.Доступность = ЭтоВходящееПисьмо;
	Элементы.Переслать.Доступность = ЭтоВходящееПисьмо Или ЭтоИсходящееПисьмо;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана папка для удаления.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяПапка = Элемент.ТекущиеДанные.Ссылка;
		
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ПапкиПередУдалениемСервер();
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	Элементы.Список.Обновить();
	
КонецПроцедуры

Процедура ПапкиПередУдалениемСервер()
	
	ЗаполнитьДеревоПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.Флаг Тогда
		СтандартнаяОбработка = Ложь;
		ТекущееПисьмо = ПолучитьТекущееПисьмо();
		Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
			ПереключитьФлаг(ТекущееПисьмо);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлаги(Письма, ПредопределенноеЗначение("Перечисление.ФлагиПисем.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлаги(Письма, ПредопределенноеЗначение("Перечисление.ФлагиПисем.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлаги(Письма, ПредопределенноеЗначение("Перечисление.ФлагиПисем.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлаги(Письма, ПредопределенноеЗначение("Перечисление.ФлагиПисем.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлаги(Письма, ПредопределенноеЗначение("Перечисление.ФлагиПисем.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлаги(Письма, ПредопределенноеЗначение("Перечисление.ФлагиПисем.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьФлагиСервер(Письма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФлагиСервер(Письма)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для каждого Письмо Из Письма Цикл
		РегистрыСведений.ФлагиПисем.ОчиститьФлаг(
			Письмо,
			ТекущийПользователь);
	КонецЦикла;
	
	ЗаполнитьСвойстваПапок();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьФлаг(Письмо)
	
	ОсновнойФлаг = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВстроеннаяПочта",
		"ОсновнойФлаг",
		Перечисления.ФлагиПисем.Красный);
	
	РегистрыСведений.ФлагиПисем.ПереключитьФлаг(
		Письмо,
		Пользователи.ТекущийПользователь(),
		ОсновнойФлаг);
	ЗаполнитьСвойстваПапок();
	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервере
Процедура УстановитьФлаги(Письма, Флаг)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для каждого Письмо Из Письма Цикл
		РегистрыСведений.ФлагиПисем.УстановитьФлаг(
			Письмо,
			ТекущийПользователь,
			Флаг);
	КонецЦикла;
	
	ЗаполнитьСвойстваПапок();
	Элементы.Список.Обновить();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаСервере
Процедура УстановитьОтборПоПапкеСервер(Папка, ТекущаяСтрока = Неопределено)
	
	Список.Параметры.УстановитьЗначениеПараметра("Папка", Папка);
	ТекущийОтборПоПапке = Папка;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПапки = Папки.НайтиПоИдентификатору(ТекущаяСтрока);
	КоличествоПисем = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПапке(Папка);
	ПредставлениеПапки = ДанныеПапки.Наименование;
	Если КоличествоПисем > 0 Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеПапки,
			" ",
			ВКавычках(КоличествоПисем, "(", ")"));
	КонецЕсли;
	
	ДанныеПапки.Количество = КоличествоПисем;
	ДанныеПапки.Представление = ПредставлениеПапки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПапок()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Папка,
		|	ПапкиПисем.ПометкаУдаления КАК ПапкаПометкаУдаления,
		|	ПРЕДСТАВЛЕНИЕ(ПапкиПисем.Ссылка) КАК ПредставлениеПапки,
		|	ПапкиПисем.ВидПапки КАК ВидПапки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ПометкаУдаления
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Входящие)
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Исходящие)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Отправленные)
		|			ТОГДА 3
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 5
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 6
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК Порядок,
		|	ПапкиПисем.ВариантОтображенияКоличестваПисем,");
		
		
	// Добавление отметки папки быстрого доступа, которая используется для условного
	// оформления в режиме просмотра "Все папки"
	Если РежимПапокБыстрогоДоступа Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	ВЫБОР КОГДА ИСТИНА ТОГДА ЛОЖЬ КОНЕЦ КАК ПапкаБыстрогоДоступа";
	Иначе
		Запрос.Текст = Запрос.Текст +
			"
			|ВЫБОР
			|	КОГДА ПапкиПисемБыстрогоДоступа.Папка ЕСТЬ NULL 
			|		ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА
			|КОНЕЦ КАК ПапкаБыстрогоДоступа"
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		"
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
		|	ПО (ПапкиПисемБыстрогоДоступа.Папка = ПапкиПисем.Ссылка И ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	((НЕ ПапкиПисем.ПометкаУдаления)
		|			ИЛИ &ОтображатьУдаленные)";
		
	// Добавление отбора только папок, которые находятся в иерархии папок быстрого
	// доступа
	Если РежимПапокБыстрогоДоступа Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|	И ПапкиПисем.Ссылка В ИЕРАРХИИ
			|		(ВЫБРАТЬ
			|			ПапкиПисемБыстрогоДоступа.Папка
			|		ИЗ
			|			РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
			|		ГДЕ
			|			ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		"
		|УПОРЯДОЧИТЬ ПО
		|	Папка ИЕРАРХИЯ";
		
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ТекУчетнаяЗапись = Неопределено;
	СтрокаУчетнаяЗапись = Неопределено;
	
	ДеревоПапок = РеквизитФормыВЗначение("Папки");
	ДеревоПапок.Строки.Очистить();
	ДобавитьПапкиВДерево(ДеревоПапок.Строки, Дерево.Строки);
	СортироватьИерархически(ДеревоПапок.Строки, "Порядок, Представление");
	ЗначениеВДанныеФормы(ДеревоПапок, Папки);
	
	ЗаполнитьСвойстваПапок();
	
КонецПроцедуры

&НаСервере
Процедура СортироватьИерархически(СтрокиДерева, Знач Колонки)
	
	СтрокиДерева.Сортировать(Колонки);
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СортироватьИерархически(СтрокаДерева.Строки, Колонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПапкиВДерево(ДеревоСтроки, ИсточникСтроки)
	
	Для каждого ПапкаИнфо Из ИсточникСтроки Цикл
		Представление = ПапкаИнфо.ПредставлениеПапки;
		СтрокаПапка = ДеревоСтроки.Добавить();
		СтрокаПапка.Ссылка = ПапкаИнфо.Папка;
		СтрокаПапка.НомерКартинки = ПапкаИнфо.НомерКартинки;
		СтрокаПапка.Наименование = Представление;
		СтрокаПапка.Представление = Представление;
		СтрокаПапка.ВидПапки = ПапкаИнфо.ВидПапки;
		СтрокаПапка.Порядок = ПапкаИнфо.Порядок;
		СтрокаПапка.ПапкаБыстрогоДоступа = ПапкаИнфо.ПапкаБыстрогоДоступа;
		СтрокаПапка.ВариантОтображенияКоличестваПисем = ПапкаИнфо.ВариантОтображенияКоличестваПисем;
		ДобавитьПапкиВДерево(СтрокаПапка.Строки, ПапкаИнфо.Строки);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕТАСКИВАНИЕ

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Строка = Неопределено) Или (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНазначение = Папки.НайтиПоИдентификатору(Строка);
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		Если Почта.ЭтоУчетнаяЗапись(СтрокаНазначение.Ссылка) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПараметрыПеретаскивания.Значение[0]) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПараметрыПеретаскивания.Значение) Тогда
		Если Почта.ЭтоУчетнаяЗапись(СтрокаНазначение.Ссылка) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПараметрыПеретаскивания.Значение) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если Строка = Неопределено Тогда
		ПапкаНазначения = Неопределено;
	Иначе
		ПапкаНазначения = Папки.НайтиПоИдентификатору(Строка).Ссылка;
	КонецЕсли;
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ПапкиПеретаскиваниеСервер(ПеретаскиваемоеЗначение, ПапкаНазначения);
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПапкиПеретаскиваниеСервер(ПеретаскиваемоеЗначение, ПапкаНазначения)
	
	Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Массив")
		И ПеретаскиваемоеЗначение.Количество() > 0
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПеретаскиваемоеЗначение[0]) Тогда
		ВстроеннаяПочтаСервер.ПоместитьПисьмаВПапку(ПеретаскиваемоеЗначение, ПапкаНазначения);
		ЗаполнитьСвойстваПапок();
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПеретаскиваемоеЗначение) Тогда
		Справочники.ПапкиПисем.УстановитьРодителяПапки(ПеретаскиваемоеЗначение, ПапкаНазначения);
		ЗаполнитьДеревоПапок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	ПеретаскиваемоеЗначение = ТекущиеДанные.Ссылка;
	ВидПапки = ТекущиеДанные.ВидПапки;
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПеретаскиваемоеЗначение) Тогда
		ПараметрыПеретаскивания.Значение = ПеретаскиваемоеЗначение;
		Возврат;
	КонецЕсли;
	
	Выполнение = Ложь;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ПАПОК

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для каждого Элемент Из ДеревоЭлементы Цикл
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
		ОбойтиДерево(Элемент.ПолучитьЭлементы(), Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьСостояниеДереваПапок()
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", Неопределено);
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			Состояние.ТекСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Контекст.Состояние.Вставить(ТекДанные.Ссылка, Контекст.ФормаДерево.Развернут(ИдентификаторСтроки));
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСостояниеДереваПапок(Состояние)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Состояние.Развернут);
	Контекст.Вставить("ТекСсылка", Состояние.ТекСсылка);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Контекст.Состояние.Получить(ТекДанные.Ссылка) = Истина Тогда
		Контекст.ФормаДерево.Развернуть(ИдентификаторСтроки);
	Иначе
		Контекст.ФормаДерево.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	Если ТекДанные.Ссылка = Контекст.ТекСсылка Тогда
		Контекст.ФормаДерево.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

&НаКлиенте
Функция ПолучитьТекущееПисьмо(ВыводитьПредупреждение = Ложь)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Элементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Письмо = Элементы.Список.ТекущиеДанные.Ссылка;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеПисьма(ВыводитьПредупреждение = Ложь)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка) Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	Письмо = ПолучитьТекущееПисьмо(Ложь);
	Если ЗначениеЗаполнено(Письмо)
		И Результат.Найти(Письмо) = Неопределено Тогда
		Результат.Добавить(Письмо);
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			Предупреждение(НСтр("ru = 'Не выбраны письма.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЭтоФайловаяБаза()
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЧТЕННОСТЬЮ ПИСЕМ

&НаСервере
Процедура УстановитьСвойствоПрочтеноСервер(Письма, Прочтено)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для каждого Письмо Из Письма Цикл
		РегистрыСведений.СведенияОПисьмах.УстановитьСвойствоПрочтено(Письмо, Прочтено, ТекущийПользователь);
	КонецЦикла;
	
	ЗаполнитьСвойстваПапок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваПапок()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Папка,
		|	ПРЕДСТАВЛЕНИЕ(ПапкиПисем.Ссылка) КАК Наименование
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоПисемСоответствие = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПапках();
	
	СвойстваПапок.Очистить();
	Пока Выборка.Следующий() Цикл
		Папка = Выборка.Папка;
		ПредставлениеПапки = Выборка.Наименование;
		КоличествоПисем = 0;
		
		СтруктураКоличестваПисем = КоличествоПисемСоответствие.Получить(Папка);
		Если СтруктураКоличестваПисем <> Неопределено Тогда
			КоличествоПисем = СтруктураКоличестваПисем.Количество;
			Если КоличествоПисем > 0 Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеПапки,
					" ",
					ВКавычках(Формат(КоличествоПисем, "ЧГ=0") ,"(", ")"));
			КонецЕсли;
		КонецЕсли;
		
		СвойстваПапокСтрока = СвойстваПапок.Добавить();
		СвойстваПапокСтрока.Папка = Выборка.Папка;
		СвойстваПапокСтрока.Количество = КоличествоПисем;
		СвойстваПапокСтрока.Представление = ПредставлениеПапки;
		
	КонецЦикла;
	
	ОбновитьСвойстваПапокСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваПапокСервер()
	
	ПапкиСоотв = Новый Соответствие;
	Для каждого СвойстваПапокСтрока Из СвойстваПапок Цикл
		ПапкиСоотв.Вставить(СвойстваПапокСтрока.Папка, СвойстваПапокСтрока);
	КонецЦикла;
	
	ОчередьПапок = Новый Массив;
	Для каждого ПапкиСтрока Из Папки.ПолучитьЭлементы() Цикл
		ОчередьПапок.Добавить(ПапкиСтрока);
	КонецЦикла;
	Пока ОчередьПапок.Количество() > 0 Цикл
		ПапкиСтрока = ОчередьПапок[0];
		ПапкиИнфо = ПапкиСоотв.Получить(ПапкиСтрока.Ссылка);
		Если ПапкиИнфо <> Неопределено Тогда
			ПапкиСтрока.Количество = ПапкиИнфо.Количество;
			ПапкиСтрока.Представление = ПапкиИнфо.Представление;
		КонецЕсли;
		ОчередьПапок.Удалить(0);
		Для каждого ПапкиПодчиненнаяСтрока Из ПапкиСтрока.ПолучитьЭлементы() Цикл
			ОчередьПапок.Добавить(ПапкиПодчиненнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Элементы.Папки.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		НачатьЗапускПриложения(Неопределено, ДанныеСобытия.Href);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛОЖЕНИЕМ ОБЛАСТИ ЧТЕНИЯ

&НаКлиенте
Процедура ОбновитьПоложениеОбластиЧтения()
	
	ОбновитьПоложениеОбластиЧтенияСервер();
	ОбработчикСписокПриАктивизацииСтроки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоложениеОбластиЧтенияСервер()
	
	Если ПоложениеОбластиЧтения = "Снизу" Тогда
		Элементы.ПредпросмотрHTML.Видимость = Истина;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ОбластьЧтенияСнизу.Пометка = Истина;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		
	ИначеЕсли ПоложениеОбластиЧтения = "Справа" Тогда
		Элементы.ПредпросмотрHTML.Видимость = Истина;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ОбластьЧтенияСнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Истина;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		
	ИначеЕсли ПоложениеОбластиЧтения = "Отключена" Тогда
		Элементы.ПредпросмотрHTML.Видимость = Ложь;
		Элементы.ОбластьЧтенияСнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимМоиПапки(Команда)
	
	УстановитьРежимМоиПапки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура РежимВсеПапки(Команда)
	
	УстановитьРежимМоиПапки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимМоиПапки(РежимМоиПапки)
	
	Если РежимПапокБыстрогоДоступа = РежимМоиПапки Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимМоиПапки Тогда
		РежимПапокБыстрогоДоступа = Истина;
		ЗаполнитьДеревоПапок();
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе
		РежимПапокБыстрогоДоступа = Ложь;
		ЗаполнитьДеревоПапок();
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ЭтотОбъект.ИмяФормы, "РежимМоиПапки", РежимМоиПапки);
	ЗаполнитьСвойстваПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныйКодСтраницы(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Предпросмотр);
	ТекстовыйДокумент.Показать();
	
КонецПроцедуры
