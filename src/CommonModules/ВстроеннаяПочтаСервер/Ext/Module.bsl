/////////////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНОЕ ЗАДАНИЕ ПОЛУЧЕНИЕ И ОТПРАВКА ПИСЕМ

// Обработчик регламентного задания "Получение и отправка писем".
//
Процедура ПолучениеИОтправкаПисем() Экспорт
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения) Тогда
		ПолучитьИОтправитьПисьма();
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", "ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма");
	Отбор.Вставить("Ключ", "ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() = 0 Тогда
		Попытка
			ФоновыеЗадания.Выполнить("ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма",,
				"ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма", // Ключ
				НСтр("ru = 'Получение и отправка писем'")); // Наименование
		Исключение
			// Иногда фоновое задание успевает запуститься после проверки.
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Выполняет процедуру отправки и получения писем.
//
Функция ПолучитьИОтправитьПисьма() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщенияОбОшибках = Новый Массив;
	
	РезультатОтправки = ОтправитьВсеПисьма(ТекущаяДата(), СообщенияОбОшибках);
	Пока РезультатОтправки.ПисемКОтправке > 0 Цикл
		РезультатОтправки = ОтправитьВсеПисьма(ТекущаяДата(), СообщенияОбОшибках);
	КонецЦикла;
	
	ПолучитьВсеПисьма(СообщенияОбОшибках);
	
	Возврат СообщенияОбОшибках;
	
КонецФункции

// Получает письма всех учетных записей, с установленным признаком
// использования для встроенной почты и ИспользоватьДляПолучения.
//
Процедура ПолучитьВсеПисьма(СообщенияОбОшибках)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИспользоватьДляПолучения", Истина);
	ПараметрыОтбора.Вставить("ВариантИспользования", Перечисления.ВариантыИспользованияПочты.Встроенная);
	УчетныеЗаписи = Почта.ПолучитьУчетныеЗаписиЭлектроннойПочты(ПараметрыОтбора);
	
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		
		СообщениеОбОшибке = "";
		Соединение = Почта.ИнтернетПочтаУстановитьСоединение(УчетнаяЗапись,, СообщениеОбОшибке);
		Если Соединение = Неопределено Тогда
			СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Ложь, // ОперацияУспешноЗавершена
				СообщениеОбОшибке); // Комментарий
			Продолжить;
		Иначе
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Истина, // ОперацияУспешноЗавершена
				СообщениеОбОшибке); // Комментарий
		КонецЕсли;
		
		ПолучитьПисьмаУчетнойЗаписи(Соединение, УчетнаяЗапись, СообщенияОбОшибках);
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПисьмаУчетнойЗаписи(Соединение, УчетнаяЗапись, СообщенияОбОшибках)
	
	// Получение идентификаторов всех сообщений в почтовом ящике
	СообщениеОбОшибке = "";
	Идентификаторы = Почта.ПолучитьИдентификаторыВходящихСообщений(Соединение,,, СообщениеОбОшибке);
	Если Идентификаторы = Неопределено Тогда
		СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =
				|'Ошибка при получении идентификаторов сообщений в почтовом ящике:
				|%1'"),
			СообщениеОбОшибке);
		РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
			УчетнаяЗапись,
			Перечисления.ОперацииСУчетнойЗаписью.ПолучениеПисем,
			ТекущаяДата(),
			Ложь, // ОперацияУспешноЗавершена
			Комментарий); // Комментарий
		Возврат;
	КонецЕсли;
	
	РезультатРазбораИдентификаторов = РегистрыСведений.ИдентификаторыПолученныхПисем.РазобратьИдентификаторы(
		УчетнаяЗапись,
		Идентификаторы);
	
	// Удаление записей из регистра сведений ИдентификаторыПолученныхПисем
	Если РезультатРазбораИдентификаторов.УдалитьВРегистре.Количество() > 0 Тогда
		РегистрыСведений.ИдентификаторыПолученныхПисем.УдалитьЗаписи(
			УчетнаяЗапись,
			РезультатРазбораИдентификаторов.УдалитьВРегистре);
	КонецЕсли;
	
	// Получение новых писем
	ПолученоПисем = 0;
	НеПолученоПисем = 0;
	НеЗаписаноПисем = 0;
	СообщенияОбОшибкахПриПолучении = "";
	Если РезультатРазбораИдентификаторов.Загрузить.Количество() > 0 Тогда
		ПараметрыЗагрузки = Почта.СформироватьСтруктуруПараметровЗагрузки();
		ПараметрыЗагрузки.Идентификаторы = РезультатРазбораИдентификаторов.Загрузить;
		// Попытка получить все сообщения сразу
		СообщениеОбОшибке = "";
		Сообщения = Почта.ПолучитьВходящиеСообщения(Соединение, ПараметрыЗагрузки, СообщениеОбОшибке);
		Если ЗначениеЗаполнено(Сообщения) Тогда
			Для каждого Сообщение Из Сообщения Цикл
				СообщениеОбОшибке = "";
				Если Не ЗаписатьВходящееПисьмо(Сообщение, УчетнаяЗапись, СообщениеОбОшибке) Тогда
					НеЗаписаноПисем = НеЗаписаноПисем + 1;
					СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
					ДобавитьЗначениеКСтрокеЧерезРазделитель(
						СообщенияОбОшибкахПриПолучении,
						Символы.ПС,
						СообщениеОбОшибке);
				Иначе
					ПолученоПисем = ПолученоПисем + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Попытка получить все сообщения по отдельности
			Для каждого Идентификатор Из РезультатРазбораИдентификаторов.Загрузить Цикл
				МассивИдентификаторов = Новый Массив;
				МассивИдентификаторов.Добавить(Идентификатор);
				ПараметрыЗагрузки = Почта.СформироватьСтруктуруПараметровЗагрузки();
				ПараметрыЗагрузки.Идентификаторы = МассивИдентификаторов;
				СообщениеОбОшибке = "";
				Сообщения = Почта.ПолучитьВходящиеСообщения(Соединение, ПараметрыЗагрузки, СообщениеОбОшибке);
				Если ЗначениеЗаполнено(Сообщения) Тогда
					Для каждого Сообщение Из Сообщения Цикл
						СообщениеОбОшибке = "";
						Если Не ЗаписатьВходящееПисьмо(Сообщение, УчетнаяЗапись, СообщениеОбОшибке) Тогда
							НеЗаписаноПисем = НеЗаписаноПисем + 1;
							СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
							ДобавитьЗначениеКСтрокеЧерезРазделитель(
								СообщенияОбОшибкахПриПолучении,
								Символы.ПС,
								СообщениеОбОшибке);
						Иначе
							ПолученоПисем = ПолученоПисем + 1;
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Ошибка получения сообщения
					РегистрыСведений.НеПолученныеВходящиеПисьма.НеуспешнаяПопыткаПолучения(УчетнаяЗапись, Идентификатор);
					НеПолученоПисем = НеПолученоПисем + 1;
					СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
					ДобавитьЗначениеКСтрокеЧерезРазделитель(
						СообщенияОбОшибкахПриПолучении,
						Символы.ПС,
						СообщениеОбОшибке);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='Получено писем: %1'"),
		ПолученоПисем);
	Если НеПолученоПисем > 0 Тогда
		Комментарий = Комментарий + Символы.ПС +
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =
				|'Не получено писем: %1'"),
			НеПолученоПисем);
	КонецЕсли;
	Если НеЗаписаноПисем > 0 Тогда
		Комментарий = Комментарий + Символы.ПС +
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =
				|'Не записано писем: %1'"),
			НеЗаписаноПисем);
		КонецЕсли;
	БылиОшибкиПриПолучении = (НеПолученоПисем > 0) Или (НеЗаписаноПисем > 0);
	Если БылиОшибкиПриПолучении Тогда
		Комментарий = Комментарий + Символы.ПС +
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =
				|'Сообщения об ошибках:
				|%1'"),
			СообщенияОбОшибкахПриПолучении);
	КонецЕсли;
	
	РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
		УчетнаяЗапись,
		Перечисления.ОперацииСУчетнойЗаписью.ПолучениеПисем,
		ТекущаяДата(),
		Не БылиОшибкиПриПолучении, // ОперацияУспешноЗавершена
		Комментарий); // Комментарий
	
	// Удаление старых писем из почтового ящика
	Если РезультатРазбораИдентификаторов.УдалитьВПочтовомЯщике.Количество() > 0 Тогда
		СообщениеОбОшибке = "";
		Если Не Почта.УдалитьСообщенияВПочтовомЯщике(
			Соединение,
			РезультатРазбораИдентификаторов.УдалитьВПочтовомЯщике,
			СообщениеОбОшибке) Тогда
			СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить письма в ящике:
					|%1'"),
				СообщениеОбОшибке);
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.УдалениеПисем,
				ТекущаяДата(),
				Ложь, // ОперацияУспешноЗавершена
				Комментарий); // Комментарий
		Иначе
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удалено писем: %1'"),
				РезультатРазбораИдентификаторов.УдалитьВПочтовомЯщике.Количество());
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.УдалениеПисем,
				ТекущаяДата(),
				Истина, // ОперацияУспешноЗавершена
				Комментарий); // Комментарий
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат отправки писем в виде структуры:
// Результат (Структура)
// - ПисемКОтправке (Число)
// - Отправлено (Число)
// - НеОтправлено(Число)
//
Функция ОтправитьВсеПисьма(Знач ТекДата, СообщенияОбОшибках)
	
	Результат = Новый Структура("ПисемКОтправке, Отправлено, НеОтправлено", 0, 0, 0);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ИсходящееПисьмо.Ссылка КАК Письмо
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ПО ИсходящееПисьмо.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиПисем КАК ПапкиПисем
		|		ПО ИсходящееПисьмо.Папка = ПапкиПисем.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтложеннойОтправкиПисем КАК НастройкиОтложеннойОтправкиПисем
		|		ПО ИсходящееПисьмо.Автор = НастройкиОтложеннойОтправкиПисем.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НеОтправленныеИсходящиеПисьма КАК НеОтправленныеИсходящиеПисьма
		|		ПО ИсходящееПисьмо.Ссылка = НеОтправленныеИсходящиеПисьма.Письмо
		|			И (НеОтправленныеИсходящиеПисьма.ОсталосьПопытокОтправки = 0)
		|ГДЕ
		|	НЕ ИсходящееПисьмо.ПометкаУдаления
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		|	И ИсходящееПисьмо.ПодготовленоКОтправке <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДОБАВИТЬКДАТЕ(ИсходящееПисьмо.ПодготовленоКОтправке, СЕКУНДА, ЕСТЬNULL(НастройкиОтложеннойОтправкиПисем.Задержка, 0)) <= &ТекДата
		|	И НеОтправленныеИсходящиеПисьма.Письмо ЕСТЬ NULL 
		|ИТОГИ ПО
		|	УчетнаяЗапись");
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаУчетныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		СообщениеОбОшибке = "";
		Соединение = Почта.ИнтернетПочтаУстановитьСоединение(ВыборкаУчетныеЗаписи.УчетнаяЗапись,, СообщениеОбОшибке);
		Если Соединение = Неопределено Тогда
			СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Ложь, // ОперацияУспешноЗавершена
				СообщениеОбОшибке); // Комментарий
			Продолжить;
		Иначе
			РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
				ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				Перечисления.ОперацииСУчетнойЗаписью.СоединениеССервером,
				ТекущаяДата(),
				Истина, // ОперацияУспешноЗавершена
				СообщениеОбОшибке); // Комментарий
		КонецЕсли;
		
		ОтправленоПисем = 0;
		НеОтправленоПисем = 0;
		СообщенияОбОшибкахПриОтправке = "";
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			Результат.ПисемКОтправке = Результат.ПисемКОтправке + 1;
			СообщениеОбОшибке = "";
			Если Не ОтправитьПисьмо(ВыборкаПисьма.Письмо, Соединение, СообщениеОбОшибке) Тогда
				НеОтправленоПисем = НеОтправленоПисем + 1;
				РегистрыСведений.НеОтправленныеИсходящиеПисьма.ЗарегистрироватьНеуспешнуюПопыткуОтправкиПисьма(ВыборкаПисьма.Письмо);
				СообщенияОбОшибках.Добавить(СообщениеОбОшибке);
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					СообщенияОбОшибкахПриОтправке,
					Символы.ПС,
					СообщениеОбОшибке);
			Иначе
				ОтправленоПисем = ОтправленоПисем + 1;
			КонецЕсли;
		КонецЦикла;
		
		Результат.Отправлено = Результат.Отправлено + ОтправленоПисем;
		Результат.НеОтправлено = Результат.НеОтправлено + НеОтправленоПисем;
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Отправлено писем: %1'"),
			ОтправленоПисем);
		Если НеОтправленоПисем > 0 Тогда
			Комментарий = Комментарий + Символы.ПС +
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru =
					|'Не отправлено писем: %1
					|Сообщения об ошибках:
					|%2'"),
				НеОтправленоПисем,
				СообщенияОбОшибкахПриОтправке);
		КонецЕсли;
		РегистрыСведений.СостоянияУчетныхЗаписей.ЗаписатьСобытие(
			ВыборкаУчетныеЗаписи.УчетнаяЗапись,
			Перечисления.ОперацииСУчетнойЗаписью.ОтправкаПисем,
			ТекущаяДата(),
			(НеОтправленоПисем = 0), // ОперацияУспешноЗавершена
			Комментарий); // Комментарий
		
		Соединение.Отключиться();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПисьмо(ПисьмоСсылка, Соединение, СообщениеОбОшибке)
	
	НачатьТранзакцию();
	
	Попытка
		
		ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПисьмоСсылка);
		
		ПараметрыОтправки = ПолучитьСтруктуруПараметровОтправкиПисьма(ПисьмоОбъект);
		СообщениеОбОшибке = "";
		Если Не Почта.ОтправитьСообщение(
			Соединение,
			ПараметрыОтправки,
			СообщениеОбОшибке) Тогда
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		ПисьмоОбъект.ИдентификаторСообщения = ПараметрыОтправки.ИдентификаторСообщения;
		ПисьмоОбъект.Размер = ПараметрыОтправки.Размер;
		ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
		ПапкаДляОтправленных = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
			ПисьмоОбъект.УчетнаяЗапись,
			Перечисления.ВидыПапокПисем.Отправленные);
		ПисьмоОбъект.Папка = ПапкаДляОтправленных;
		ПисьмоОбъект.ДатаОтправки = ТекущаяДатаСеанса();
		ПисьмоОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПисьмоСсылка);		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РегистрыСведений.НеОтправленныеИсходящиеПисьма.ЗарегистрироватьНеуспешнуюПопыткуОтправкиПисьма(ПисьмоОбъект.Ссылка);
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время отправки письма произошла ошибка
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровОтправкиПисьма(ПисьмоОбъект)
	
	ПараметрыОтправки = Почта.СформироватьСтруктуруПараметровОтправки();
	ПараметрыОтправки.Важность = ПисьмоОбъект.Важность;
	ПараметрыОтправки.Кодировка = ПисьмоОбъект.Кодировка;
	ПараметрыОтправки.Тексты.Добавить(ПисьмоОбъект.ПолучитьСтруктуруТекстаПисьма());
	
	ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
	СтруктураОтправителя = Новый Структура;
	СтруктураОтправителя.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
	Если ДанныеУчетнойЗаписи.ВПредставлениеВключатьИмяПользователя Тогда
		СтруктураОтправителя.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ИмяПользователя);
		ПараметрыОтправки.ИмяОтправителя = ДанныеУчетнойЗаписи.ИмяПользователя;
	Иначе
		СтруктураОтправителя.Вставить("ОтображаемоеИмя", "");
		ПараметрыОтправки.ИмяОтправителя = "";
	КонецЕсли;
	ПараметрыОтправки.Отправитель = СтруктураОтправителя;
	
	Для каждого ПочтовыйАдресИнфо Из ПисьмоОбъект.ПолучателиПисьма Цикл
		СтруктураПочтовогоАдреса = Новый Структура;
		СтруктураПочтовогоАдреса.Вставить("Адрес", ПочтовыйАдресИнфо.Адрес);
		СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ПочтовыйАдресИнфо.ОтображаемоеИмя);
		ПараметрыОтправки.Получатели.Добавить(СтруктураПочтовогоАдреса);
	КонецЦикла;
	Для каждого ПочтовыйАдресИнфо Из ПисьмоОбъект.ПолучателиКопий Цикл
		СтруктураПочтовогоАдреса = Новый Структура;
		СтруктураПочтовогоАдреса.Вставить("Адрес", ПочтовыйАдресИнфо.Адрес);
		СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ПочтовыйАдресИнфо.ОтображаемоеИмя);
		ПараметрыОтправки.Копии.Добавить(СтруктураПочтовогоАдреса);
	КонецЦикла;
	Для каждого ПочтовыйАдресИнфо Из ПисьмоОбъект.ПолучателиСкрытыхКопий Цикл
		СтруктураПочтовогоАдреса = Новый Структура;
		СтруктураПочтовогоАдреса.Вставить("Адрес", ПочтовыйАдресИнфо.Адрес);
		СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ПочтовыйАдресИнфо.ОтображаемоеИмя);
		ПараметрыОтправки.СлепыеКопии.Добавить(СтруктураПочтовогоАдреса);
	КонецЦикла;
	ПараметрыОтправки.Тема = ПисьмоОбъект.Тема;
	ПараметрыОтправки.УведомитьОДоставке = ПисьмоОбъект.УведомитьОДоставке;
	ПараметрыОтправки.УведомитьОПрочтении = ПисьмоОбъект.УведомитьОПрочтении;
	
	Вложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ПисьмоОбъект.Ссылка, // Письмо
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь); // ВключатьПомеченныеНаУдаление
	
	Для каждого Вложение Из Вложения Цикл
		СтруктураВложения = Новый Структура;
		СтруктураВложения.Вставить("Данные", РаботаСФайлами.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка));
		СтруктураВложения.Вставить("Наименование", Вложение.ИмяФайла);
		ПараметрыОтправки.Вложения.Добавить(СтруктураВложения);
	КонецЦикла;
	
	ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
		ПисьмоОбъект.Ссылка,
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОтправленоВОтветНа) Тогда
			ПисьмоОтправленоВОтветНаИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				ПисьмоОтправленоВОтветНа,
				"ИдентификаторСообщения, ВнутреннийЗаголовок");
			Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения) Тогда
				
				// Формирование поля заголовка In-Reply-To
				ПараметрыОтправки.ПоляЗаголовка.Добавить(
					Почта.СформироватьСтруктуруПоляЗаголовка(
						"In-Reply-To", // ИмяПоля
						ВКавычках(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения, "<", ">"), // ЗначениеПоля
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
				
				// Формирование поля заголовка References
				References = ПолучитьЗначениеПоляИзЗаголовкаПисьма(
					ПисьмоОтправленоВОтветНаИнфо.ВнутреннийЗаголовок,
					"References");
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					References,
					" ",
					ВКавычках(ПисьмоОтправленоВОтветНаИнфо.ИдентификаторСообщения, "<", ">"));
				ПараметрыОтправки.ПоляЗаголовка.Добавить(
					Почта.СформироватьСтруктуруПоляЗаголовка(
						"References", // ИмяПоля
						References, // ЗначениеПоля
						СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования)); // СпособКодирования
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция ПолучитьЗначениеПоляИзЗаголовкаПисьма(Знач ЗаголовокПисьма, Знач Поле)
	
	КоличествоСтрок = СтрДлина(ЗаголовокПисьма);
	Для Индекс = 1 По СтрДлина(ЗаголовокПисьма) Цикл
		Строка = СтрПолучитьСтроку(ЗаголовокПисьма, Индекс);
		Если Найти(Строка, Поле + ": ") = 1 Тогда
			Результат = Сред(Строка, СтрДлина(Поле) + 3);
			Для ВнутреннийИндекс = Индекс + 1 По КоличествоСтрок Цикл
				Строка = СтрПолучитьСтроку(ЗаголовокПисьма, ВнутреннийИндекс);
				Если Лев(Строка, 1) <> Символы.Таб Тогда
					Прервать
				КонецЕсли;
				Результат = Результат + Сред(Строка, 2);
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Устанавливает текст письма из структуры текста почтового сообщения.
//
Процедура УстановитьТекстПисьмаИзСтруктурыТекстаПочтовогоСообщения(ПисьмоОбъект, СтруктураТекста) Экспорт
	
	ПисьмоОбъект.ТипТекста = СтруктураТекста.ТипТекста;
	Если СтруктураТекста.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		ПисьмоОбъект.УстановитьТекстПисьма(СтруктураТекста.ТекстHTML, СтруктураТекста.ТипТекста, СтруктураТекста.Кодировка);
	Иначе
		ПисьмоОбъект.УстановитьТекстПисьма(СтруктураТекста.Текст, СтруктураТекста.ТипТекста, СтруктураТекста.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьВходящееПисьмо(Сообщение, УчетнаяЗапись, СообщениеОбОшибке = Неопределено)
	
	НачатьТранзакцию();
	
	Попытка
	
		ПисьмоОбъект = Документы.ВходящееПисьмо.СоздатьДокумент();
		ПисьмоОбъект.УчетнаяЗапись = УчетнаяЗапись;
		ЗаполнитьВходящееПисьмоИзСтруктурыПочтовогоСообщения(ПисьмоОбъект, Сообщение, УчетнаяЗапись);
		
		Основание = Неопределено;
		ИдентификаторПисьма = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "In-Reply-To");
		Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
			ИдентификаторОснования = РаботаСоСтроками.ВыделитьПодстрокуВСкобках(ИдентификаторПисьма, "<", ">");
			Основание = НайтиИсходящееПисьмоПоИдентификатору(ИдентификаторОснования);
		Иначе
			СтрокаИдентификаторовПисем = ПолучитьЗначениеПоляИзЗаголовкаПисьма(Сообщение.Заголовок, "References");
			Если ЗначениеЗаполнено(СтрокаИдентификаторовПисем) Тогда
				МассивИдентификаторовПисем = ПолучитьМассивИдентификаторовПисем(СтрокаИдентификаторовПисем);
				Если МассивИдентификаторовПисем.Количество() > 0 Тогда
					МассивПисем = НайтиИсходящиеПисьмаПоИдентификаторам(МассивИдентификаторовПисем);
					Если МассивПисем.Количество() > 0 Тогда
						Основание = МассивПисем[0];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Основание) Тогда
			ЗаполнитьРеквизитыПисьмаИзОснования(ПисьмоОбъект, Основание);
		КонецЕсли;
		
		ЗаполнитьИнформациюОКонтактахВПисьме(ПисьмоОбъект, УчетнаяЗапись);
		
		ПисьмоОбъект.ДатаПолучения = ТекущаяДатаСеанса();
		ПисьмоОбъект.Записать();
		
		Если ЗначениеЗаполнено(Основание) Тогда
			СвязиДокументов.УстановитьСвязь(
				ПисьмоОбъект.Ссылка,
				Неопределено,
				Основание,
				Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
		КонецЕсли;
		
		//Запись вложений
		Для каждого Вложение Из Сообщение.Вложения Цикл
			ДобавитьВложениеПисьмаИзИнтернетПочтовогоВложения(
				ПисьмоОбъект.Ссылка, // Письмо
				Вложение, // Вложение
				Сообщение.ДатаПолучения); // ВремяИзменения
		КонецЦикла;
		
		// Запись идентификатора полученного сообщения
		Для каждого Идентификатор Из Сообщение.Идентификатор Цикл
			РегистрыСведений.ИдентификаторыПолученныхПисем.ДобавитьЗапись(
				УчетнаяЗапись,
				Идентификатор,
				ПисьмоОбъект.ДатаПолучения);
		КонецЦикла;
		
		РаботаСЗаявкамиИПочтой.ОбработатьВходящееПисьмо(ПисьмоОбъект.Ссылка);

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении письма c адреса %1 от %2 произошла ошибка:
				|%3'"),
			Сообщение.Отправитель.Адрес,
			Сообщение.ДатаОтправки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Почта.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьМассивИдентификаторовПисем(Знач СтрокаИдентификаторовПисем)
	
	Результат = Новый Массив;
	
	СтрокаИдентификаторовПисем = СтрЗаменить(СтрокаИдентификаторовПисем, "> <", Символы.ПС);
	СтрокаИдентификаторовПисем = СтрЗаменить(СтрокаИдентификаторовПисем, "<", "");
	СтрокаИдентификаторовПисем = СтрЗаменить(СтрокаИдентификаторовПисем, ">", "");
	
	Для Индекс = 1 По СтрДлина(СтрокаИдентификаторовПисем) Цикл
		Строка = СтрПолучитьСтроку(СтрокаИдентификаторовПисем, Индекс);
		Если ЗначениеЗаполнено(Строка) Тогда
			Результат.Добавить(СокрЛП(Строка));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив писем, найденных по идентификаторам, отсортированный по убыванию даты письма.
//
Функция НайтиИсходящиеПисьмаПоИдентификаторам(МассивИдентификаторовПисем)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящееПисьмо.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.ИдентификаторСообщения В(&МассивИдентификаторовПисем)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходящееПисьмо.Дата УБЫВ");
	Запрос.УстановитьПараметр("МассивИдентификаторовПисем", МассивИдентификаторовПисем);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Добавляет вложение письма.
//
Процедура ДобавитьВложениеПисьмаИзИнтернетПочтовогоВложения(
	Письмо, // ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо
	Вложение, // ИнтернетПочтовоеВложение
	ВремяИзменения) Экспорт // ДатаВремя
	
	Если ТипЗнч(Вложение.Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Вложение.ИмяФайла, "_");
	
	ДобавитьВложениеПисьмаИзДвоичныхДанных(
		Письмо,
		Вложение.Данные, // ДвоичныеДанные
		ИмяФайла, // ИмяФайла
		ВремяИзменения,
		Вложение.Идентификатор);
	
КонецПроцедуры

// Добавляет вложение письма.
//
Процедура ДобавитьВложениеПисьмаИзДвоичныхДанных(
	Письмо, // ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо
	ДвоичныеДанные, // ДвоичныеДанные
	ИмяФайла,
	ВремяИзменения, // ДатаВремя
	Идентификатор) Экспорт // Идентификатор почтового вложения
	
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Размер = ДвоичныеДанные.Размер();
	
	ДобавитьВложениеПисьмаИзВременногоХранилища(
		Письмо,
		Адрес,
		Неопределено,
		Размер,
		ИмяФайла,
		ВремяИзменения,
		Идентификатор);
	
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры

// Добавляет вложение письма.
//
Процедура ДобавитьВложениеПисьмаИзВременногоХранилища(
	Письмо, // ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо
	АдресВременногоХранилища,
	АдресВременногоХранилищаТекста,
	Размер,
	ИмяФайла,
	ВремяИзменения, // ДатаВремя
	Идентификатор) Экспорт // Идентификатор почтового вложения
	
	ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ИмяФайла);
	ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ВремяИзменения);
	
	ВложениеПисьмаСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
		Письмо, // ВладелецФайла
		ИмяФайлаИнфо.Имя, // ИмяБезРасширения,
		ИмяФайлаИнфо.Расширение, // РасширениеБезТочки
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Размер,
		АдресВременногоХранилища, //АдресВременногоХранилищаФайла
		АдресВременногоХранилищаТекста,
		Ложь, // ЭтоВебКлиент
		Неопределено, // Пользователь
		"", // Комментарий
		Ложь, // ЗаписатьВИсторию
		Неопределено); // Кодировка
	
	Если Не ПустаяСтрока(Идентификатор) Тогда
		РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(ВложениеПисьмаСсылка, Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВходящееПисьмоИзСтруктурыПочтовогоСообщения(ПисьмоОбъект, Сообщение, УчетнаяЗапись)
	
	ДатаОтправки = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Сообщение.ДатаОтправки) Тогда
		ДатаОтправки = Сообщение.ДатаОтправки;
	КонецЕсли;
	
	ПисьмоОбъект.Важность = Сообщение.Важность;
	ПисьмоОбъект.Дата = Сообщение.ДатаПолучения;
	ПисьмоОбъект.ДатаОтправки = ДатаОтправки;
	ПисьмоОбъект.ДатаПолучения = Сообщение.ДатаПолучения;
	ПисьмоОбъект.ВнутреннийЗаголовок = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.Заголовок);
	ПисьмоОбъект.ИдентификаторСообщения = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.ИдентификаторСообщения);
	ПисьмоОбъект.Кодировка = Сообщение.Кодировка;
	ПисьмоОбъект.УведомитьОДоставке = Сообщение.УведомитьОДоставке;
	ПисьмоОбъект.УведомитьОПрочтении = Сообщение.УведомитьОПрочтении;
	
	ПисьмоОбъект.ОтправительАдрес = Сообщение.Отправитель.Адрес;
	ПисьмоОбъект.ОтправительОтображаемоеИмя = ПолучитьПредставлениеАдресата(
		Неопределено,
		Сообщение.Отправитель.ОтображаемоеИмя,
		Сообщение.Отправитель.Адрес,
		УчетнаяЗапись);
	
	СтруктураТекста = Почта.ПолучитьСтруктуруТекстаИзСтруктурыПочтовогоСообщения(Сообщение);
	УстановитьТекстПисьмаИзСтруктурыТекстаПочтовогоСообщения(ПисьмоОбъект, СтруктураТекста);
	
	ПисьмоОбъект.Размер = Сообщение.Размер;
	ПисьмоОбъект.Тема = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(Сообщение.Тема);
	
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.ПолучателиПисьма, Сообщение.Получатели);
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.ПолучателиКопий, Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.ПолучателиОтвета, Сообщение.ОбратныйАдрес);
	ЗаполнитьИнтернетПочтовыеАдреса(ПисьмоОбъект.АдресаУведомленияОПрочтении, Сообщение.АдресаУведомленияОПрочтении);
	
	ПисьмоОбъект.ПолучателиПисьмаСтрокой = ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиПисьма, УчетнаяЗапись);
	ПисьмоОбъект.ПолучателиКопийСтрокой = ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиКопий, Учетнаязапись);
	
	ПисьмоОбъект.ЕстьВложения = (Сообщение.Вложения.Количество() > 0);
	
КонецПроцедуры

// Заполняет реквизиты Предмет  из письма-основания.
//
Процедура ЗаполнитьРеквизитыПисьмаИзОснования(ПисьмоОбъект, Основание) Экспорт
	
	ОснованиеИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Основание, "Предмет");
	ПисьмоОбъект.Предмет = ОснованиеИнфо.Предмет;
	
КонецПроцедуры

// Возвращает письмо по идентификатору.
// Если письмо не найдено, возвращает Неопределено.
//
Функция НайтиИсходящееПисьмоПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящееПисьмо.Ссылка,
		|	ИсходящееПисьмо.Дата
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.ИдентификаторСообщения = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	
КонецФункции

Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТаблицаАдресов, Адреса)
	
	Для каждого Адрес Из Адреса Цикл
		ТаблицаАдресовСтрока = ТаблицаАдресов.Добавить();
		ТаблицаАдресовСтрока.Адрес = Адрес.Адрес;
		Если ЗначениеЗаполнено(Адрес.ОтображаемоеИмя) Тогда
			ТаблицаАдресовСтрока.ОтображаемоеИмя = Адрес.ОтображаемоеИмя;
		Иначе
			ТаблицаАдресовСтрока.ОтображаемоеИмя = Адрес.Адрес;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты Контакт в табличных частях письма по адресу электронной почты.
//
Процедура ЗаполнитьИнформациюОКонтактахВПисьме(ПисьмоОбъект, УчетнаяЗапись = Неопределено) Экспорт
	
	// Получим все почтовые адреса из письма.
	ПочтовыеАдреса = Новый Массив;
	
	АдресОтправителя = "";
	Если ТипЗнч(ПисьмоОбъект.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		АдресОтправителя = ПисьмоОбъект.ОтправительАдрес;
	Иначе
		АдресОтправителя = ПисьмоОбъект.УчетнаяЗапись.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОтправителя) Тогда
		ДобавитьУникальныйЭлементВМассив(ПочтовыеАдреса, АдресОтправителя);
	КонецЕсли;
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(АдресатСтрока.Адрес) Тогда
			ДобавитьУникальныйЭлементВМассив(ПочтовыеАдреса, АдресатСтрока.Адрес);
		КонецЕсли;
	КонецЦикла;
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиКопий Цикл
		Если ЗначениеЗаполнено(АдресатСтрока.Адрес) Тогда
			ДобавитьУникальныйЭлементВМассив(ПочтовыеАдреса, АдресатСтрока.Адрес);
		КонецЕсли;
	КонецЦикла;
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиОтвета Цикл
		Если ЗначениеЗаполнено(АдресатСтрока.Адрес) Тогда
			ДобавитьУникальныйЭлементВМассив(ПочтовыеАдреса, АдресатСтрока.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	// Определение контактов по почтовым адресам
	Контакты = ПолучитьКонтактыПоПочтовымАдресам(ПочтовыеАдреса, УчетнаяЗапись);
	
	// Заполнение информации о контактах в письме
	Контакт = Контакты.Получить(АдресОтправителя);
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		ПисьмоОбъект.ОтправительКонтакт = Контакт;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект) Тогда
			ПисьмоОбъект.ОтправительОтображаемоеИмя = ПолучитьПредставлениеАдресата(
				ПисьмоОбъект.ОтправительКонтакт ,
				ПисьмоОбъект.ОтправительОтображаемоеИмя,
				ПисьмоОбъект.ОтправительАдрес);
		КонецЕсли;	
			
		КонецЕсли;
		
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиПисьма Цикл
		Контакт = Контакты.Получить(АдресатСтрока.Адрес);
		Если ЗначениеЗаполнено(Контакт) Тогда
			АдресатСтрока.Контакт = Контакт;
		КонецЕсли;
	КонецЦикла;
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиКопий Цикл
		Контакт = Контакты.Получить(АдресатСтрока.Адрес);
		Если ЗначениеЗаполнено(Контакт) Тогда
			АдресатСтрока.Контакт = Контакт;
		КонецЕсли;
	КонецЦикла;
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиОтвета Цикл
		Контакт = Контакты.Получить(АдресатСтрока.Адрес);
		Если ЗначениеЗаполнено(Контакт) Тогда
			АдресатСтрока.Контакт = Контакт;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУникальныйЭлементВМассив(Массив, Элемент)
	
	Если Массив.Найти(Элемент) = Неопределено Тогда
		Массив.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Заменить email на ссылку на контакт во всех письмах
Процедура ЗаменитьАдресаНаКонтакт(АдресПочты, Контакт, УникальныйИдентификатор, УчетнаяЗапись = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	(ВходящееПисьмо.ОтправительАдрес ПОДОБНО &ОтправительАдрес
		|			ИЛИ ВходящееПисьмо.ПолучателиПисьмаСтрокой ПОДОБНО &ОтправительАдрес
		|			ИЛИ ВходящееПисьмо.ПолучателиКопийСтрокой ПОДОБНО &ОтправительАдрес)";
		
	Запрос.УстановитьПараметр("ОтправительАдрес", АдресПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка, , УникальныйИдентификатор);
		
		Если Не ЗначениеЗаполнено(ПисьмоОбъект.ОтправительКонтакт)
			И ПисьмоОбъект.ОтправительАдрес = АдресПочты Тогда
			
			ПисьмоОбъект.ОтправительКонтакт = Контакт;
			ПисьмоОбъект.ОтправительОтображаемоеИмя = ПолучитьПредставлениеАдресата(
				ПисьмоОбъект.ОтправительКонтакт ,
				ПисьмоОбъект.ОтправительОтображаемоеИмя,
				ПисьмоОбъект.ОтправительАдрес,
				УчетнаяЗапись);
				
		КонецЕсли;
		
		Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиПисьма Цикл
			Если АдресатСтрока.Адрес = АдресПочты
				И Не ЗначениеЗаполнено(АдресатСтрока.Контакт) Тогда
				АдресатСтрока.Контакт = Контакт;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиКопий Цикл
			Если АдресатСтрока.Адрес = АдресПочты
				И Не ЗначениеЗаполнено(АдресатСтрока.Контакт) Тогда
				АдресатСтрока.Контакт = Контакт;
			КонецЕсли;
		КонецЦикла;
		
		ПисьмоОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка, УникальныйИдентификатор);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	(ИсходящееПисьмо.ПолучателиПисьмаСтрокой ПОДОБНО &ОтправительАдрес
		|			ИЛИ ИсходящееПисьмо.ПолучателиКопийСтрокой ПОДОБНО &ОтправительАдрес
		|			ИЛИ ИсходящееПисьмо.ПолучателиСкрытыхКопийСтрокой ПОДОБНО &ОтправительАдрес)";
	Запрос.УстановитьПараметр("ОтправительАдрес", "%" + АдресПочты + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка, , УникальныйИдентификатор);
		
		Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиПисьма Цикл
			Если АдресатСтрока.Адрес = АдресПочты
				И Не ЗначениеЗаполнено(АдресатСтрока.Контакт) Тогда
				АдресатСтрока.Контакт = Контакт;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиКопий Цикл
			Если АдресатСтрока.Адрес = АдресПочты
				И Не ЗначениеЗаполнено(АдресатСтрока.Контакт) Тогда
				АдресатСтрока.Контакт = Контакт;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиСкрытыхКопий Цикл
			Если АдресатСтрока.Адрес = АдресПочты
				И Не ЗначениеЗаполнено(АдресатСтрока.Контакт) Тогда
				АдресатСтрока.Контакт = Контакт;
			КонецЕсли;
		КонецЦикла;
		
		ПисьмоОбъект.ПолучателиПисьмаСтрокой = ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиПисьма, УчетнаяЗапись);
		ПисьмоОбъект.ПолучателиКопийСтрокой = ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиКопий, УчетнаяЗапись);
		
		ПисьмоОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРАВИЛАМИ

// Применяет к письму предопределенные правила.
// Вызывается из модулей объектов ВходящееПисьмо, ИсходящееПисьмо в конце процедуры ПередЗаписью.
//
Процедура ПрименитьПравила(ПисьмоОбъект) Экспорт
	
	ПрименитьПредопределенныеПравила(ПисьмоОбъект);
	
КонецПроцедуры

// Обрабатывает письмо с учетом предопределенных правил.
//
Процедура ПрименитьПредопределенныеПравила(ПисьмоОбъект) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект) Тогда
		
		Если ПисьмоОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(ПисьмоОбъект.Папка) Тогда
			// Новые письма без папки помещаются в папку Входящие.
			ПисьмоОбъект.Папка = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
				ПисьмоОбъект.УчетнаяЗапись,
				Перечисления.ВидыПапокПисем.Входящие);
		КонецЕсли;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		
		Если ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке) Тогда
			// Письма, готовые к отправке помещаются в папку Исходящие.
			ПапкаДляИсходящих = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
				ПисьмоОбъект.УчетнаяЗапись,
				Перечисления.ВидыПапокПисем.Исходящие);
			Если Не ЗначениеЗаполнено(ПапкаДляИсходящих) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для учетной записи %1 не определена папка для исходящих писем.'"),
					ПисьмоОбъект.УчетнаяЗапись);
			КонецЕсли;
			ПисьмоОбъект.Папка = ПапкаДляИсходящих;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПисьмоОбъект.Папка) Тогда
			// Письма без папки помещаются в папку Черновики.
			ПапкаДляЧерновиков = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
				ПисьмоОбъект.УчетнаяЗапись,
				Перечисления.ВидыПапокПисем.Черновики);
			Если ЗначениеЗаполнено(ПапкаДляЧерновиков) Тогда
				ПисьмоОбъект.Папка = ПапкаДляЧерновиков;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'В процедуру ""ПрименитьПредопределенныеПравила"" передан некорректный параметр.'");
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОНТАКТАМИ

// Возвращает соответствие почтового адреса и контакта.
//
Функция ПолучитьКонтактыПоПочтовымАдресам(ПочтовыеАдреса, УчетнаяЗапись = Неопределено)
	
	Контакты = Новый Соответствие;
	
	// Пользователи
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ПользователиКонтактнаяИнформация.АдресЭП В(&ПочтовыеАдреса)");
	Запрос.УстановитьПараметр("ПочтовыеАдреса", ПочтовыеАдреса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Контакты.Вставить(Выборка.АдресЭП, Выборка.Ссылка);
	КонецЦикла;
	
	// ФизическиеЛица
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ФизическиеЛицаКонтактнаяИнформация.АдресЭП В(&ПочтовыеАдреса)");
	Запрос.УстановитьПараметр("ПочтовыеАдреса", ПочтовыеАдреса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Контакты.Вставить(Выборка.АдресЭП, Выборка.Ссылка);
	КонецЦикла;
	
	// КонтактныеЛица
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КонтактныеЛицаКонтактнаяИнформация.АдресЭП В(&ПочтовыеАдреса)");
	Запрос.УстановитьПараметр("ПочтовыеАдреса", ПочтовыеАдреса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Контакты.Вставить(Выборка.АдресЭП, Выборка.Ссылка);
	КонецЦикла;
	
	// Корреспонденты
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КорреспондентыКонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КорреспондентыКонтактнаяИнформация.АдресЭП В(&ПочтовыеАдреса)");
	Запрос.УстановитьПараметр("ПочтовыеАдреса", ПочтовыеАдреса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Контакты.Вставить(Выборка.АдресЭП, Выборка.Ссылка);
	КонецЦикла;
	
	Если УчетнаяЗапись <> Неопределено Тогда
		// Личные адресаты
		
		Если УчетнаяЗапись.ОтветственныеЗаОбработкуПисем.Количество() = 1 Тогда
			
			ОтветственныйЗаОбработкуПисем = УчетнаяЗапись.ОтветственныеЗаОбработкуПисем[0].Пользователь;
		
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ЛичныеАдресатыКонтактнаяИнформация.Ссылка КАК Ссылка,
				|	ЛичныеАдресатыКонтактнаяИнформация.АдресЭП КАК АдресЭП
				|ИЗ
				|	Справочник.ЛичныеАдресаты.КонтактнаяИнформация КАК ЛичныеАдресатыКонтактнаяИнформация
				|ГДЕ
				|	ЛичныеАдресатыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
				|	И ЛичныеАдресатыКонтактнаяИнформация.АдресЭП В(&ПочтовыеАдреса)
				|	И ЛичныеАдресатыКонтактнаяИнформация.Ссылка.Пользователь = &Пользователь");
			Запрос.УстановитьПараметр("ПочтовыеАдреса", ПочтовыеАдреса);
			Запрос.УстановитьПараметр("Пользователь", ОтветственныйЗаОбработкуПисем);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Контакты.Вставить(Выборка.АдресЭП, Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетнаяЗапись <> Неопределено Тогда
		КонтактыСФильтром = Новый Соответствие;
		Для Каждого Контакт Из Контакты Цикл
			КонтактДоступенВсем = Истина;
			Для Каждого Ответственный Из УчетнаяЗапись.ОтветственныеЗаОбработкуПисем Цикл
				КонтактДоступенВсем = КонтактДоступенВсем; 	
				Если Не КонтактДоступенВсем тогда
					Прервать;	
				КонецЕсли;
			КонецЦикла;		
			Если КонтактДоступенВсем Тогда
				КонтактыСФильтром.Вставить(Контакт.Ключ, Контакт.Значение);	
			КонецЕсли;
		КонецЦикла;
		Возврат КонтактыСФильтром;
	КонецЕсли;		
	
	Возврат Контакты;
	
КонецФункции

// Заполняет реквизиты Контакт в табличных частях письма по адресу электронной почты.
//
Функция ЗаменитьИнформациюОКонтактахВПисьме(ПисьмоОбъект, КонтактСтарый, КонтактНовый) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтактСтарый) Или Не ЗначениеЗаполнено(КонтактНовый) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	АдресаИзменены = Ложь;
	
	// Заполнение информации о контактах в письме
	Если ПисьмоОбъект.ОтправительКонтакт = КонтактСтарый Тогда
		ПисьмоОбъект.ОтправительКонтакт = КонтактНовый;
		АдресаИзменены = Истина;
	КонецЕсли;
	
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиПисьма Цикл
		Если АдресатСтрока.Контакт = КонтактСтарый Тогда
			АдресатСтрока.Контакт = КонтактНовый;
			АдресаИзменены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиКопий Цикл
		Если АдресатСтрока.Контакт = КонтактСтарый Тогда
			АдресатСтрока.Контакт = КонтактНовый;
			АдресаИзменены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого АдресатСтрока Из ПисьмоОбъект.ПолучателиОтвета Цикл
		Если АдресатСтрока.Контакт = КонтактСтарый Тогда
			АдресатСтрока.Контакт = КонтактНовый;
			АдресаИзменены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат АдресаИзменены;
	
КонецФункции

// Ищет корреспондента по соответствию адреса электронной почты, в том числе и среди контактных лиц
// Результат (Структура, Неопределено)
// - Корреспондент (СправочникСсылка.Контрагенты)
// - КонтактноеЛицо (СправочникСсылка.КонтактныеЛица, Неопределено)
//
// Параметры:
// - Отправитель (Строка) Строка вида "ХХХХХХ <AA@BB.cc>" или "AA@BB.cc"
//
Функция ПолучитьКорреспондентаИКонтактноеЛицоПоСтрокеАдреса(Отправитель) Экспорт
	
	АдресЭлекстроннойПочты = РаботаСоСтроками.ВыделитьПодстрокуВСкобках(Отправитель, "<", ">");
	Если ПустаяСтрока(АдресЭлекстроннойПочты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаКорреспондентов = ПолучитьКорреспондентовПоАдресуЭлектроннойПочты(АдресЭлекстроннойПочты);
	Если ТаблицаКорреспондентов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Корреспондент", ТаблицаКорреспондентов[0].Корреспондент);
	Результат.Вставить("КонтактноеЛицо", ТаблицаКорреспондентов[0].КонтактноеЛицо);
	
	Возврат Результат;
	
КонецФункции

// Результат (ТаблицаЗначений)
// - Корреспондент (СправочникСсылка.Контрагенты)
// - КонтактноеЛицо (СправочникСсылка.КонтактныеЛица)
//
// Параметры
// - АдресЭлекстроннойПочты (Строка) Адрес электронной почты
//
Функция ПолучитьКорреспондентовПоАдресуЭлектроннойПочты(АдресЭлекстроннойПочты)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Корреспонденты
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК Корреспондент,
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Корреспонденты КАК Корреспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|		ПО Корреспонденты.Ссылка = КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
		|			И (КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП)");
	Запрос.УстановитьПараметр("АдресЭП", АдресЭлекстроннойПочты);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКонтактыПоПочтовомуАдресу(ПочтовыйАдрес, УчетнаяЗапись = Неопределено)
	
	ПочтовыеАдреса = Новый Массив;
	ПочтовыеАдреса.Добавить(ПочтовыйАдрес);
	Возврат ПолучитьКонтактыПоПочтовымАдресам(ПочтовыеАдреса, УчетнаяЗапись);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПИСЬМАМИ

// Возвращает представление письма.
//
Функция ПолучитьПредставлениеПисьма(ПисьмоОбъект) Экспорт
	
	Если ПустаяСтрока(ПисьмоОбъект.Тема) Тогда
		Тема = НСтр("ru = 'без темы'");
	Иначе
		Тема = ПисьмоОбъект.Тема;
	КонецЕсли;
	
	Представление = "";
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОбъект.Ссылка) Тогда
		ВидПисьма = НСтр("ru = 'Входящее письмо'");
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект.Ссылка) Тогда
		ВидПисьма = НСтр("ru = 'Исходящее письмо'");
	КонецЕсли;
	
	Если ПисьмоОбъект.Ссылка.Пустая() Тогда
		Представление = ВидПисьма;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Представление,
			" ",
			ВКавычках(НСтр("ru = 'создание'"),"(",")"))
	Иначе
		Представление = Тема;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Представление,
			" ",
			ВКавычках(ВидПисьма,"(",")"))
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Помещает письмо в указанную папку писем.
//
Процедура ПоместитьПисьмоВПапку(Письмо, Папка, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Если Письмо = Письмо.Ссылка Тогда
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Письмо,, УникальныйИдентификаторФормы);
	Иначе
		ПисьмоОбъект = Письмо;
	КонецЕсли;
	
	// Установка привилегированного режима, т.к. перенос из папки в папку 
	// проверяется программно
	УстановитьПривилегированныйРежим(Истина);
		
	ПисьмоОбъект.Папка = Папка;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

// Помещает письма в указанную папку писем.
//
Процедура ПоместитьПисьмаВПапку(МассивПисем, Папка) Экспорт
	
	Для каждого Письмо Из МассивПисем Цикл
		ПоместитьПисьмоВПапку(Письмо, Папка);
	КонецЦикла;
	
КонецПроцедуры

// Помещает письмо в папку Корзина учетной записи.
//
Процедура ПоместитьПисьмоВКорзину(Письмо) Экспорт
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Письмо);
	УчетнаяЗапись = ПисьмоОбъект.УчетнаяЗапись;
	Корзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(УчетнаяЗапись, Перечисления.ВидыПапокПисем.Корзина);
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоОбъект) Тогда
		Если ЗначениеЗаполнено(ПисьмоОбъект.ПодготовленоКОтправке) Тогда
			ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;
	ПоместитьПисьмоВПапку(ПисьмоОбъект, Корзина);
	
КонецПроцедуры

// Помещает письма в папку Корзина учетной записи.
//
Процедура ПоместитьПисьмаВКорзину(МассивПисем) Экспорт
	
	Для каждого Письмо Из МассивПисем Цикл
		ПоместитьПисьмоВКорзину(Письмо);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак доступности письма текущему пользователю.
//
Функция ПисьмоДоступно(Письмо) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Письмо);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КОЛИЧЕСТВОМ ПИСЕМ В ПАПКАХ

// Возвращает количество писем во всех доступных папках
// с учетом настроек отображения количеств писем в каждой папке.
//
Функция ПолучитьКоличествоПисемВПапках(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Папка,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(СведенияОПисьмах.Прочтено, ЛОЖЬ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Прочтено,
		|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК Всего
		|ПОМЕСТИТЬ ТаблицаКоличествоПисем
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиПисем КАК ПапкиПисем
		|		ПО ЭлектроннаяПочта.Папка = ПапкиПисем.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПисьмах КАК СведенияОПисьмах
		|		ПО ЭлектроннаяПочта.Ссылка = СведенияОПисьмах.Письмо
		|			И (СведенияОПисьмах.Пользователь = &Пользователь)
		|ГДЕ
		|	(НЕ ЭлектроннаяПочта.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиПисем.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Папка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ВариантОтображенияКоличестваПисем = ЗНАЧЕНИЕ(Перечисление.ВариантыОтображенияКоличестваПисемВПапке.Все)
		|			ТОГДА ЕСТЬNULL(ТаблицаКоличествоПисем.Всего, 0)
		|		КОГДА ПапкиПисем.ВариантОтображенияКоличестваПисем = ЗНАЧЕНИЕ(Перечисление.ВариантыОтображенияКоличестваПисемВПапке.Непрочтенные)
		|			ТОГДА ЕСТЬNULL(ТаблицаКоличествоПисем.Всего, 0) - ЕСТЬNULL(ТаблицаКоличествоПисем.Прочтено, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	ЕСТЬNULL(ТаблицаКоличествоПисем.Всего, 0) КАК Всего,
		|	ЕСТЬNULL(ТаблицаКоличествоПисем.Прочтено, 0) КАК Прочтено
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоПисем КАК ТаблицаКоличествоПисем
		|		ПО ПапкиПисем.Ссылка = ТаблицаКоличествоПисем.Папка");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКоличестваПисем = Новый Структура;
		СтруктураКоличестваПисем.Вставить("Количество", Выборка.Количество);
		СтруктураКоличестваПисем.Вставить("Всего", Выборка.Всего);
		СтруктураКоличестваПисем.Вставить("Прочтено", Выборка.Прочтено);
		Результат.Вставить(Выборка.Ссылка, СтруктураКоличестваПисем);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество писем в папке
// с учетом настроек отображения количеств писем.
//
Функция ПолучитьКоличествоПисемВПапке(Папка, Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ВариантОтображенияКоличестваПисем = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		Папка,
		"ВариантОтображенияКоличестваПисем");
	
	Если ВариантОтображенияКоличестваПисем = Перечисления.ВариантыОтображенияКоличестваПисемВПапке.НеОтображать Тогда
		Возврат 0;
		
	ИначеЕсли ВариантОтображенияКоличестваПисем = Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Все Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК Количество
			|ИЗ
			|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
			|ГДЕ
			|	ЭлектроннаяПочта.Папка = &Папка
			|	И НЕ ЭлектроннаяПочта.ПометкаУдаления");
		Запрос.УстановитьПараметр("Папка", Папка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат РезультатЗапроса.Выгрузить()[0].Количество;
		
	ИначеЕсли ВариантОтображенияКоличестваПисем = Перечисления.ВариантыОтображенияКоличестваПисемВПапке.Непрочтенные Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК Количество
			|ИЗ
			|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПисьмах КАК СведенияОПисьмах
			|		ПО ЭлектроннаяПочта.Ссылка = СведенияОПисьмах.Письмо
			|			И (СведенияОПисьмах.Пользователь = &Пользователь)
			|			И (СведенияОПисьмах.Прочтено)
			|ГДЕ
			|	ЭлектроннаяПочта.Папка = &Папка
			|	И СведенияОПисьмах.Письмо ЕСТЬ NULL 
			|	И НЕ ЭлектроннаяПочта.ПометкаУдаления");
		Запрос.УстановитьПараметр("Папка", Папка);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат РезультатЗапроса.Выгрузить()[0].Количество;
		
	КонецЕсли;
	
КонецФункции

// Возвращает полное количество писем в папке.
//
Функция ПолучитьКоличествоВсехПисемВПапке(Папка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭлектроннаяПочта.Ссылка) КАК Количество
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Папка = &Папка");
	Запрос.УстановитьПараметр("Папка", Папка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Количество;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ПЕРЕПИСКИ

// Возвращает связанное письмо. Ищет по связям ПисьмоОтправленоВОтветНа, ПолученоВОтветНа, ПересылкаПисьма.
//
Функция ПолучитьПисьмоОснование(Письмо)
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПолученоВОтветНаДокумент);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		
		Основание = СвязиДокументов.ПолучитьСвязанныйДокумент(Письмо, Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
		Если ЗначениеЗаполнено(Основание) Тогда
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Основание, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				Возврат Основание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает массив писем, находящихся в дереве переписки.
//
Функция ПолучитьПисьмаПереписки(Письмо)
	
	ТекКореньПереписки = ПолучитьКорневоеПисьмо(Письмо);
	Переписка = Новый Массив;
	Переписка.Добавить(ТекКореньПереписки);
	ДобавитьВПерепискуПодчиненныеПисьмаИерархически(Переписка, ТекКореньПереписки);
	
	Возврат Переписка;
	
КонецФункции

// Возвращает корневое письмо дерева переписки.
//
Функция ПолучитьКорневоеПисьмо(Знач Письмо) Экспорт
	
	КорневоеПисьмо = Письмо;
	Письмо = ПолучитьПисьмоОснование(Письмо);
	Пока ЗначениеЗаполнено(Письмо) Цикл
		КорневоеПисьмо = Письмо;
		Письмо = ПолучитьПисьмоОснование(Письмо);
	КонецЦикла;
	
	Возврат КорневоеПисьмо;
	
КонецФункции

Процедура ДобавитьВПерепискуПодчиненныеПисьмаИерархически(Переписка, ТекКореньПереписки)
	
	Для каждого ПодчиненноеПисьмо Из ПолучитьПодчиненныеПисьма(ТекКореньПереписки) Цикл
		Переписка.Добавить(ПодчиненноеПисьмо);
		ДобавитьВПерепискуПодчиненныеПисьмаИерархически(Переписка, ПодчиненноеПисьмо);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив подчиненных писем.
//
Функция ПолучитьПодчиненныеПисьма(КорневоеПисьмо) Экспорт
	
	МассивПисем = Новый Массив;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(КорневоеПисьмо) Тогда
		Письма = СвязиДокументов.ПолучитьСвязанныеДокументы(КорневоеПисьмо, Справочники.ТипыСвязей.ОтправленОтветныйДокумент);
		Для каждого Письмо Из Письма Цикл
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				МассивПисем.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		Письма = СвязиДокументов.ПолучитьСвязанныеДокументы(КорневоеПисьмо, Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо);
		Для каждого Письмо Из Письма Цикл
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				МассивПисем.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(КорневоеПисьмо) Тогда
		Письма = СвязиДокументов.ПолучитьСвязанныеДокументы(КорневоеПисьмо, Справочники.ТипыСвязей.ПолученОтветныйДокумент);
		Для каждого Письмо Из Письма Цикл
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				МассивПисем.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		Письма = СвязиДокументов.ПолучитьСвязанныеДокументы(КорневоеПисьмо, Справочники.ТипыСвязей.ПолученоОтветноеПисьмо);
		Для каждого Письмо Из Письма Цикл
			ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "ПометкаУдаления");
			Если Не ПометкаУдаления Тогда
				МассивПисем.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивПисем;
	
КонецФункции

// Возвращает количество писем в переписке, в которую входит текущее письмо.
//
Функция ПолучитьКоличествоПисемВПереписке(Письмо) Экспорт
	
	КорневоеПисьмо = ПолучитьКорневоеПисьмо(Письмо);
	Результат = 1 + ПолучитьКоличествоПодчиненныхПисемИерархически(КорневоеПисьмо);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоПодчиненныхПисемИерархически(КорневоеПисьмо)
	
	МассивПисем = ПолучитьПодчиненныеПисьма(КорневоеПисьмо);
	Результат = МассивПисем.Количество();
	Для каждого Письмо Из МассивПисем Цикл
		Результат = Результат + ПолучитьКоличествоПодчиненныхПисемИерархически(Письмо);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ПИСЬМА

// Возвращает таблицу значений с информацией о вложениях письма.
//
Функция ПолучитьФайлыПисьма(
	Письмо,
	ФормироватьПредставлениеРазмера = Ложь,
	ВключатьПомеченныеНаУдаление = Ложь,
	ТолькоСИдентификаторами = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Файлы.Ссылка) КАК Представление,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	ЕСТЬNULL(ИдентификаторыПочтовыхВложений.Идентификатор, """") КАК ИДФайлаЭлектронногоПисьма,
		|	ВЫБОР
		|		КОГДА Файлы.ТекущаяВерсияРасширение = """"
		|			ТОГДА Файлы.Наименование
		|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение
		|	КОНЕЦ КАК ИмяФайла,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.Редактирует КАК Редактирует,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь,
		|	Файлы.ТекущаяВерсия
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ПО (ИдентификаторыПочтовыхВложений.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Письмо
		|	И (&ВключатьПомеченныеНаУдаление
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|	И НЕ(&ТолькоСИдентификаторами
		|				И ИдентификаторыПочтовыхВложений.Идентификатор ЕСТЬ NULL )");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("ВключатьПомеченныеНаУдаление", ВключатьПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТолькоСИдентификаторами", ТолькоСИдентификаторами);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ФормироватьПредставлениеРазмера Тогда
		Для каждого СтрокаТаблицы Из Результат Цикл
			СтрокаТаблицы.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(СтрокаТаблицы.Размер);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак наличия непомеченных на удаление вложений письма.
// Картинки в теле письма вложениями не считаются.
//
Функция ПисьмоИмеетВложения(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ПО (ИдентификаторыПочтовыхВложений.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Письмо
		|	И (НЕ Файлы.ПометкаУдаления)
		|	И ЕСТЬNULL(ИдентификаторыПочтовыхВложений.Идентификатор, """") = """"");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает Массив структур с информацией о вложениях письма
// Результат (Массив)
// - Элемент(Структура)
//   - Ссылка (Файл)
//   - Представление (Строка)
//   - ИмяФайла (Строка)
//   - ИндексКартинки (Число)
//   - Размер (Число)
//   - РазмерПредставление (Строка)
//   - ПометкаУдаления (Булево)
//   - Редактирует (Пользователь)
//   - РедактируетТекущийПользователь (Булево)
//
Функция ПолучитьИнформациюОВложениях(МассивФайлов) Экспорт
	
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Файлы.Ссылка) КАК Представление,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	ВЫБОР
		|		КОГДА Файлы.ТекущаяВерсияРасширение = """"
		|			ТОГДА Файлы.Наименование
		|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение
		|	КОНЕЦ КАК ИмяФайла,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.Редактирует КАК Редактирует,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&МассивФайлов)");
	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИндексКартинки = Выборка.ИндексКартинки;
		Если Выборка.ПометкаУдаления Тогда
			ИндексКартинки = ИндексКартинки + 1;
		КонецЕсли;
		ФайлИнфо = Новый Структура;
		ФайлИнфо.Вставить("Ссылка", Выборка.Ссылка);
		ФайлИнфо.Вставить("Представление", Выборка.Представление);
		ФайлИнфо.Вставить("ИмяФайла", Выборка.ИмяФайла);
		ФайлИнфо.Вставить("ИндексКартинки", ИндексКартинки);
		ФайлИнфо.Вставить("Размер", Выборка.Размер);
		ФайлИнфо.Вставить("РазмерПредставление", РаботаСоСтроками.ПолучитьРазмерСтрокой(Выборка.Размер));
		ФайлИнфо.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ФайлИнфо.Вставить("Редактирует", Выборка.Редактирует);
		ФайлИнфо.Вставить("РедактируетТекущийПользователь", Выборка.РедактируетТекущийПользователь);
		
		Результат.Добавить(ФайлИнфо);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЦЕЙ ПОЛУЧАТЕЛЕЙ ПИСЬМА

// Возвращает строку почтовых адресов.
//
Функция ТаблицаПолучателейВСтроку(Знач ТаблицаПолучателей, УчетнаяЗапись = Неопределено) Экспорт
	
	Если ТаблицаПолучателей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаКВозврату = "";
	Для каждого Получатель Из ТаблицаПолучателей Цикл
		
		СтрокаКВозврату = СтрокаКВозврату + 
			ПолучитьПредставлениеАдресата(
				Получатель.Контакт,
				Получатель.ОтображаемоеИмя,
				Получатель.Адрес,
				УчетнаяЗапись) + "; ";
					
	КонецЦикла;
	
	Возврат СтрокаКВозврату;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТЕКСТОМ ПИСЬМА

// Возвращает текст в формате HTML для отображения тела письма.
//
Функция СформироватьТекстHTMLДляПисьма(
	Письмо,
	УникальныйИдентификатор,
	Знач ВыводитьШапку = Истина) Экспорт
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		Возврат СформироватьТекстHTMLДляВходящегоПисьма(
			Письмо,
			УникальныйИдентификатор,
			ВыводитьШапку);
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		Возврат СформироватьТекстHTMLДляИсходящегоПисьма(
			Письмо,
			УникальныйИдентификатор,
			ВыводитьШапку);
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид письма.'");
	КонецЕсли;
	
КонецФункции

Функция СформироватьТекстHTMLДляВходящегоПисьма(Письмо, УникальныйИдентификатор, Знач ВыводитьШапку = Истина)
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	СтруктураТекстаПисьма = ПисьмоОбъект.ПолучитьСтруктуруТекстаПисьма();
	Текст = СтруктураТекстаПисьма.Текст;
	Кодировка = СтруктураТекстаПисьма.Кодировка;
	
	ТекстHTML = "";
	Если СтруктураТекстаПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		ТекстHTML = Текст;
		ПодготовитьКартинкиHTML(ТекстHTML, Письмо, УникальныйИдентификатор);
	Иначе // ПростойТекст
		ТекстHTML = РаботаСHTML.ПолучитьТекстHTMLИзПростогоТекста(
			Текст,
			Кодировка);
	КонецЕсли;
	
	Если ВыводитьШапку Тогда
		ПредставлениеОтправителя = ПолучитьПредставлениеАдресата(
				ПисьмоОбъект.ОтправительКонтакт,
				ПисьмоОбъект.ОтправительОтображаемоеИмя,
				ПисьмоОбъект.ОтправительАдрес);
				
		ПредставлениеДатыОтправления = Формат(ПисьмоОбъект.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
		
		ШапкаИнфо = Новый Структура;
		ШапкаИнфо.Вставить("От", ПредставлениеОтправителя);
		ШапкаИнфо.Вставить("Отправлено", ПредставлениеДатыОтправления);
		ШапкаИнфо.Вставить("Кому", ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиПисьма.Выгрузить()));
		ШапкаИнфо.Вставить("Копии", ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиКопий.Выгрузить()));
		ШапкаИнфо.Вставить("Тема", ПисьмоОбъект.Тема);
		
		ВстравитьШапкуПисьмаВТекстHTML(ТекстHTML, ШапкаИнфо);
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

Процедура ВстравитьШапкуПисьмаВТекстHTML(ТекстHTML, ШапкаИнфо)
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	// Нахождение места для вставки текста шапки
	ВставитьПеред = 1;
	ПозицияHTML = СтрНайти(НРегТекстHTML, "<html>");
	Если ПозицияHTML > 0 Тогда
		ПозицияBody = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "<body", ПозицияHTML);
		Если ПозицияBody > 0 Тогда
			ПозицияЗакрывающейсяСкобки = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияBody);
			Если ПозицияЗакрывающейсяСкобки > 0 Тогда
				ВставитьПеред = ПозицияЗакрывающейсяСкобки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование текста шапки письма
	ШапкаHTML =
		"<div style='font-size=small;font-family=Arial'>
		|<b>[НадписьОт]:</b> [От]<br>
		|<b>[НадписьОтправлено]:</b> [Отправлено]<br>
		|<b>[НадписьКому]:</b> [Кому]<br>
		|<b>[НадписьКопии]:</b> [Копии]<br>
		|<b>[НадписьТема]:</b> [Тема]<br>
		|</div>
		|<hr>";
	
	Если ПустаяСтрока(ШапкаИнфо.Копии) Тогда
		ШапкаHTML = СтрЗаменить(ШапкаHTML, Символы.ПС + "<b>[НадписьКопии]:</b> [Копии]<br>", "");
	КонецЕсли;
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьОт]", НСтр("ru = 'От'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьОтправлено]", НСтр("ru = 'Отправлено'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьКому]", НСтр("ru = 'Кому'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьКопии]", НСтр("ru = 'Копии'"));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[НадписьТема]", НСтр("ru = 'Тема'"));
	
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[От]", РаботаСHTML.ЗаменитьСпецСимволыHTML(ШапкаИнфо.От));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Отправлено]", РаботаСHTML.ЗаменитьСпецСимволыHTML(ШапкаИнфо.Отправлено));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Кому]", РаботаСHTML.ЗаменитьСпецСимволыHTML(ШапкаИнфо.Кому));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Копии]", РаботаСHTML.ЗаменитьСпецСимволыHTML(ШапкаИнфо.Копии));
	ШапкаHTML = СтрЗаменить(ШапкаHTML, "[Тема]", РаботаСHTML.ЗаменитьСпецСимволыHTML(ШапкаИнфо.Тема));
	
	// Вставка
	ТекстHTML = Лев(ТекстHTML, ВставитьПеред - 1) + ШапкаHTML + Сред(ТекстHTML, ВставитьПеред);
	
КонецПроцедуры

// Формирует и возвращает HTML текст письма. Если в тексте есть ссылки на картинки,
// они загружаются во временное хранилище и ссылки в HTML
// заменяются на навигационные ссылки картинов во временном хранилище.
//
Функция СформироватьТекстHTMLДляИсходящегоПисьма(Письмо, УникальныйИдентификатор, ВыводитьШапку = Истина)
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	СтруктураТекстаПисьма = ПисьмоОбъект.ПолучитьСтруктуруТекстаПисьма();
	Текст = СтруктураТекстаПисьма.Текст;
	Кодировка = СтруктураТекстаПисьма.Кодировка;
	
	ТекстHTML = РаботаСHTML.ПолучитьТекстHTMLИзПростогоТекста(
		Текст,
		Кодировка);
	
	Если ВыводитьШапку Тогда
		ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись);
		Если ДанныеУчетнойЗаписи.ВПредставлениеВключатьИмяПользователя Тогда
			ОтправительОтображаемоеИмя = ДанныеУчетнойЗаписи.ИмяПользователя;
		Иначе
			ОтправительОтображаемоеИмя = "";
		КонецЕсли;
		ПредставлениеОтправителя = ПолучитьПредставлениеАдресата(
			Неопределено, 
			ОтправительОтображаемоеИмя,
			ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
		ПредставлениеДатыОтправления = Формат(ПисьмоОбъект.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
		
		ШапкаИнфо = Новый Структура;
		ШапкаИнфо.Вставить("От", ПредставлениеОтправителя);
		ШапкаИнфо.Вставить("Отправлено", ПредставлениеДатыОтправления);
		ШапкаИнфо.Вставить("Кому", ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиПисьма.Выгрузить()));
		ШапкаИнфо.Вставить("Копии", ТаблицаПолучателейВСтроку(ПисьмоОбъект.ПолучателиКопий.Выгрузить()));
		ШапкаИнфо.Вставить("Тема", ПисьмоОбъект.Тема);
		
		ВстравитьШапкуПисьмаВТекстHTML(ТекстHTML, ШапкаИнфо);
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Загужает во временное хранилище картинки документа HTML
// заменяет ссылки в документа на навигационные ссылки во временном хранилище
//
Процедура ПодготовитьКартинкиДокументаHTML(ДокументHTML, Письмо, УникальныйИдентификатор)
	
	ФайлыПисьма = ПолучитьФайлыПисьма(
		Письмо,
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		Истина); // ТолькоСИдентификаторами
	
	Если ФайлыПисьма.Количество() > 0 Тогда
		// Соответствие ВременныеФайлы хранит
		// соответствие между ссылкой на версию файла (картинки)
		// и адресом во временном хранилище.
		ВременныеФайлы = Новый Соответствие;
		Для каждого ФайлПисьмаИнфо Из ФайлыПисьма Цикл
			Для каждого Картинка Из ДокументHTML.Картинки Цикл
				АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
				Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ФайлПисьмаИнфо.ИДФайлаЭлектронногоПисьма) > 0 Тогда
					НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
					// Проверка, может картинка уже помещена в хранилище.
					НавигационнаяССылка = ВременныеФайлы.Получить(ФайлПисьмаИнфо.ТекущаяВерсия);
					Если Не ЭтоАдресВременногоХранилища(НавигационнаяССылка) Тогда
						НавигационнаяССылка = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
							ФайлПисьмаИнфо.ТекущаяВерсия, // ВерсияСсылка
							УникальныйИдентификатор); // ИдентификаторФормы
						ВременныеФайлы.Вставить(ФайлПисьмаИнфо.ТекущаяВерсия, НавигационнаяССылка);
					КонецЕсли;
					НовыйАтрибутКартинки.ТекстовоеСодержимое = НавигационнаяССылка;
					Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьКартинкиHTML(ТекстHTML, Письмо, УникальныйИдентификатор)
	
	ФайлыПисьма = ПолучитьФайлыПисьма(
		Письмо,
		Ложь, // ФормироватьПредставлениеРазмера
		Ложь, // ВключатьПомеченныеНаУдаление
		Истина); // ТолькоСИдентификаторами
		
	ТаблицаОбъектовСтраницы = Новый ТаблицаЗначений();
	ТаблицаОбъектовСтраницы.Колонки.Добавить("Ключ");
	ТаблицаОбъектовСтраницы.Колонки.Добавить("Адрес");
	ТаблицаОбъектовСтраницы.Колонки.Добавить("ИмяЛокальногоФайла");
	
	Для каждого ФайлПисьма Из ФайлыПисьма Цикл
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		ЧислоВхождений = СтрЧислоВхождений(ТекстHTML, ИсточникФайла);
		Если ЧислоВхождений > 0 Тогда
			НавигационнаяССылка = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(
				ФайлПисьма.ТекущаяВерсия, // ВерсияСсылка
				УникальныйИдентификатор); // ИдентификаторФормы
			ТекстHTML = СтрЗаменить(ТекстHTML, "cid:" + ИсточникФайла, НавигационнаяССылка);
			ТекстHTML = СтрЗаменить(ТекстHTML, ИсточникФайла, НавигационнаяССылка);
			
			Если ЗначениеЗаполнено(ФайлПисьма.ТекущаяВерсия) Тогда
				НовСтр = ТаблицаОбъектовСтраницы.Добавить();
				НовСтр.Ключ = ИсточникФайла;
				НовСтр.Адрес = НавигационнаяССылка;
				НовСтр.ИмяЛокальногоФайла = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(ЗначениеВСтрокуВнутр(ТаблицаОбъектовСтраницы),Новый УникальныйИдентификатор());
	ТекстHTML = "##<"+Адрес+">##"+ТекстHTML;
КонецПроцедуры

Процедура ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML, ШапкаИнфо)
	
	Если ДокументHTML.Тело = Неопределено Тогда
		ЭлементТелоПисьма = ДокументHTML.СоздатьЭлемент("body");
		ДокументHTML.Тело = ЭлементТелоПисьма;
	Иначе
		ЭлементТелоПисьма = ДокументHTML.Тело;
	КонецЕсли;
	
	// Вывод горизонтального разделителя
	ЭлементРазделитель = ДокументHTML.СоздатьЭлемент("hr");
	ЭлементТелоПисьма.ВставитьПеред(ЭлементРазделитель, ЭлементТелоПисьма.ДочерниеУзлы[0]);
	
	// Вывод шапки письма
	ЭлементШапка = ДокументHTML.СоздатьЭлемент("div");
	ЭлементТелоПисьма.ВставитьПеред(ЭлементШапка, ЭлементТелоПисьма.ДочерниеУзлы[0]);
	СформироватьЭлементДанныхШапкиПисьма(ЭлементШапка, ШапкаИнфо);
	
КонецПроцедуры

Функция СформироватьЭлементДанныхШапкиПисьма(ЭлементРодитель, ШапкаИнфо)
	
	ПолеОт = ШапкаИнфо.От;
	ПолеОтправлено = ШапкаИнфо.Отправлено;
	ПолеКому = ШапкаИнфо.Кому;
	ПолеКопии = ШапкаИнфо.Копии;
	ПолеТема = ШапкаИнфо.Тема;
	
	ЭлементШрифт = РаботаСHTML.ДобавитьЭлементСАтрибутами(
		ЭлементРодитель,
		"Font",
		Новый Структура("size, face", "2", "Arial"));
	ДобавитьСтрокуДанныхИсходногоПисьма(
		ЭлементШрифт, // ЭлементРодитель
		НСтр("ru = 'От'"), // Атрибут
		ПолеОт); // Значение
	ДобавитьСтрокуДанныхИсходногоПисьма(
		ЭлементШрифт,
		НСтр("ru = 'Отправлено'"),
		Формат(ПолеОтправлено, "ДЛФ=DDT"));
	ДобавитьСтрокуДанныхИсходногоПисьма(
		ЭлементШрифт,
		НСтр("ru = 'Кому'"),
		ПолеКому);
	Если Не ПустаяСтрока(ПолеКопии) Тогда
		ДобавитьСтрокуДанныхИсходногоПисьма(
			ЭлементШрифт,
			НСтр("ru = 'Копии'"),
			ПолеКопии);
	КонецЕсли;
	ДобавитьСтрокуДанныхИсходногоПисьма(
		ЭлементШрифт,
		НСтр("ru = 'Тема'"),
		ПолеТема);
	
	Возврат ЭлементШрифт;
	
КонецФункции

Процедура ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементРодитель, Атрибут, Значение)

	РаботаСHTML.ДобавитьТекстовыйУзел(ЭлементРодитель,Атрибут + ": ", Истина);
	РаботаСHTML.ДобавитьТекстовыйУзел(ЭлементРодитель,Значение,, Истина);

КонецПроцедуры

Функция СформироватьПростойТекстДляПисьма(Письмо) Экспорт
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	СтруктураТекстаПисьма = ПисьмоОбъект.ПолучитьСтруктуруТекстаПисьма();
	
	ПростойТекст = "";
	Если СтруктураТекстаПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
		ПростойТекст = СтруктураТекстаПисьма.Текст;
		
	ИначеЕсли СтруктураТекстаПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		ТекстHTML = СтруктураТекстаПисьма.Текст;
		ПростойТекст = РаботаСHTML.ПолучитьПростойТекстИзHTML(ТекстHTML, ПисьмоОбъект.Кодировка);
		РаботаСоСтроками.УдалитьПустыеСтроки(ПростойТекст);
		
	ИначеЕсли СтруктураТекстаПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.РазмеченныйТекст Тогда
		РазмеченныйТекст = СтруктураТекстаПисьма.Текст;
		ПростойТекст = РаботаСHTML.ПолучитьПростойТекстИзHTML(РазмеченныйТекст, Письмо.Кодировка);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'В функцию СформироватьПростойТекстДляПисьма передан некорректный параметр'");
		
	КонецЕсли;
	
	Возврат ПростойТекст;
	
КонецФункции

// Возвращает шапку ответного письма в виде простого текста.
//
Функция СформироватьШапкуПисьмаПростойТекст(Письмо) Экспорт
	
	Если ТипЗнч(Письмо.Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ПредставлениеОтправителя = ПолучитьПредставлениеАдресата(
			Письмо.ОтправительКонтакт,
			Письмо.ОтправительОтображаемоеИмя,
			Письмо.ОтправительАдрес);
	Иначе
		ПредставлениеОтправителя = "";
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
			ПредставлениеОтправителя = ПолучитьПредставлениеАдресата(
				Пользователи.ТекущийПользователь(),
				Письмо.ОтправительОтображаемоеИмя,
				Письмо.ОтправительАдрес);
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
			ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(Письмо.УчетнаяЗапись);
			ПредставлениеОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДатыОтправления = Формат(Письмо.ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
	Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru =
			|'---Исходное письмо--------------------------------------------------------------
			|От: %1
			|Отправлено: %2
			|Кому: %3
			|Тема: %4
			|--------------------------------------------------------------------------------'"),
		ПредставлениеОтправителя,
		ПредставлениеДатыОтправления,
		Письмо.ПолучателиПисьмаСтрокой,
		Письмо.Тема);
	Возврат Шапка;
	
КонецФункции

Функция ПолучитьПредставлениеАдресата(
	Контакт,
	ОтображаемоеИмя,
	Адрес,
	УчетнаяЗапись = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ОтображаемоеИмя) Тогда
		Если Найти(ОтображаемоеИмя, Адрес) > 0 Тогда
			СтрокаКВозврату = ОтображаемоеИмя;
		Иначе
			СтрокаКВозврату = ОтображаемоеИмя + " <" + Адрес + ">";
		КонецЕсли;
	Иначе
		СтрокаКВозврату = Адрес;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		СтрокаКВозврату = "";
		// Если у контакта несколько адресов, то покажем его с адресом.
		// Если заполненный адрес только один, то покажем без адреса.
		КоличествоЗаполненныхАдресов = 0;
		ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
		Запрос = Новый Запрос;
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ 
			|	Количество(Таблица.Ссылка)
			|ИЗ
			|	%1 КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
			|			И (Таблица.Ссылка = &Ссылка)",
			ИмяТаблицы);
		Запрос.УстановитьПараметр("Ссылка", Контакт);	
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка[0] = 1 Тогда
					ДобавитьЗначениеКСтрокеЧерезРазделитель(
						СтрокаКВозврату,
						", ",
						Строка(Контакт));
				Иначе
					ДобавитьЗначениеКСтрокеЧерезРазделитель(
						СтрокаКВозврату,
						", ",
						РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
							Строка(Контакт),
							Адрес));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Контакты = ПолучитьКонтактыПоПочтовомуАдресу(Адрес, УчетнаяЗапись);
		Если Контакты.Количество() > 0 Тогда
			КонтактПолученный = Контакты.Получить(Адрес);
			СтрокаКВозврату = ПолучитьПредставлениеАдресата(
				КонтактПолученный,
				ОтображаемоеИмя,
				Адрес);
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаКВозврату;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРЕДМЕТАМИ ПИСЕМ

// Устанавливает или очищает предмет письма.
Процедура УстановитьПредметПисьма(Письмо, Предмет, УникальныйИдентификаторФормы = Неопределено)
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Письмо,, УникальныйИдентификаторФормы);
	ПисьмоОбъект.Предмет = Предмет;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

// Устанавливает предмет всем неопредмеченным письмам переписки
// или письмам, у которых предмет совпадает с параметром СтарыйПредмет
//
Процедура ЗаменитьПредметПереписки(
	Письмо,
	Предмет,
	СтарыйПредмет = Неопределено,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Если СтарыйПредмет = Неопределено Тогда
		СтарыйПредмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Предмет");
	КонецЕсли;
	СписокПисем = ПолучитьПисьмаПереписки(Письмо);
	Для каждого ПисьмоИзПереписки Из СписокПисем Цикл
		Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПисьмоИзПереписки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПисьмоИзПерепискиПредмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПисьмоИзПереписки, "Предмет");
		
		НужноМенятьПредмет = Ложь;
		
		Если ПисьмоИзПереписки <> Письмо И
			(Не ЗначениеЗаполнено(ПисьмоИзПерепискиПредмет)
			Или ПисьмоИзПерепискиПредмет = СтарыйПредмет) Тогда
			НужноМенятьПредмет = Истина;
		КонецЕсли;
		
		Если ПисьмоИзПереписки = Письмо
			И ПисьмоИзПерепискиПредмет <> Предмет Тогда
			НужноМенятьПредмет = Истина;
		КонецЕсли;
		
		Если НужноМенятьПредмет Тогда
			УстановитьПредметПисьма(ПисьмоИзПереписки, Предмет, УникальныйИдентификаторФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив корневых писем в переписке по предмету.
// Корневыми считаются письма или документы (входящие, исходящие)
// которые либо первые в переписке либо их основание содержит переписку
// по другому предмету.
//
Функция ПолучитьКорневыеПисьмаПоПредмету(Предмет) Экспорт
	
	ТипыСвязи = Новый Массив;
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ОтправленВОтветНа);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученВОтветНа);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученВОтветНаПисьмо);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученоВОтветНаДокумент);
	ТипыСвязи.Добавить(Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаПисемПоПредмету
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.Предмет = &Предмет
		|	И НЕ ЭлектроннаяПочта.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПисемПоПредмету.Ссылка КАК Ссылка,
		|	СвязиДокументов.СвязанныйДокумент
		|ПОМЕСТИТЬ СвязанныеПисьмаПоПредмету
		|ИЗ
		|	ТаблицаПисемПоПредмету КАК ТаблицаПисемПоПредмету
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ТаблицаПисемПоПредмету.Ссылка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи В (&ТипыСвязи))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязанныеПисьмаПоПредмету.Ссылка КАК Ссылка
		|ИЗ
		|	СвязанныеПисьмаПоПредмету КАК СвязанныеПисьмаПоПредмету
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвязанныеПисьмаПоПредмету КАК СвязанныеДокументы
		|		ПО СвязанныеПисьмаПоПредмету.СвязанныйДокумент = СвязанныеДокументы.Ссылка
		|ГДЕ
		|	СвязанныеДокументы.Ссылка ЕСТЬ NULL");
	Запрос.УстановитьПараметр("ТипыСвязи", ТипыСвязи);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив корневых писем в переписке по предмету.
//
Функция ПолучитьИнформациюКорневыхПисемПоПредмету(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка,
		|	ЭлектроннаяПочта.Дата,
		|	ЭлектроннаяПочта.Тема
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ЭлектроннаяПочта.Ссылка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПисьмоОтправленоВОтветНа)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоВОтветНаДокумент)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоВОтветНаПисьмо))
		|ГДЕ
		|	ЭлектроннаяПочта.Предмет = &Предмет
		|	И СвязиДокументов.Документ ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата";
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив писем в переписке по связям ОтправленОтвет ПолученОтвет ПересланоПисьмом НаОснованииПисьма
//
Функция ПолучитьИнформациюПисемПоСвязям(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяПочта.Ссылка КАК Ссылка,
		|	ЭлектроннаяПочта.Дата,
		|	ЭлектроннаяПочта.Тема
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО ЭлектроннаяПочта.Ссылка = СвязиДокументов.СвязанныйДокумент
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПисьмоОснование)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.НаОснованииПисьма))
		|ГДЕ
		|	СвязиДокументов.Документ = &Предмет
		|	И ЭлектроннаяПочта.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив подчиненных писем в переписке по предмету.
//
Функция ПолучитьПодчиненныеПисьмаПоПредмету(Письмо, Предмет) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|		ПО (ЭлектроннаяПочта.Ссылка = СвязиДокументов.СвязанныйДокумент)
		|			И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
		|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом))
		|ГДЕ
		|	СвязиДокументов.Документ = &Письмо
		|	И ЭлектроннаяПочта.Предмет = &Предмет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектроннаяПочта.Дата");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает список подписей пользователеля.
//
Функция ПолучитьСписокПодписейПользователя(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодписиПисемПользователей.Наименование КАК Наименование,
		|	ПодписиПисемПользователей.Подпись КАК Подпись
		|ИЗ
		|	Справочник.ПодписиПисемПользователей КАК ПодписиПисемПользователей
		|ГДЕ
		|	ПодписиПисемПользователей.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Подпись, Выборка.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает проект всем неопроекченным письмам переписки
// или письмам, у которых проект совпадает с параметром СтарыйПроект
//
Процедура ЗаменитьПроектПереписки(
	Письмо,
	Проект,
	СтарыйПроект = Неопределено,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Если СтарыйПроект = Неопределено Тогда
		СтарыйПроект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Проект");
	КонецЕсли;
	СписокПисем = ПолучитьПисьмаПереписки(Письмо);
	
	Для каждого ПисьмоИзПереписки Из СписокПисем Цикл
		
		ПисьмоИзПерепискиПроект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПисьмоИзПереписки, "Проект");
		
		НужноМенятьПроект = Ложь;
		
		Если ПисьмоИзПереписки <> Письмо И
			(Не ЗначениеЗаполнено(ПисьмоИзПерепискиПроект)
			Или ПисьмоИзПерепискиПроект = СтарыйПроект) Тогда
			НужноМенятьПроект = Истина;
		КонецЕсли;
		
		Если ПисьмоИзПереписки = Письмо
			И ПисьмоИзПерепискиПроект <> Проект Тогда
			НужноМенятьПроект = Истина;
		КонецЕсли;
		
		Если НужноМенятьПроект Тогда
			Попытка
				УстановитьПроектПисьма(ПисьмоИзПереписки, Проект, УникальныйИдентификаторФормы);
			Исключение
				// Письмо может быть заблокировано другим пользователем.
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает проект письма.
//
Процедура УстановитьПроектПисьма(Письмо, Проект, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Письмо,, УникальныйИдентификаторФормы);
	ПисьмоОбъект.Проект = Проект;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УЧЕТНЫМИ ЗАПИСЯМИ

// Возвращает признак наличия писем по учетной записи.
//
Функция ЕстьПисьмаУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектроннаяПочта.Ссылка
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
		|ГДЕ
		|	ЭлектроннаяПочта.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает учетную запись или Неопределено.
//
Функция ПолучитьУчетнуюЗаписьДляОтправки() Экспорт
	
	ОсновнаяУчетнаяЗапись =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ОсновнаяУчетнаяЗапись",
			Неопределено);
	
	Если Почта.ЭтоУчетнаяЗапись(ОсновнаяУчетнаяЗапись)
		И ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) Тогда
		Возврат ОсновнаяУчетнаяЗапись;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИспользоватьДляОтправки", Истина);
	ПараметрыОтбора.Вставить("ВариантИспользования", Перечисления.ВариантыИспользованияПочты.Встроенная);
	УчетныеЗаписи = Почта.ПолучитьУчетныеЗаписиЭлектроннойПочты(ПараметрыОтбора);
	Если УчетныеЗаписи.Количество() = 1 Тогда
		Возврат УчетныеЗаписи[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ ПИСЕМ

Функция ПолучитьИнформациюОФлагеПисьма(Письмо) Экспорт
	
	Флаг = РегистрыСведений.ФлагиПисем.ПолучитьФлаг(Письмо, Пользователи.ТекущийПользователь());
	
	Если Флаг = Перечисления.ФлагиПисем.Красный Тогда
		Картинка = БиблиотекаКартинок.КрасныйФлаг;
	ИначеЕсли Флаг = Перечисления.ФлагиПисем.Синий Тогда
		Картинка = БиблиотекаКартинок.СинийФлаг;
	ИначеЕсли Флаг = Перечисления.ФлагиПисем.Желтый Тогда
		Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	ИначеЕсли Флаг = Перечисления.ФлагиПисем.Зеленый Тогда
		Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	ИначеЕсли Флаг = Перечисления.ФлагиПисем.Оранжевый Тогда
		Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	ИначеЕсли Флаг = Перечисления.ФлагиПисем.Лиловый Тогда
		Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	Иначе
		Картинка = БиблиотекаКартинок.ПустойФлаг;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Флаг", Флаг);
	Результат.Вставить("Картинка", Картинка);
	
	Возврат Результат;
	
КонецФункции


