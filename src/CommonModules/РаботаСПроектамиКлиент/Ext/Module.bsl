
// Открывает форму выбора проекта \ проектной задачи
Функция ВыбратьПроектЗадачу(Элемент, Проект, ПроектнаяЗадача) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Проект);
	ПараметрыФормы.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПроектаЗадачи", ПараметрыФормы, Элемент);
	
КонецФункции	

//Формирует список раскрытых элементов дерева задач
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			МассивСтрокОдногоУровня - массив задач одного уровня
//			СписокРаскрытыхЗадач - список, который содержит раскрытые элементы дерева задач
Процедура ПолучитьМассивРаскрытыхЗадач(ДеревоЭлемент, МассивСтрокОдногоУровня, СписокРаскрытыхЗадач) Экспорт
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		ИдЗадачи = СтрокаОдногоУровня.ПолучитьИдентификатор();
		Если ДеревоЭлемент.Развернут(ИдЗадачи) <> Неопределено 
			И ДеревоЭлемент.Развернут(ИдЗадачи) Тогда
			СписокРаскрытыхЗадач.Добавить(СтрокаОдногоУровня.Ссылка);
		КонецЕсли;
		ПолучитьМассивРаскрытыхЗадач(ДеревоЭлемент, СтрокаОдногоУровня.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	КонецЦикла;
	
КонецПроцедуры

//Раскрывает указанные элементы дерева
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево задач
//			СписокЗадачДляРазвертывания - список задач, которые необходимо развернуть в дереве
Процедура УстановитьРазвернутостьЭлементовДерева(ДеревоЭлемент, ДеревоРеквизит, СписокЗадачДляРазвертывания) Экспорт
	
	Если СписокЗадачДляРазвертывания <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокЗадачДляРазвертывания Цикл
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ЭлементСписка.Значение, Индекс);
			Если Индекс > -1 Тогда
				Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Количество() > 0 Тогда
					ДеревоЭлемент.Развернуть(ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьИдентификатор(), Ложь);
				Иначе
					Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя() <> Неопределено Тогда
						ДеревоЭлемент.Развернуть(ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в дереве текущую строку
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево задач
//			ТекущаяЗадача - задача, которую необходимо выделить в дереве 
Процедура УстановитьТекущуюЗадачуВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущаяЗадача) Экспорт
	
	Если ТекущаяЗадача <> Неопределено И
		НЕ ТекущаяЗадача.Пустая() Тогда
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущаяЗадача, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в дереве выделенную строку
//Параметры:ДеревоЭлемент - элемент формы, отображающий дерево задач
//			ДеревоРеквизит - реквизит формы типа ДеревоЗначений, содержащий дерево задач
//			ТекущаяЗадача - задача, которую необходимо выделить в дереве 
Процедура УстановитьВыделеннуюЗадачуВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущаяЗадача) Экспорт
	
	Если ТекущаяЗадача <> Неопределено И
		НЕ ТекущаяЗадача.Пустая() Тогда
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущаяЗадача, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ВыделенныеСтроки.Добавить(Индекс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Выполняет проверки перед стартом бизнес-процесса по проекту
Процедура ПередСтартомБизнесПроцесса(Объект, Отказ) Экспорт 
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда 
		Возврат;
	КонецЕсли;	
		
	МассивОшибок = Новый Массив;
	РаботаСПроектами.ПроверитьВозможностьСтартаБизнесПроцесса(Объект, МассивОшибок);
	
	Для Каждого ТекстВопроса Из МассивОшибок Цикл 
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Запуск процесса'"));
		Если Результат <> КодВозвратаДиалога.Да Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

// Выполняет проверку корректности срока исполнения в бизнес-процессе
Процедура ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(ПроектнаяЗадача, СрокПроцесса, Отказ) Экспорт
	
	ЗадатьВопрос = Ложь;
	ПлановаяДатаОкончания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "ТекущийПланОкончание");
	Если ЗначениеЗаполнено(ПлановаяДатаОкончания) Тогда
		ЗадатьВопрос = СрокПроцесса > ПлановаяДатаОкончания;
		Если ЗадатьВопрос Тогда
			ТекстВопроса = НСтр("ru = 'Срок исполнения процесса превышает плановую дату окончания проектной задачи. Продолжить?'");
			Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Запуск процесса'"));
			Если Результат <> КодВозвратаДиалога.Да Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры