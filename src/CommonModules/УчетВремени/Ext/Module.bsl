
// Возвращает основной вид работ пользователя из настроек учета времени.
//
Функция ПолучитьОсновнойВидРабот() Экспорт
	
	Возврат ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ВидРабот");

КонецФункции

// Возвращает способ указания времени пользователя из настроек учета времени.
//
Функция ПолучитьСпособУказанияВремени() Экспорт 
	
	СпособУказанияВремени = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "СпособУказанияВремени");
	Если Не ЗначениеЗаполнено(СпособУказанияВремени) Тогда
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность;
	КонецЕсли;
	
	Возврат СпособУказанияВремени;
	
КонецФункции	

// Создает запись в регистре сведений ХронометражРабочегоВремениПользователей
Процедура СоздатьЗаписьХронометража(Объект, ДатаНачала) Экспорт
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		ТекущийПользователь = Объект.Исполнитель;
	Иначе
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Объект);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = ТекущийПользователь;
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.ВремяНачала = ДатаНачала;
	НоваяЗапись.ВремяОкончания = '00010101';
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Очистить хронометраж
Процедура ОчиститьХронометраж(Объект) Экспорт
	
	// Создать набор записей  - пустой - чтобы очистить регистр сведений
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		ТекущийПользователь = Объект.Исполнитель;
	Иначе
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// добавляет в отчет за дату
Процедура ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	
	// Создать набор записей  - пустой - чтобы очистить регистр сведений
	НаборЗаписей = РегистрыСведений.ХронометражРабочегоВремениПользователей.СоздатьНаборЗаписей();
	
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		ТекущийПользователь = ПараметрыОтчета.Объект.Исполнитель;
	Иначе
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(ПараметрыОтчета.Объект);
	НаборЗаписей.Записать();
	
	
	// запись в регистр ФактическиеТрудозатраты
	МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаДобавления	= ПараметрыОтчета.ДатаОтчета;
	МенеджерЗаписи.Пользователь 	= ТекущийПользователь;
	МенеджерЗаписи.Подразделение	= РаботаСПользователями.ПолучитьПодразделение(ТекущийПользователь);
	МенеджерЗаписи.ВидРабот 		= ПараметрыОтчета.ВидРаботы;
	МенеджерЗаписи.ОписаниеРаботы 	= ПараметрыОтчета.ОписаниеРаботы;
	МенеджерЗаписи.Источник 		= ПараметрыОтчета.Объект;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Если ПараметрыОтчета.Свойство("Проект") И ПараметрыОтчета.Свойство("ПроектнаяЗадача") Тогда 
			
			Проект = ПараметрыОтчета.Проект;
			ПроектнаяЗадача = ПараметрыОтчета.ПроектнаяЗадача;
			
		Иначе	
			Объект = ПараметрыОтчета.Объект;
			
			Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
				Проект = Объект.Проект;
				ПроектнаяЗадача = Объект.ПроектнаяЗадача;
				
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты") Тогда
				Проект = Объект;
				ПроектнаяЗадача = Неопределено;
				
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
				Проект = Объект.Владелец;
				ПроектнаяЗадача = Объект;
				
			ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект)
				Или ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда 
				
				Проект = Объект.Проект;
				ПроектнаяЗадача = Неопределено;
				
			КонецЕсли; 
			
			ПараметрыОтчета.Вставить("Проект", Проект);
			ПараметрыОтчета.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
			
		КонецЕсли;	
		
		МенеджерЗаписи.Проект = Проект;
		МенеджерЗаписи.ПроектнаяЗадача = ПроектнаяЗадача;
		
		//АбисСофт-Кострицын Олег-Старт  28 февраля 2014 г.
		Если ПараметрыОтчета.Свойство("ПричинаПеревыполнения") Тогда
			МенеджерЗаписи.ПричинаПеревыполнения = ПараметрыОтчета.ПричинаПеревыполнения;
		КонецЕсли;
		Если ПараметрыОтчета.Свойство("РольПользователя") Тогда
			МенеджерЗаписи.РольПользователя = ПараметрыОтчета.РольПользователя;
		КонецЕсли;
		//АбисСофт-Кострицын Олег-финиш  28 февраля 2014 г.
		//АбисСофт-Кострицын Олег-Старт  8 июля 2014 г.
		Если ПараметрыОтчета.Свойство("РольПользователя") Тогда
			МенеджерЗаписи.МесяцНачисления 	= ПараметрыОтчета.МесяцНачисления;
		КонецЕсли;
		//АбисСофт-Кострицын Олег-финиш  8 июля 2014 г.
	КонецЕсли;	
	
	СпособУказанияВремени = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "СпособУказанияВремени");
	Если Не ЗначениеЗаполнено(СпособУказанияВремени) Тогда
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность;
	КонецЕсли;
	
	Если СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
		МенеджерЗаписи.Длительность = ПараметрыОтчета.ДлительностьРаботы;
	Иначе
		МенеджерЗаписи.Начало = ПараметрыОтчета.НачалоРаботы;
		МенеджерЗаписи.Окончание = ПараметрыОтчета.ОкончаниеРаботы;
		МенеджерЗаписи.Длительность = МенеджерЗаписи.Окончание - МенеджерЗаписи.Начало;
	КонецЕсли;
	МенеджерЗаписи.Записать();
	
	ЗначенияКлюча = Новый Структура("Подразделение, Пользователь, Источник, Проект, ПроектнаяЗадача, ВидРабот, ОписаниеРаботы, ДатаДобавления, Начало, Окончание");
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, МенеджерЗаписи);
	КлючЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьКлючЗаписи(ЗначенияКлюча);
	
	ПараметрыОповещения.Вставить("КлючЗаписи", КлючЗаписи);
	ПараметрыОповещения.Вставить("Представление", МенеджерЗаписи.ОписаниеРаботы);
	
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПараметрыОповещения.Вставить("Изменение_ФактическиеТрудозатратыЗадачи", ПараметрыОтчета.Объект);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ПараметрыОтчета.ПроектнаяЗадача) Тогда 
		ПараметрыОповещения.Вставить("Изменение_ФактическиеТрудозатратыПроектнойЗадачи", ПараметрыОтчета.ПроектнаяЗадача);
	КонецЕсли;
	
КонецПроцедуры	

// находит первую запись в регистре ХронометражРабочегоВремениПользователей с пустой датой окончания (00010101)
Процедура НайтиДатыХронометража(Объект, ДатаНачалаХронометража, ДатаКонцаХронометража) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		Исполнитель = Объект.Исполнитель;
	Иначе
		Исполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если Исполнитель = Справочники.Пользователи.ПустаяСсылка() Тогда
		Исполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Хронометраж.ВремяНачала КАК ВремяНачала,
	|	Хронометраж.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	РегистрСведений.ХронометражРабочегоВремениПользователей КАК Хронометраж
	|ГДЕ
	|	Хронометраж.Пользователь = &ТекущийПользователь
	|	И Хронометраж.Объект = &Объект";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Исполнитель);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДатаНачалаХронометража = Выборка.ВремяНачала;
		ДатаКонцаХронометража = Выборка.ВремяОкончания;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВидыРабот(ТочкаМаршрута)
	
	ВидыРабот = Новый СписокЗначений;
	
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	ЗапросВРегистр.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	СведенияОТочкахМаршрута.ВидРаботы КАК ВидРаботы
	                       |ИЗ
	                       |	РегистрСведений.СведенияОТочкахМаршрута КАК СведенияОТочкахМаршрута
	                       |ГДЕ
	                       |	СведенияОТочкахМаршрута.ТочкаМаршрута = &ТочкаМаршрута";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыРабот.Добавить(Выборка.ВидРаботы);
	КонецЦикла;
	
	Возврат ВидыРабот;
КонецФункции	

// Находит еж отчет и берет из него СпособУказанияВремени
Функция ПолучитьСпособУказанияВремениИзОтчета(Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕжедневныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|ГДЕ
	|	ЕжедневныйОтчет.Пользователь = &Пользователь
	|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)";
	
	ДатаОтчета = ТекущаяДата();
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Задача.Выполнена Тогда
		ДатаОтчета = Задача.ДатаИсполнения;
	КонецЕсли;	
	
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		Исполнитель = Задача.Исполнитель;
	Иначе
		Исполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", ДатаОтчета);
	Запрос.УстановитьПараметр("Пользователь", Исполнитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕжедневныйОтчет = Документы.ЕжедневныйОтчет.ПустаяСсылка();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка.СпособУказанияВремени;
	Иначе
		Возврат ПолучитьСпособУказанияВремени();
	КонецЕсли;
	
КонецФункции	

// Заполнить параметры - ДатаНачалаХронометража и ВидРаботы
Процедура ПолучитьПараметрыХронометража(Задача, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража, 
	ВидыРабот, СпособУказанияВремени) Экспорт
	
	ДатаНачалаХронометража = '00010101000000';
	НайтиДатыХронометража(Задача, ДатаНачалаХронометража, ДатаКонцаХронометража);
	Если ДатаНачалаХронометража <> '00010101000000' И ДатаКонцаХронометража = '00010101000000' Тогда
		ВключенХронометраж = Истина;
	Иначе
		ВключенХронометраж = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
		ВидыРабот = ПолучитьВидыРабот(Задача.ТочкаМаршрута);
	Иначе	
		ВидыРабот = Новый СписокЗначений;
		
		ОсновнойВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
		ВидыРабот.Добавить(ОсновнойВидРабот);
	КонецЕсли;	
	
	СпособУказанияВремени = ПолучитьСпособУказанияВремениИзОтчета(Задача);
	
КонецПроцедуры	

// В форме инициализирует параметры в ПриСозданииНаСервере
Процедура ПроинициализироватьПараметрыУчетаВремени(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ОпцияВестиУчетТрудозатрат,
	Ссылка,
	ВидыРабот,
	СпособУказанияВремени,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж,
	ЭлементДобавитьВОтчет) Экспорт
	
	ДатаНачалаХронометража = '00010101';
	ДатаКонцаХронометража = '00010101';
	ВключенХронометраж = Ложь;
	
	ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
	Если ОпцияВестиУчетТрудозатрат Тогда
		ПолучитьПараметрыХронометража(Ссылка, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража, ВидыРабот, СпособУказанияВремени);
	КонецЕсли;

	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Ссылка.Выполнена Тогда
		ЭлементПереключитьХронометраж.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если ЗначениеЗаполнено(Ссылка.Исполнитель) Тогда
			Если Ссылка.Исполнитель <> Пользователи.ТекущийПользователь() Тогда
				ЭлементПереключитьХронометраж.Доступность = Ложь;	
				ЭлементДобавитьВОтчет.Доступность = Ложь;	
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Ссылка.РольИсполнителя) Тогда
			ИсполнителиРоли = БизнесПроцессыИЗадачиСервер.ИсполнителиРоли(
				Ссылка.РольИсполнителя,
				Ссылка.ОсновнойОбъектАдресации,
				Ссылка.ДополнительныйОбъектАдресации);
			Если ИсполнителиРоли.Найти(Пользователи.ТекущийПользователь()) = Неопределено Тогда
				ЭлементПереключитьХронометраж.Доступность = Ложь;	
				ЭлементДобавитьВОтчет.Доступность = Ложь;	
			КонецЕсли;	
		Иначе
			ЭлементПереключитьХронометраж.Доступность = Ложь;	
			ЭлементДобавитьВОтчет.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В форме инициализирует параметры в ПриСозданииНаСервере
Процедура ПроинициализироватьПараметрыИНачатьХронометраж(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ОпцияВестиУчетТрудозатрат,
	Ссылка,
	СпособУказанияВремени,
	ВидыРабот) Экспорт
	
	ДатаНачалаХронометража = '00010101000000';
	ДатаКонцаХронометража = '00010101000000';
	ВключенХронометраж = Ложь;
	ВидыРабот = Новый СписокЗначений;
	
	ОпцияВестиУчетТрудозатрат = ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат");
	Если ОпцияВестиУчетТрудозатрат Тогда
		
		СпособУказанияВремени = ПолучитьСпособУказанияВремениИзОтчета(Ссылка);
		ВключенХронометраж = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Устанавливает свойства - подсказка и пометка элементам формы
Процедура УстановитьСвойстваЭлементов(
	ВключенХронометраж, 
	КомандаПереключитьХронометраж, 
	ЭлементПереключитьХронометраж) Экспорт
	
	Если ВключенХронометраж Тогда // хронометраж включен
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Закончить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Истина;
	Иначе
		КомандаПереключитьХронометраж.Подсказка = НСтр("ru = 'Включить хронометраж'");
		ЭлементПереключитьХронометраж.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// переключает хронометраж, когда не нужно показывать диалог
Процедура ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект,
	ВидыРабот,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт

	ПереключитьХронометраж(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект,
		ВидыРабот);
	
	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

// переключает хронометраж, когда не нужно показывать диалог
Процедура ПереключитьХронометраж(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект,
	ВидыРабот = Неопределено) Экспорт

	Если Не ВключенХронометраж Тогда // создаем новую запись
		
		ДатаНачалаХронометража = ТекущаяДата();
		ДатаКонцаХронометража = '00010101';
		СоздатьЗаписьХронометража(Объект, ДатаНачалаХронометража);
		ВключенХронометраж = Истина;
		
	Иначе
		
        ВидРаботы = Неопределено;
        
        Если ВидыРабот <> Неопределено И ВидыРабот.Количество() <> 0 Тогда
            ВидРаботы = ВидыРабот[0].Значение;
        КонецЕсли;    
		
		КонецХронометража = ТекущаяДата();
		ДлительностьРаботы = КонецХронометража - ДатаНачалаХронометража;
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыОтчета.Вставить("ВидРаботы", ВидРаботы);
		ПараметрыОтчета.Вставить("ОписаниеРаботы", Строка(Объект));
		ПараметрыОтчета.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыОтчета.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыОтчета.Вставить("ОкончаниеРаботы", КонецХронометража);
		ПараметрыОтчета.Вставить("Объект", Объект);
		
		Источник = Объект;
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
			Проект = Неопределено;
			ПроектнаяЗадача = Неопределено;
			
			Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
				Проект = Источник.Проект;
				ПроектнаяЗадача = Источник.ПроектнаяЗадача;
			ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Проекты") Тогда
				Проект = Источник;
				ПроектнаяЗадача = Неопределено;
			ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
				Проект = Источник.Владелец;
				ПроектнаяЗадача = Источник;
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Источник)
				Или ТипЗнч(Источник) = Тип("СправочникСсылка.Файлы") Тогда 
				
				Проект = Источник.Проект;
				ПроектнаяЗадача = Неопределено;
			КонецЕсли; 
			
			ПараметрыОтчета.Вставить("Проект", Проект);
			ПараметрыОтчета.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
		КонецЕсли;
		
		
		ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
		
		ДатаНачалаХронометража = '00010101';
		ДатаКонцаХронометража = '00010101';
		ВключенХронометраж = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

// Отключает хронометраж и делает обновление элементов формы при выключении хронометража
Процедура ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Задача,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт
	
	ОчиститьХронометраж(Задача);
	
	ДатаНачалаХронометража = '00010101000000';
	ДатаКонцаХронометража = '00010101000000';
	ВключенХронометраж = Ложь;
	
	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

// Отключает хронометраж
Процедура ОтключитьХронометражСерверБезЭлементов(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Задача) Экспорт
	
	ОчиститьХронометраж(Задача);
	
	ДатаНачалаХронометража = '00010101000000';
	ДатаКонцаХронометража = '00010101000000';
	ВключенХронометраж = Ложь;
	
КонецПроцедуры

// Инициализирует персональные настройки учета времени - для использования на клиенте
Функция ПолучитьПерсональныеНастройкиУчетаВремениСервер() Экспорт
	Настройки = Новый Структура;

	ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи");
	Если Не ЗначениеЗаполнено(ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи) Тогда
		ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиУчетаВремени", "ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи", ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи);
	КонецЕсли;
	
	Настройки.Вставить("ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи", ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи);
	
	//АбисСофт-Кострицын Олег-Старт 24 марта 2013 г.
	УказыватьТрудозатратыПриЗаписи = ХранилищеОбщихНастроек.Загрузить("НастройкиУчетаВремени", "УказыватьТрудозатратыПриЗаписи");
	Если Не ЗначениеЗаполнено(УказыватьТрудозатратыПриЗаписи) Тогда
		УказыватьТрудозатратыПриЗаписи = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиУчетаВремени", "УказыватьТрудозатратыПриЗаписи", УказыватьТрудозатратыПриЗаписи);
	КонецЕсли;
	
	Настройки.Вставить("УказыватьТрудозатратыПриЗаписи", УказыватьТрудозатратыПриЗаписи);
	//АбисСофт-Кострицын Олег-Финиш 24 марта 2013 г.
	
	Возврат Настройки; // параметры доступны только для чтения
КонецФункции

// Выполняет обновление элементов формы при выключении хронометража
Процедура ДобавитьВОтчетИОбновитьФорму(
	ПараметрыОтчета, 
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	КомандаПереключитьХронометраж,
	ЭлементПереключитьХронометраж) Экспорт
	
	ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
	
	ДатаНачалаХронометража = '00010101';
	ДатаКонцаХронометража = '00010101';
	ВключенХронометраж = Ложь;
	
	УстановитьСвойстваЭлементов(ВключенХронометраж, КомандаПереключитьХронометраж, ЭлементПереключитьХронометраж);
	
КонецПроцедуры

Функция НеобходимоПоказатьДиалогВводаТрудозатрат(ЗадачаСсылка) Экспорт
	
	//Возврат ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах")
	//	И РаботаСБизнесПроцессами.ПолучитьФактическиеТрудозатратыПоЗадаче(ЗадачаСсылка) = 0;
	Возврат Ложь;
КонецФункции

Функция ЕстьЕжедневныеОтчетыНаДату(Пользователь, НаДату) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕжедневныйОтчет.Ссылка
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|ГДЕ
	|	ЕжедневныйОтчет.Пользователь = &Пользователь
	|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И ЕжедневныйОтчет.Проведен";
	
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции