Процедура ПолучитьUpdate()Экспорт 
	
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат;
	КонецЕслИ;
	
	ЗапросМакс = Новый Запрос("ВЫБРАТЬ
	                          |	МАКСИМУМ(update.update_id) КАК update_id
	                          |ИЗ
	                          |	РегистрСведений.ТелеграмСобытия КАК update
	                          |ГДЕ
	                          |	update.КлючТелеграм = &КлючТелеграм");
	ЗапросМакс.Параметры.Вставить("КлючТелеграм",Ключ);	
	
	Выборка = ЗапросМакс.Выполнить().Выбрать();
	Если Выборка.Следующий() ТОгда
		OffSet = "?offset="+Формат(Выборка.update_id, "ЧГ=");
	Иначе
		OffSet = "";
	КонецЕсли;
	
		
	Сервер = "api.telegram.org";
	Команда = "getUpdates"+OffSet;
	Ресурс = "bot"+Ключ+"/"+Команда;
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(Ресурс); 
	
	Ответ = Соединение.Получить(Запрос);
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
	Если ОтветСоотв["ok"] Тогда
		getUpdatesОбОтв(ОтветСоотв);
	КонецЕсли;
	
КонецПроцедуры

Процедура getUpdatesОбОтв(ОтветСоотв)
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат;
	КонецЕслИ;

	ТабID = Новый ТаблицаЗначений;
	ТабID.Колонки.Добавить("update_id", ОбщегоНазначенияТелеграм.ПолучитьОписаниеТиповЧисла(15));
	
	Для Каждого upd Из ОтветСоотв["result"] Цикл
		
		СтрТаб = ТабID.Добавить();
		СтрТаб.update_id = upd["update_id"];
				  
	КонецЦикла;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТабID.update_id
	                      |ПОМЕСТИТЬ ТабID
	                      |ИЗ
	                      |	&ТабID КАК ТабID
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТабID.update_id КАК update_id
	                      |ИЗ
	                      |	ТабID КАК ТабID
	                      |ГДЕ
	                      |	НЕ ТабID.update_id В
	                      |				(ВЫБРАТЬ
	                      |					update.update_id
	                      |				ИЗ
	                      |					РегистрСведений.ТелеграмСобытия КАК update
	                      |				ГДЕ
	                      |					update.КлючТелеграм = &КлючТелеграм)");
						  
	Запрос.УстановитьПараметр("ТабID",ТабID);
	Запрос.УстановитьПараметр("КлючТелеграм",Ключ);
	
	НовыеАпдейты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("update_id");
	
	Для Каждого upd Из ОтветСоотв["result"] Цикл
		Если НовыеАпдейты.Найти(upd["update_id"]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если  upd.Получить("message") <> Неопределено  Тогда
			message = upd["message"];
			мз = РегистрыСведений.ТелеграмСобытия.СоздатьМенеджерЗаписи();
			мз.update_id = upd["update_id"];
			мз.date = МестноеВремя(Дата('19700101')+message["date"]);
			мз.text = message["text"];
			мз.message_id 	= message["message_id"];
			мз.first_name 	= message["from"]["first_name"];
			мз.id 			= message["from"]["id"];
			мз.callback_query = "";
			мз.КлючТелеграм = Ключ;

			мз.Записать();
		ИначеЕсли upd.Получить("callback_query") <> Неопределено  Тогда
			callback_query = upd["callback_query"];
			message =  callback_query["message"];
			мз = РегистрыСведений.ТелеграмСобытия.СоздатьМенеджерЗаписи();
			мз.update_id = upd["update_id"];
			мз.date = МестноеВремя(Дата('19700101')+message["date"]);
			мз.text = callback_query["data"];
			мз.message_id 	= message["message_id"];
			мз.first_name 	= callback_query["from"]["first_name"];
			мз.id 			= callback_query["from"]["id"];
			мз.callback_query = callback_query["data"];	
			мз.КлючТелеграм = Ключ;
			
			мз.Записать();
		Иначе
			Продолжить;
		КонецЕслИ;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗапросы() Экспорт
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат;
	КонецЕслИ;

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	update.update_id,
	                      |	update.date,
	                      |	update.text,
	                      |	update.message_id КАК message_id,
	                      |	update.first_name,
	                      |	update.id КАК id
	                      |ИЗ
	                      |	РегистрСведений.ТелеграмСобытия КАК update
	                      |ГДЕ
	                      |	НЕ update.Обработан
	                      |	И update.КлючТелеграм = &КлючТелеграм
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	message_id
	                      |ИТОГИ ПО
	                      |	id");
	Запрос.УстановитьПараметр("КлючТелеграм",Ключ);
	ВыборкаЮзеров = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЮзеров.Следующий() Цикл
		ВыборкаЗапросов = ВыборкаЮзеров.Выбрать();
		Пока ВыборкаЗапросов.Следующий() Цикл
			ok = Ложь;
			ОбработатьЗапрос(ВыборкаЗапросов, ok);
			Если ok Тогда
				мз = РегистрыСведений.ТелеграмСобытия.СоздатьМенеджерЗаписи();
				мз.update_id =ВыборкаЗапросов.update_id;
				мз.КлючТелеграм =Ключ;
				мз.Прочитать();
				мз.Обработан = Истина;
				мз.Записать();
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗапрос(ЗапросПользователя, ok)
	
	ПараметрыКлавиатуры = "";
	
	ДанныеСообщения = СформироватьСообщение(ЗапросПользователя.text,ЗапросПользователя,ПараметрыКлавиатуры);
	
	Если ТипЗнч(ДанныеСообщения) = Тип("Структура") Тогда
		ОтправитьДокумент (ЗапросПользователя.id,ДанныеСообщения.ПутьКФайлу,ДанныеСообщения.ИмяФайла,ok);
	Иначе
		ОтправитьСообщение(ДанныеСообщения,ЗапросПользователя.id,ПараметрыКлавиатуры, ok);	
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьСообщение (ТекстСообщения, ПолучательID,ОписаниеКлавиатуры="",ok) Экспорт
	
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат;
	КонецЕслИ;
	
	Сервер = "api.telegram.org";
	Команда = "sendMessage";
	Ресурс = "bot"+Ключ+"/"+Команда+"?chat_id="+СтрЗаменить(Формат(ПолучательID, "ЧГ=; ЧДЦ=; ЧС=; ЧРГ=."), ".", "") +"&text="+СокрЛП(ТекстСообщения)+?(ЗначениеЗаполнено(ОписаниеКлавиатуры),"&reply_markup="+ОписаниеКлавиатуры,""); 
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	Соединение = Новый HTTPСоединение(Сервер,,,,,,ЗащищенноеСоединение);
	Запрос = Новый HTTPЗапрос(Ресурс); 
	
	Ответ = Соединение.Получить(Запрос);
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
	ok = ОтветСоотв["ok"];
		
КонецПроцедуры

Процедура ОтправитьДокумент (ПолучательID,ПутьКФайлу,ИмяФайла,ok) Экспорт
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат;
	КонецЕслИ;
	
	Сервер = "api.telegram.org";
	Команда = "sendDocument";
    СтрокаСоединения = "/bot" + Ключ+"/"+Команда;
    
    Boundary = "----"+Строка(Новый УникальныйИдентификатор());
    
    //Определяем массив для процедуры ОбъединитьФайлы
    МассивФайловДляОбъединения = Новый Массив;
    
    //Формируем начальный фрагмент файла POST-запроса
    ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
    ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8);
    
    //Формируем конечный фрагмент файла POST-запроса
    ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
    ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
    
    ТекстДляОтправки = "";
    
    ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;
    ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС;
    ТекстДляОтправки = ТекстДляОтправки + СтрЗаменить(Формат(ПолучательID, "ЧГ=; ЧДЦ=; ЧС=; ЧРГ=."), ".", "")  + Символы.ПС;
    
    ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;
    ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""document""; filename="""+ИмяФайла+"""" + Символы.ПС;
    
    ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки);
    ФайлОтправкиНачало.Закрыть();
    
    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
    
    МассивФайловДляОбъединения.Добавить(СокрЛП(ПутьКФайлу));
    
    ТекстДляОтправки = "" + Символы.ПС;
    ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary+"--";
    ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
    ФайлаОтправкиКонец.Закрыть();
    МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
    
    ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
    ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
    
    HTTPЗапрос = Новый HTTPЗапрос;
    Заголовки = Новый Соответствие;
    
    HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
    HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
    
    HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
    HTTPЗапрос.АдресРесурса = СтрокаСоединения;
    
    ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
    HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, ЗащищенноеСоединение);
    
    Попытка
        ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	
		ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
		ok = ОтветСоотв["ok"];
    Исключение
        Сообщить(ПолучательID, ОписаниеОшибки());
		ok = Ложь;
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьКлючТелеграм()  Экспорт
	ТекПользователь = Пользователи.ТекущийПользователь();
	Ключ = ТекПользователь.ТелеграмКлючAPI;
	
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Ключ = Константы.ТелеграмКлючAPI.Получить();
	КонецЕслИ;
	
	Возврат Ключ;
КонецФункции

Функция СформироватьФайлПоЗаявке(ИдПользователя,НомерДок,ДатаЗаявки)
	 ДанныеСообщения = "";
	
	Если ЗначениеЗаполнено(НомерДок) Тогда		 
		 ДокЗаявки = Документы.Заявка.НайтиПоНомеру(НомерДок,ДатаЗаявки);
		 
		 Если ЗначениеЗаполнено(ДокЗаявки) Тогда
			 Кодировка = КодировкаТекста.UTF8;
			 ТекстЗаявки = РаботаСЗаявками.ПолучитьТекстHTMLЗаявки(ДокЗаявки,Кодировка,Новый УникальныйИдентификатор());
			 
			 ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			 ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла,КодировкаТекста.UTF8);
			 ЗаписьТекста.Записать(ТекстЗаявки);
			 ЗаписьТекста.Закрыть();

			 ДанныеСообщения = Новый Структура();
			 ДанныеСообщения.Вставить("ПутьКФайлу",ИмяВременногоФайла);
			 ДанныеСообщения.Вставить("ИмяФайла","Ticket_"+НомерДок+".html");
		 Иначе
			ДанныеСообщения = "Указанная заявка не найдена в базе!" 
		 КонецЕслИ;	 
	КонецЕсли;
	
	Возврат ДанныеСообщения;

КонецФункции

Функция СформироватьСообщение(ТипЗапроса, ЗапросПользователя,ПараметрыКлавиатуры)
	ПараметрыКлавиатуры = "";
	Результат = "Неизвестный запрос";
	
	ПервыйЗапрос = "Выберите команду";

	Если ТипЗапроса = "/start"  тогда
		МассивКнопок = Новый Массив();	
				
		Если ПроверитьДоступПользователяПоИд(ЗапросПользователя.id) = Истина Тогда
			МассивСтрокиКнопок = Новый Массив();
			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки","Мои заявки");
			СтруктураКнопки.Вставить("Ссылка","/MYTicketList");
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);
			
			Если ПользовательРаспределительЗаявок(ЗапросПользователя.id) = Истина Тогда
				СтруктураКнопки = Новый Структура();
				СтруктураКнопки.Вставить("ИмяКнопки","Не распределенные заявки");
				СтруктураКнопки.Вставить("Ссылка","/UnDistributeTicketList");
				МассивСтрокиКнопок.Добавить(СтруктураКнопки);
			КонецЕсли;
			МассивКнопок.Добавить(МассивСтрокиКнопок);
			
			МассивСтрокиКнопок = Новый Массив();
			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки","Заявки от меня");
			СтруктураКнопки.Вставить("Ссылка","/TicketFromMeList");
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);
			МассивКнопок.Добавить(МассивСтрокиКнопок);

			МассивСтрокиКнопок = Новый Массив();
			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки","Поиск по номеру");
			СтруктураКнопки.Вставить("Ссылка","/Search");
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);
			МассивКнопок.Добавить(МассивСтрокиКнопок);
			
			МассивСтрокиКнопок = Новый Массив();
			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки","Отписаться");
			СтруктураКнопки.Вставить("Ссылка","/unsubscribe");
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);
			
			МассивКнопок.Добавить(МассивСтрокиКнопок);
		Иначе
			МассивСтрокиКнопок = Новый Массив();

			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки","Подписаться");
			СтруктураКнопки.Вставить("Ссылка","/subscribe");
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);
			МассивКнопок.Добавить(МассивСтрокиКнопок);
		КонецЕсли;
			
		ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);

		Результат = СокрЛП(ПервыйЗапрос) ;
	КонецЕсли;
	
	Если ТипЗапроса = "/subscribe"  тогда
		ПараметрыКлавиатуры = "";
		Результат = ДобавитьПодпискуПользователя(ЗапросПользователя);
	КонецЕсли;

	Если ТипЗапроса = "/unsubscribe"  тогда
		ПараметрыКлавиатуры = "";
		Результат = УдалитьПодпискуПользователя(ЗапросПользователя);
	КонецЕсли;
	
	Если ТипЗапроса = "/time"  тогда
		ПараметрыКлавиатуры = "";
		Результат = Формат(ТекущаяДата(),"ДЛФ=DDT") ;
	КонецЕсли;
	
	Если ТипЗапроса = "/hello"  тогда
		ПараметрыКлавиатуры = "";
		Результат = "Привет," +ЗапросПользователя.first_name;
	КонецЕсли;
	
	Если ТипЗапроса = "/MYTicketList"  тогда
		Если ПроверитьДоступПользователяПоИд(ЗапросПользователя.id) = Ложь Тогда
			ПараметрыКлавиатуры = "";
			Результат = "Ваша подписка не активирована! Обратитесь к администратору! ";
		Иначе
			ПараметрыКлавиатуры = "";
			Результат = СформироватьСписокЗаявокПользователя(ЗапросПользователя.id,ПараметрыКлавиатуры);
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗапроса = "/TicketFromMeList"  тогда
		Если ПроверитьДоступПользователяПоИд(ЗапросПользователя.id) = Ложь Тогда
			ПараметрыКлавиатуры = "";
			Результат = "Ваша подписка не активирована! Обратитесь к администратору! ";
		Иначе
			ПараметрыКлавиатуры = "";
			Результат = СформироватьСписокЗаявокОтПользователя(ЗапросПользователя.id,ПараметрыКлавиатуры);
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗапроса = "/UnDistributeTicketList"  тогда
		Если ПроверитьДоступПользователяПоИд(ЗапросПользователя.id) = Ложь Тогда
			ПараметрыКлавиатуры = "";
			Результат = "Ваша подписка не активирована! Обратитесь к администратору! ";
		Иначе
			ПараметрыКлавиатуры = "";
			Результат = СформироватьСписокНеРаспределенныхЗаявокПоИдПользователя(ЗапросПользователя.id,ПараметрыКлавиатуры);
		КонецЕсли;	
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/IdTicket") <> 0 Тогда
		Если ПроверитьДоступПользователяПоИд(ЗапросПользователя.id) = Ложь Тогда
			Результат = "Ваша подписка не активирована! Обратитесь к администратору! ";
		Иначе	
			ТекстЗаказа = СокрЛП(СтрЗаменить(ТипЗапроса,"/IdTicket_",""));
			НомерРазделителя = СтрНайти(ТекстЗаказа,"_");
			
			ТекстНомера = Лев(ТекстЗаказа,?(НомерРазделителя=0,СтрДлина(ТекстНомера),НомерРазделителя-1));
			НомерДок = СокрЛП(ТекстНомера);
			
			ТекстДаты = СокрЛП(СтрЗаменить(Сред(ТекстЗаказа,НомерРазделителя),"_",""));
			ДатаДок = ПреобразоватьДатуИзТекста(ТекстДаты);
			
			МассивКнопок = Новый Массив();
			МассивСтрокиКнопок = Новый Массив();
			
			ДокЗаявки = Документы.Заявка.ПустаяСсылка();
			Результат = СформироватьОписаниеЗаявкиПоНомеру(ЗапросПользователя.id,НомерДок,ДатаДок,ДокЗаявки);			
			
			Если ЗначениеЗаполнено(ДокЗаявки) Тогда
				СтруктураКнопки = Новый Структура();
				СтруктураКнопки.Вставить("ИмяКнопки","Детальнее...");
				СтруктураКнопки.Вставить("Ссылка","/Detail_"+Формат(НомерДок,"ЧГ=0")+"_"+Формат(ДатаДок,"ДФ=ddMMyyyy"));
				МассивСтрокиКнопок.Добавить(СтруктураКнопки);
				ОписаниеОшибки = "";
				Если ПроверитьВозможностьПередачиЗаявки (ЗапросПользователя.id,ДокЗаявки,ОписаниеОшибки) Тогда
					СтруктураКнопки = Новый Структура();
					СтруктураКнопки.Вставить("ИмяКнопки","Передать");
					СтруктураКнопки.Вставить("Ссылка","/Send_"+Формат(НомерДок,"ЧГ=0")+"_"+Формат(ДатаДок,"ДФ=ddMMyyyy"));
					МассивСтрокиКнопок.Добавить(СтруктураКнопки);
					
					МассивКнопок.Добавить(МассивСтрокиКнопок);		
				Иначе
					МассивКнопок.Добавить(МассивСтрокиКнопок);
				КонецЕслИ;
				
				ОписаниеОшибки = "";
				Если ПроверитьДоступностьИзмененияЗаявки(ЗапросПользователя.id,ДокЗаявки,ОписаниеОшибки) Тогда
					МассивСтрокиКнопок = Новый Массив();
					СтруктураКнопки = Новый Структура();
					СтруктураКнопки.Вставить("ИмяКнопки","Изменить статус");
					СтруктураКнопки.Вставить("Ссылка","/NewStatus_"+Формат(НомерДок,"ЧГ=0")+"_"+Формат(ДатаДок,"ДФ=ddMMyyyy"));
					МассивСтрокиКнопок.Добавить(СтруктураКнопки);
					
					СтруктураКнопки = Новый Структура();
					СтруктураКнопки.Вставить("ИмяКнопки","Добавить ответ");
					СтруктураКнопки.Вставить("Ссылка","/NewAnswer_"+Формат(НомерДок,"ЧГ=0")+"_"+Формат(ДатаДок,"ДФ=ddMMyyyy"));
					МассивСтрокиКнопок.Добавить(СтруктураКнопки);
					
					МассивКнопок.Добавить(МассивСтрокиКнопок);
				КонецЕсли;
				ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);
			Иначе
				ПараметрыКлавиатуры = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ТипЗапроса,"/Detail") <> 0 Тогда
		Если ПроверитьДоступПользователяПоИд(ЗапросПользователя.id) = Ложь Тогда
			Результат = "Ваша подписка не активирована! Обратитесь к администратору! ";
		Иначе
			ТекстЗаказа = СокрЛП(СтрЗаменить(ТипЗапроса,"/Detail_",""));
			НомерРазделителя = СтрНайти(ТекстЗаказа,"_");
			
			ТекстНомера = Лев(ТекстЗаказа,?(НомерРазделителя=0,СтрДлина(ТекстНомера),НомерРазделителя-1));
			НомерДок = СокрЛП(ТекстНомера);
			
			ТекстДаты = СокрЛП(СтрЗаменить(Сред(ТекстЗаказа,НомерРазделителя),"_",""));
			ДатаДок = ПреобразоватьДатуИзТекста(ТекстДаты);

			Результат = СформироватьФайлПоЗаявке(ЗапросПользователя.id,НомерДок,ДатаДок);
		КонецЕсли;	
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/Send") <> 0 Тогда
		ТекстЗаказа = СокрЛП(СтрЗаменить(ТипЗапроса,"/Send_",""));
		НомерРазделителя = СтрНайти(ТекстЗаказа,"_");
		
		ТекстНомера = Лев(ТекстЗаказа,?(НомерРазделителя=0,СтрДлина(ТекстНомера),НомерРазделителя-1));
		НомерДок = СокрЛП(ТекстНомера);
		
		Результат = "Введите имя (или часть имени) пользователя на которого передать заявку №"+НомерДок;
		
		МассивКнопок = Новый Массив();
		МассивСтрокиКнопок = Новый Массив();
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","Отмена");
		СтруктураКнопки.Вставить("Ссылка","/Cancel");
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		МассивКнопок.Добавить(МассивСтрокиКнопок);
		ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);
	КонецЕсли;
	
	Если СтрНайти(ТипЗапроса,"/Search") <> 0 Тогда
		Результат = "Введите номер заявки для поиска....";
		
		МассивКнопок = Новый Массив();
		МассивСтрокиКнопок = Новый Массив();
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","Отмена");
		СтруктураКнопки.Вставить("Ссылка","/Cancel");
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		МассивКнопок.Добавить(МассивСтрокиКнопок);
		ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/") = 0 Тогда
		//Пользователь ввел текст. Проверим была ли команда перед этим	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	ТелеграмСобытия.update_id,
		|	ТелеграмСобытия.КлючТелеграм,
		|	ТелеграмСобытия.date КАК date,
		|	ТелеграмСобытия.text,
		|	ТелеграмСобытия.message_id,
		|	ТелеграмСобытия.first_name,
		|	ТелеграмСобытия.id,
		|	ТелеграмСобытия.callback_query,
		|	ТелеграмСобытия.Обработан,
		|	ТелеграмСобытия.Пропущен
		|ИЗ
		|	РегистрСведений.ТелеграмСобытия КАК ТелеграмСобытия
		|ГДЕ
		|	ТелеграмСобытия.Обработан = ИСТИНА
		|	И ТелеграмСобытия.КлючТелеграм = &КлючТелеграм
		|	И ТелеграмСобытия.id = &id
		|	И ТелеграмСобытия.update_id > &oldupdate_id
		|	И ТелеграмСобытия.update_id < &update_id
		|	И ТелеграмСобытия.callback_query <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТелеграмСобытия.update_id УБЫВ";
		
		Запрос.УстановитьПараметр("id", ЗапросПользователя.id);
		Запрос.УстановитьПараметр("update_id", ЗапросПользователя.update_id);
		Запрос.УстановитьПараметр("oldupdate_id", ЗапросПользователя.update_id-10000);
		Запрос.УстановитьПараметр("КлючТелеграм",ПолучитьКлючТелеграм());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		callback = "";
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если  СтрНайти(ВыборкаДетальныеЗаписи.callback_query,"/Send_") > 0 Тогда 
				callback = ВыборкаДетальныеЗаписи.callback_query;
				Результат = СформироватьСообщение(СтрЗаменить(callback,"/Send","/FindUser")+"\"+ТипЗапроса, ЗапросПользователя,ПараметрыКлавиатуры);
			КонецЕсли;
			
			Если  СтрНайти(ВыборкаДетальныеЗаписи.callback_query,"/NewAnswer_") > 0 Тогда 
				callback = ВыборкаДетальныеЗаписи.callback_query;
				Результат = СформироватьСообщение(СтрЗаменить(callback,"/NewAnswer","/AddAnswer")+"\"+ТипЗапроса, ЗапросПользователя,ПараметрыКлавиатуры);
			КонецЕсли;
			
			Если  СтрНайти(ВыборкаДетальныеЗаписи.callback_query,"/Search") > 0 Тогда 
				callback = ВыборкаДетальныеЗаписи.callback_query;
				Результат = СформироватьСообщение(СтрЗаменить(callback,"/Search","/SearchTicket")+"\"+ТипЗапроса, ЗапросПользователя,ПараметрыКлавиатуры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/FindUser") <> 0 Тогда
		Результат = СформироватьСписокПользователейДляВыбора(ЗапросПользователя.id,ТипЗапроса,ПараметрыКлавиатуры);
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/SendToUser") <> 0 Тогда
		Результат = ПередатьЗаявкуПользователю(ЗапросПользователя.id,ТипЗапроса,ПараметрыКлавиатуры);
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/SearchTicket") <> 0 Тогда
		ПараметрыКлавиатуры = "";
		Заявка = НайтиЗаявкуПоОписанию(ЗапросПользователя.id,ТипЗапроса);
		Если ЗначениеЗаполнено(Заявка) Тогда
			ТипЗапросаПоиска = "/IdTicket_"+Формат(Заявка.Номер,"ЧГ=0")+"_"+Формат(Заявка.Дата,"ДФ=ddMMyyyy");
			Результат = СформироватьСообщение(ТипЗапросаПоиска, ЗапросПользователя,ПараметрыКлавиатуры);
		Иначе
			Результат = "Заявка с таким номером не найдена!";
			
			МассивСтрокиКнопок = Новый Массив();
			МассивКнопок = Новый Массив();
			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки","Повторить поиск");
			СтруктураКнопки.Вставить("Ссылка","/Search");
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
			МассивКнопок.Добавить(МассивСтрокиКнопок);
		
			ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);
		КонецЕсли;	
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/NewAnswer") <> 0 Тогда
		ТекстЗаказа = СокрЛП(СтрЗаменить(ТипЗапроса,"/NewAnswer_",""));
		НомерРазделителя = СтрНайти(ТекстЗаказа,"_");
		
		ТекстНомера = Лев(ТекстЗаказа,?(НомерРазделителя=0,СтрДлина(ТекстНомера),НомерРазделителя-1));
		НомерДок = СокрЛП(ТекстНомера);
		
		Результат = "Введите текст ответа который нужно добавить для заявки №"+НомерДок;
		
		МассивКнопок = Новый Массив();
		МассивСтрокиКнопок = Новый Массив();
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","Отмена");
		СтруктураКнопки.Вставить("Ссылка","/Cancel");
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		МассивКнопок.Добавить(МассивСтрокиКнопок);
		
		ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/AddAnswer") <> 0 Тогда
		Результат = ДобавитьОтветПоЗаявке(ЗапросПользователя.id,ТипЗапроса,ПараметрыКлавиатуры);
	КонецЕсли;
	
	Если СтрНайти(ТипЗапроса,"/NewStatus") <> 0 Тогда
		Результат = ВыбратьСтатусПоЗаявке(ЗапросПользователя.id,ТипЗапроса,ПараметрыКлавиатуры);
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/ChangeStatus") <> 0 Тогда
		Результат = ИзменитьСтатусЗаявки(ЗапросПользователя.id,ТипЗапроса,ПараметрыКлавиатуры);
	КонецЕсли;

	Если СтрНайти(ТипЗапроса,"/Cancel") <> 0 Тогда
		ПараметрыКлавиатуры = "";
		Результат ="Действие отменено.";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ДобавитьПодпискуПользователя(ЗапросПользователя)
	Ключ = ПолучитьКлючТелеграм();
	
	мз = РегистрыСведений.ТелеграмПодписчики.СоздатьМенеджерЗаписи();
	мз.id =ЗапросПользователя.id;
	мз.КлючТелеграм =Ключ;
	мз.Прочитать();
	Если мз.Выбран() и НЕ мз.ДоступРазрешен Тогда	
		Возврат "Заявка на подписку не была активирована!";
	КонецЕслИ;
	
	//Добавим подписку	
	мз.id =ЗапросПользователя.id;
	мз.КлючТелеграм =Ключ;

	мз.date =ЗапросПользователя.date;
	мз.first_name =ЗапросПользователя.first_name;
	мз.Записать();
	Возврат "Заявка на подписку отправлена! Подписка будет активирована Администратором в ближайшее время"
КонецФункции

Функция УдалитьПодпискуПользователя(ЗапросПользователя)
	Ключ = ПолучитьКлючТелеграм();
		
	Набор = РегистрыСведений.ТелеграмПодписчики.СоздатьНаборЗаписей();
	ТекОтбор = Набор.Отбор.id;
	ТекОтбор.Установить(ЗапросПользователя.id);
	ТекОтбор = Набор.Отбор.КлючТелеграм;
	ТекОтбор.Установить(Ключ);
	Набор.Прочитать();
	
	Если Набор.Количество() = 0 Тогда
		Возврат "Пользователь не был подписан! Подписки не найдена!";
	КонецЕсли;
	Набор.Очистить();
	Набор.Записать();
	
	Возврат "Подписки удалены!";
КонецФункции

Функция ПолучитьПользователяПоИд(Ид)
	Пользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат Ложь;
	КонецЕслИ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелеграмПодписчики.Пользователь
		|ИЗ
		|	РегистрСведений.ТелеграмПодписчики КАК ТелеграмПодписчики
		|ГДЕ
		|	ТелеграмПодписчики.id = &id
		|	И ТелеграмПодписчики.КлючТелеграм = &КлючТелеграм
		|	И ТелеграмПодписчики.ДоступРазрешен = ИСТИНА";
	
	Запрос.УстановитьПараметр("id", Ид);
	Запрос.УстановитьПараметр("КлючТелеграм", Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Пользователь = ВыборкаДетальныеЗаписи.Пользователь;
	КонецЕсли;
	Возврат Пользователь;
КонецФункции

Функция ПроверитьДоступПользователяПоИд(Ид)
	Статус = Ложь;
	
	Ключ = ПолучитьКлючТелеграм();
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Возврат Ложь;
	КонецЕслИ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелеграмПодписчики.ДоступРазрешен
		|ИЗ
		|	РегистрСведений.ТелеграмПодписчики КАК ТелеграмПодписчики
		|ГДЕ
		|	ТелеграмПодписчики.id = &id
		|	И ТелеграмПодписчики.КлючТелеграм = &КлючТелеграм";
	
	Запрос.УстановитьПараметр("id", Ид);
	Запрос.УстановитьПараметр("КлючТелеграм", Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Статус = ВыборкаДетальныеЗаписи.ДоступРазрешен;
	КонецЕсли;
	Возврат Статус;
КонецФункции

Функция СоздатьВнутрКлавиатуру(МассивКнопок) Экспорт
	МассивКнопокJSON = Новый Массив();
	
	Для Каждого МассивСтрокиКнопок Из МассивКнопок Цикл
		МассивСтрокиКнопокJSON = Новый Массив();

		Для Каждого СтруктураКнопки Из МассивСтрокиКнопок Цикл
			ТекстКнопкиJSON = ПолучитьОписаниеКнопкиКлавиатуры(СтруктураКнопки);
			МассивСтрокиКнопокJSON.Добавить(ТекстКнопкиJSON);
		КонецЦикла;	
		
		МассивКнопокJSON.Добавить(МассивСтрокиКнопокJSON)
	КонецЦикла;	
	ОписаниеКлавиатурыJSON = ПолучитьОписаниеКлавиатуры(МассивКнопокJSON);	
	
	Возврат ОписаниеКлавиатурыJSON;
КонецФункции

Функция ПолучитьОписаниеКнопкиКлавиатуры(ПараметрыКнопки)
	  ЗаписьJSON =  Новый ЗаписьJSON;
	  ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	  
	  ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(,,Истина,,,,,Ложь,Ложь);
	  
	  ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	  
	  ЗаписьJSON.ЗаписатьНачалоОбъекта();

	  ЗаписьJSON.ЗаписатьИмяСвойства("text");
	  ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ПараметрыКнопки.ИмяКнопки));
	  
	  ЗаписьJSON.ЗаписатьИмяСвойства("callback_data");
	  ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ПараметрыКнопки.Ссылка));
	  
	  ЗаписьJSON.ЗаписатьКонецОбъекта();
	  
	  СтрокаВозврата = ЗаписьJSON.Закрыть();
	  
	  Возврат СтрокаВозврата;
КонецФункции

Функция ПолучитьОписаниеКлавиатуры(МассивКнопок)
	ЗаписьJSON =  Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	  
	  ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(,,Истина,,,,,Ложь,Ложь);
	  
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("inline_keyboard");	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого МасивСтрокиКнопок Из МассивКнопок Цикл
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Инд = 1;
		Для Каждого Эл Из МасивСтрокиКнопок Цикл
			ЗаписьJSON.ЗаписатьБезОбработки(Эл+?(Инд = МасивСтрокиКнопок.Количество(),"",","));
			Инд = Инд + 1;
		КонецЦикла;	
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	  
    СтрокаВозврата = ЗаписьJSON.Закрыть();

	Возврат СтрокаВозврата;
КонецФункции

Функция ПользовательРаспределительЗаявок(Ид)
	Статус = Ложь;
	Пользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Ключ = ПолучитьКлючТелеграм();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелеграмПодписчики.Пользователь
		|ИЗ
		|	РегистрСведений.ТелеграмПодписчики КАК ТелеграмПодписчики
		|ГДЕ
		|	ТелеграмПодписчики.id = &id
		|	И ТелеграмПодписчики.КлючТелеграм = &КлючТелеграм";
	
	Запрос.УстановитьПараметр("id", Ид);
	Запрос.УстановитьПараметр("КлючТелеграм", Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Пользователь = ВыборкаДетальныеЗаписи.Пользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ  
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.РаспределительЗаявок = &РаспределительЗаявок
		|	И УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("РаспределительЗаявок", Пользователь);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Статус = Истина; 
	КонецЕсли;

	Возврат Статус;
КонецФункции

Функция ПреобразоватьДатуИзТекста(Стр)Экспорт
	
	Д = Дата("00010101000000");
	Если ПустаяСтрока(Стр) Тогда
		Возврат Д;
	КонецЕсли;
	
	Если Найти(Стр,".")>0 Тогда
		
		Если Найти(Стр,":")>0 И Найти(Стр," ")>0 Тогда
			М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр," ");
			Возврат ПреобразоватьДатуИзТекста(М[0]);
		КонецЕсли;
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,".");
	ИначеЕсли Найти(Стр,"/")>0 Тогда
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"/");
	ИначеЕсли Найти(Стр,",")>0 Тогда
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,",");
	ИначеЕсли Найти(Стр,"-")>0 Тогда
		М = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"-");
	ИначеЕсли СтрДлина(Стр)=8 И ЭтоЧисло(Стр) Тогда//Дата в формате 01012001 ?
		Попытка
			Год = Прав(Стр,4);
			День = Лев(Стр,2);
			Месяц = Сред(Стр,3,2);
			
			Д = Дата(Год,Месяц,День);
		Исключение	
		КонецПопытки;
		Возврат Д;
	Иначе
		Возврат Д;
	КонецЕсли;
	
	Попытка
		Если М.Количество()=3 Тогда //"01.02.13" или "01.02.2013"
			Год = ?(СтрДлина(М[2])=2,2000+М[2],М[2]);
			Д = Дата(Год,М[1],М[0]);
		ИначеЕсли М.Количество()=2 Тогда //"02.13" или "02.2013";
			Год = ?(СтрДлина(М[1])=2,2000+М[1],М[1]);
			Д = Дата(Год,М[0],1);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Д;

КонецФункции

Функция ЭтоЧисло(СловоКПроверке) Экспорт
	
	Слово = Формат(СловоКПроверке,"ЧГ=0");
	
	Цифры = "1234567890,";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		НомСимвола = НомСимвола + 1;
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция СформироватьСписокЗаявокОтПользователя(Ид,ПараметрыКлавиатуры)
	Ключ = ПолучитьКлючТелеграм();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Заявка.Ссылка,
		|	ТелеграмПодписчики.Пользователь,
		|	Заявка.Номер КАК Номер,
		|	Заявка.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ТелеграмПодписчики КАК ТелеграмПодписчики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заявка КАК Заявка
		|		ПО ТелеграмПодписчики.Пользователь = Заявка.Постановщик
		|ГДЕ
		|	Заявка.ПометкаУдаления = ЛОЖЬ
		|	И НЕ Заявка.Статус В (&МассивСтатусов)
		|	И ТелеграмПодписчики.id = &id
		|	И ТелеграмПодписчики.ДоступРазрешен = ИСТИНА
		|	И ТелеграмПодписчики.КлючТелеграм = &КлючТелеграм
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заявка.ДатаИзменения УБЫВ";
	Запрос.УстановитьПараметр("id",Ид);
	Запрос.УстановитьПараметр("КлючТелеграм",Ключ);
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Объединена);
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Отменена);
	Запрос.УстановитьПараметр("МассивСтатусов",МассивСтатусов);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыКлавиатуры = "";	
	    Результат = "По вашему пользователю не найдены не заявки!";
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = "Последние "+ВыборкаДетальныеЗаписи.Количество()+" заявок от вас.Выберите заявку из списка ниже:";
	Инд = 1;
	сч = 0;
	МассивКнопок = Новый Массив();
	ЧислоКнопокВСтроке = 2;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Инд = 1 Тогда
			МассивСтрокиКнопок = Новый Массив();
		КонецЕсли;
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","№"+Формат(ВыборкаДетальныеЗаписи.Номер,"ЧГ=0")+" от "+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy"));
		СтруктураКнопки.Вставить("Ссылка","/IdTicket_"+Формат(ВыборкаДетальныеЗаписи.Номер,"ЧГ=0")+"_"+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=ddMMyyyy"));
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		Если Инд = ЧислоКнопокВСтроке Тогда
			Инд = 1;
			МассивКнопок.Добавить(МассивСтрокиКнопок);
			сч = 0;
		Иначе
			Инд = Инд + 1;
			сч = сч + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если сч  > 0 Тогда
		МассивКнопок.Добавить(МассивСтрокиКнопок);
	КонецЕсли;

	ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);	
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСписокЗаявокПользователя(Ид,ПараметрыКлавиатуры)
	Ключ = ПолучитьКлючТелеграм();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Заявка.Ссылка,
		|	ТелеграмПодписчики.Пользователь,
		|	Заявка.Номер КАК Номер,
		|	Заявка.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ТелеграмПодписчики КАК ТелеграмПодписчики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заявка КАК Заявка
		|		ПО ТелеграмПодписчики.Пользователь = Заявка.ТекущийИсполнитель
		|ГДЕ
		|	Заявка.ПометкаУдаления = ЛОЖЬ
		|	И НЕ Заявка.Статус В (&МассивСтатусов)
		|	И ТелеграмПодписчики.id = &id
		|	И ТелеграмПодписчики.ДоступРазрешен = ИСТИНА
		|	И ТелеграмПодписчики.КлючТелеграм = &КлючТелеграм
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заявка.ДатаИзменения УБЫВ";
	Запрос.УстановитьПараметр("id",Ид);
	Запрос.УстановитьПараметр("КлючТелеграм",Ключ);
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Выполнена);
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Объединена);
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Отменена);
	Запрос.УстановитьПараметр("МассивСтатусов",МассивСтатусов);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыКлавиатуры = "";	
	    Результат = "По вашему пользователю не найдены не заявки!";
		Возврат Результат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = "Последние "+ВыборкаДетальныеЗаписи.Количество()+" не закрытых заявок.Выберите заявку из списка ниже:";
	Инд = 1;
	сч = 0;
	МассивКнопок = Новый Массив();
	ЧислоКнопокВСтроке = 2;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Инд = 1 Тогда
			МассивСтрокиКнопок = Новый Массив();
		КонецЕсли;
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","№"+Формат(ВыборкаДетальныеЗаписи.Номер,"ЧГ=0")+" от "+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy"));
		СтруктураКнопки.Вставить("Ссылка","/IdTicket_"+Формат(ВыборкаДетальныеЗаписи.Номер,"ЧГ=0")+"_"+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=ddMMyyyy"));
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		Если Инд = ЧислоКнопокВСтроке Тогда
			Инд = 1;
			МассивКнопок.Добавить(МассивСтрокиКнопок);
			сч = 0;
		Иначе
			Инд = Инд + 1;
			сч = сч + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если сч  > 0 Тогда
		МассивКнопок.Добавить(МассивСтрокиКнопок);
	КонецЕсли;

	ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);	
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСписокНеРаспределенныхЗаявокПоИдПользователя(Ид,ПараметрыКлавиатуры)
	Ключ = ПолучитьКлючТелеграм();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТелеграмПодписчики.Пользователь
		|ИЗ
		|	РегистрСведений.ТелеграмПодписчики КАК ТелеграмПодписчики
		|ГДЕ
		|	ТелеграмПодписчики.id = &id
		|	И ТелеграмПодписчики.КлючТелеграм = &КлючТелеграм";
	
	Запрос.УстановитьПараметр("id", Ид);
	Запрос.УстановитьПараметр("КлючТелеграм", Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Пользователь = ВыборкаДетальныеЗаписи.Пользователь;
	Иначе
		ПараметрыКлавиатуры = "";	
	    Результат = "По вашему пользователю не найдены не заявки!";
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ПОМЕСТИТЬ ТаблУчетныхЗаписей
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.РаспределительЗаявок = &РаспределительЗаявок
		|	И УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 10
		|	ОповещенияПоЗаявкам.Заявка,
		|	ОповещенияПоЗаявкам.Заявка.Дата КАК Дата,
		|	ОповещенияПоЗаявкам.Заявка.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.ОповещенияПоЗаявкам КАК ОповещенияПоЗаявкам
		|ГДЕ
		|	ОповещенияПоЗаявкам.Событие = &Событие
		|	И НЕ ОповещенияПоЗаявкам.Заявка.Статус В (&МассивСтатусов)
		|	И ОповещенияПоЗаявкам.УчетнаяЗапись В
		|			(ВЫБРАТЬ
		|				ТаблУчетныхЗаписей.Ссылка
		|			ИЗ
		|				ТаблУчетныхЗаписей КАК ТаблУчетныхЗаписей)
		|	И ОповещенияПоЗаявкам.Заявка.ТекущийИсполнитель = &ПустойПользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОповещенияПоЗаявкам.Заявка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("РаспределительЗаявок", Пользователь);
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("Событие", Перечисления.ВидыСобытийПоЗаявке.Зарегистрирована);
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Выполнена);
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Объединена);
	МассивСтатусов.Добавить(Справочники.СостоянияЗаявок.Отменена);
	Запрос.УстановитьПараметр("МассивСтатусов",МассивСтатусов);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыКлавиатуры = "";	
	    Результат = "Для вашего пользователя не найдены не распределенные заявки!";
		Возврат Результат;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = "Последние "+ВыборкаДетальныеЗаписи.Количество()+" не распределенных заявок.Выберите заявку из списка ниже:";
	Инд = 1;
	сч = 0;
	МассивКнопок = Новый Массив();
	ЧислоКнопокВСтроке = 2;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Инд = 1 Тогда
			МассивСтрокиКнопок = Новый Массив();
		КонецЕсли;
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","№"+Формат(ВыборкаДетальныеЗаписи.Номер,"ЧГ=0")+" от "+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy"));
		СтруктураКнопки.Вставить("Ссылка","/IdTicket_"+Формат(ВыборкаДетальныеЗаписи.Номер,"ЧГ=0")+"_"+Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=ddMMyyyy"));
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		Если Инд = ЧислоКнопокВСтроке Тогда
			Инд = 1;
			МассивКнопок.Добавить(МассивСтрокиКнопок);
			сч = 0;
		Иначе
			Инд = Инд + 1;
			сч = сч + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если сч > 0 Тогда
		МассивКнопок.Добавить(МассивСтрокиКнопок);
	КонецЕсли;

	ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);	
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеЗаявкиПоНомеру(ИдПользователя,НомерДок,ДатаЗаявки,ДокЗаявки)
	СообщениеВозврата = "";
	Если ЗначениеЗаполнено(НомерДок) Тогда		 
		 ДокЗаявки = Документы.Заявка.НайтиПоНомеру(НомерДок,ДатаЗаявки);
		 
		 Если ЗначениеЗаполнено(ДокЗаявки) Тогда
		 	СообщениеВозврата = СформироватьСообщениеДляОтправкиПоЗаявке(ДокЗаявки);
			Статус = Истина;
		 Иначе
			СообщениеВозврата = "Указанная заявка не найдена в базе!"
		 КонецЕслИ;	 
	КонецЕсли;
	
	Возврат СообщениеВозврата;
КонецФункции

Функция СформироватьСообщениеДляОтправкиПоЗаявке(ДокЗаявки) 
	СообщениеОписанияЗаявки = "";
	
	Номерзаявки = ДокЗаявки.Номер;
	ДатаЗаявки = Формат(ДокЗаявки.Дата,"ДФ=dd.MM.yyyy");
	
	ФД_ОписаниеЗаявки = Новый ФорматированныйДокумент;
	ФД_ОписаниеЗаявки.УстановитьHTML(Докзаявки.ОписаниеЗаявкиHTML,Новый Структура());
	ОписаниеЗаявки = ФД_ОписаниеЗаявки.ПолучитьТекст();

	СообщениеОписанияЗаявки = " Заявка № "+Номерзаявки+" от "+ДатаЗаявки+"
	|Тема: "+СтрЗаменить(Докзаявки.Тема,"#","№")+"
	|Статус: "+Докзаявки.Статус+"
	|
	|Описание заявки: "+СокрЛП(ЛЕВ(ОписаниеЗаявки,500))+"
	|
	|Постановщик: "+Докзаявки.Постановщик+"
	|Текущий исполнитель: "+Докзаявки.ТекущийИсполнитель+"
	|Исполнить до: "+Формат(Докзаявки.СрокЗаявки,"ДФ=dd.MM.yyyy; ДП=-")+"
	|";
		
	Возврат СообщениеОписанияЗаявки;
КонецФункции

Функция СформироватьСписокПользователейДляВыбора(Ид,ТекстЗапроса,ПараметрыКлавиатуры)
	СообщениеВозврата = "";
	СтрокаЗапроса = "";
	СтрокаПоиска = "";
	
	//Получаем текст запроса пользователя
	мнСтрока = СтрЗаменить(ТекстЗапроса,"\",Символы.ПС);
	Если СтрЧислоСтрок(мнСтрока) > 1 Тогда
		СтрокаЗапроса = СтрПолучитьСтроку(мнСтрока,1);
		СтрокаПоиска = СтрПолучитьСтроку(мнСтрока,2);
	Иначе
		СообщениеВозврата = "Ошибка анализа строки поиска...";
		Возврат СообщениеВозврата; 
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.Наименование ПОДОБНО &Наименование
		|	И Пользователи.Служебный = ЛОЖЬ
		|	И Пользователи.Предопределенный = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%"+СокрЛП(СтрокаПоиска)+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
	    СообщениеВозврата = "Не найдены пользователи по такому имени!";
		МассивКнопок = Новый Массив();
		МассивСтрокиКнопок = Новый Массив();	
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","Повторить поиск...");
		СтруктураКнопки.Вставить("Ссылка",СтрЗаменить(СтрокаЗапроса,"/FindUser","/Send"));
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		МассивКнопок.Добавить(МассивСтрокиКнопок);
		ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);	

		Возврат СообщениеВозврата;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	СообщениеВозврата = "Выберите пользователя из списка ниже:";
	Инд = 1;
	сч = 0;
	МассивКнопок = Новый Массив();
	ЧислоКнопокВСтроке = 2;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Инд = 1 Тогда
			МассивСтрокиКнопок = Новый Массив();
		КонецЕсли;
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки",ВыборкаДетальныеЗаписи.Ссылка.Наименование);
		СтруктураКнопки.Вставить("Ссылка",СтрЗаменить(СтрокаЗапроса,"/FindUser","/SendToUser")+"\"+Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		Если Инд = ЧислоКнопокВСтроке Тогда
			Инд = 1;
			МассивКнопок.Добавить(МассивСтрокиКнопок);
			сч = 0;
		Иначе
			Инд = Инд + 1;
			сч = сч + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если сч > 0 Тогда
		МассивКнопок.Добавить(МассивСтрокиКнопок);
	КонецЕсли;
	
	МассивСтрокиКнопок = Новый Массив();	
	СтруктураКнопки = Новый Структура();
	СтруктураКнопки.Вставить("ИмяКнопки","Повторить поиск...");
	СтруктураКнопки.Вставить("Ссылка",СтрЗаменить(СтрокаЗапроса,"/FindUser","/Send"));
	МассивСтрокиКнопок.Добавить(СтруктураКнопки);
	МассивКнопок.Добавить(МассивСтрокиКнопок);
	
	ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);	
	
	Возврат СообщениеВозврата;
КонецФункции

Функция ДобавитьОтветПоЗаявке(Ид,ТекстЗапроса,ПараметрыКлавиатуры)
	ОписаниеОшибки = "";
	Отказ = Ложь;
	СообщениеВозврата = "";
	ПараметрыКлавиатуры = "";
	
	ТекстДляПоиска = СокрЛП(СтрЗаменить(ТекстЗапроса,"/AddAnswer_",""));
	НомерРазделителя = СтрНайти(ТекстДляПоиска,"_");
	
	ТекстНомера = Лев(ТекстДляПоиска,?(НомерРазделителя=0,СтрДлина(ТекстДляПоиска),НомерРазделителя-1));
	НомерДок = СокрЛП(ТекстНомера);
	
	ТекстДатыИПользователя = СокрЛП(СтрЗаменить(Сред(ТекстДляПоиска,НомерРазделителя),"_",""));
	НомерРазделителяДаты = СтрНайти(ТекстДатыИПользователя,"\");
	
	ТекстДаты = Лев(ТекстДатыИПользователя,?(НомерРазделителяДаты=0,СтрДлина(ТекстДатыИПользователя),НомерРазделителяДаты-1));
	ДатаДок = ПреобразоватьДатуИзТекста(ТекстДаты);
	
	ТекстОтвета = СокрЛП(СтрЗаменить(Сред(ТекстДатыИПользователя,НомерРазделителяДаты),"\",""));
		
	ДокЗаявки  = Документы.Заявка.ПустаяСсылка();
	Если ЗначениеЗаполнено(НомерДок) Тогда		 
		ДокЗаявки = Документы.Заявка.НайтиПоНомеру(НомерДок,ДатаДок);
		
		Если Не ЗначениеЗаполнено(ДокЗаявки) Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Указанная заявка не найдена в базе!"; 
			Отказ = Истина;
		КонецЕслИ;	 
	Иначе
		ОписаниеОшибки =  ОписаниеОшибки + "Указанная заявка не найдена в базе!";
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ  Тогда
		//Проверяем права на передачу заявки. Мы можем предеать заявку только если у нас пустой исполнитель или это мы
		ПользовательЗапроса = ПолучитьПользователяПоИд(Ид);
		ОписаниеОшибкиПроверки = "";
		Если НЕ ПроверитьДоступностьИзмененияЗаявки(Ид,ДокЗаявки,ОписаниеОшибкиПроверки) Тогда
			ОписаниеОшибки =  ОписаниеОшибки + ОписаниеОшибкиПроверки; 
		Иначе  
			ТекОбъект = ДокЗаявки.ПолучитьОбъект();
			
			НовСтр = Текобъект.ТекстыДополнений.Добавить();
			
			НовСтр.ДатаСоздания = ТекущаяДата();
			НовСтр.ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.Дополнение;
			НовСтр.ИдДополнения = Строка(Новый УникальныйИдентификатор());
			НовСтр.Пользователь = ПользовательЗапроса;
			НовСтр.ОписаниеДополнения = ТекстОтвета;
			
			ТекстОтветаХТМЛ = СтрЗаменить(ТекстОтвета,Символы.ПС,"&nbsp;");
			ТекстОтветаХТМЛ = СтрЗаменить(ТекстОтветаХТМЛ,"javascript","");
			ТекстОтветаХТМЛ = СтрЗаменить(ТекстОтветаХТМЛ,"script","");
			ТекстОтветаХТМЛ = СтрЗаменить(ТекстОтветаХТМЛ,"<","");
			ТекстОтветаХТМЛ = СтрЗаменить(ТекстОтветаХТМЛ,">","");
			
			НовСтр.ОписаниеДополненияHTML = "<P>"+ТекстОтветаХТМЛ+"</P>";
			
			Попытка
				ТекОбъект.Записать();
				СообщениеВозврата = "По заявке № "+НомерДок+" успешно добавлен новый ответ!";
			Исключение	
				ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи заявки! " + ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;

	Если Отказ Тогда
		СообщениеВозврата = "При добавлении ответа по заявке "+НомерДок+" возникли ошибки! "+ОписаниеОшибки;
	КонецЕсли;
	Возврат СообщениеВозврата;
КонецФункции

Функция ВыбратьСтатусПоЗаявке(Ид,ТекстЗапроса,ПараметрыКлавиатуры)	
	ОписаниеОшибки = "";
	СообщениеВозврата = "";
	ПараметрыКлавиатуры = "";
	Отказ = Ложь;
	
	ТекстДляПоиска = СокрЛП(СтрЗаменить(ТекстЗапроса,"/NewStatus_",""));
	НомерРазделителя = СтрНайти(ТекстДляПоиска,"_");
	
	ТекстНомера = Лев(ТекстДляПоиска,?(НомерРазделителя=0,СтрДлина(ТекстДляПоиска),НомерРазделителя-1));
	НомерДок = СокрЛП(ТекстНомера);
	
	ТекстДаты = СокрЛП(СтрЗаменить(Сред(ТекстДляПоиска,НомерРазделителя),"_",""));
	ДатаДок = ПреобразоватьДатуИзТекста(ТекстДаты);
			
	ДокЗаявки  = Документы.Заявка.ПустаяСсылка();
	Если ЗначениеЗаполнено(НомерДок) Тогда		 
		ДокЗаявки = Документы.Заявка.НайтиПоНомеру(НомерДок,ДатаДок);
		
		Если Не ЗначениеЗаполнено(ДокЗаявки) Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Указанная заявка не найдена в базе!"; 
			Отказ = Истина;
		КонецЕслИ;	 
	Иначе
		ОписаниеОшибки =  ОписаниеОшибки + "Указанная заявка не найдена в базе!";
		Отказ = Истина;
	КонецЕсли;

	ОписаниеОшибкиПроверки = "";
	Если НЕ ПроверитьДоступностьИзмененияЗаявки(Ид,ДокЗаявки,ОписаниеОшибкиПроверки) Тогда
		ОписаниеОшибки = ОписаниеОшибки + ОписаниеОшибкиПроверки;
		Отказ = Истина;		
	КонецЕслИ;
	
	ПользовательЗапроса = ПолучитьПользователяПоИд(Ид);
 	Если НЕ ЗначениеЗаполнено(ПользовательЗапроса) Тогда
		ОписаниеОшибки = ОписаниеОшибки + "Не найдено соответствие пользователя для вашего аккаунта или вам закрыт доступ! Обратитесь к администратору!";
		Отказ = Истина;		
	КонецЕслИ;
	
	Если НЕ ЗначениеЗаполнено(ПользовательЗапроса.ИдентификаторПользователяИБ) Тогда
		ОписаниеОшибки = ОписаниеОшибки + "Вашему пользователю не разрешен вход в базу! Обратитесь к администратору!";
		Отказ = Истина;		
	КонецЕслИ;

	Если Не Отказ Тогда
		СообщениеВозврата = "Выберите статус который нужно установить для заявки №"+НомерДок+". Текущий статус "+ДокЗаявки.Статус;
					
		СписокСтатусовНеОтображать = Новый СписокЗначений();
		СписокСтатусовНеОтображать.Добавить(Справочники.СостоянияЗаявок.Зарегистрирована);
		СписокСтатусовНеОтображать.Добавить(Справочники.СостоянияЗаявок.Объединена);
		
		ПользовательИнфБазы = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательЗапроса.ИдентификаторПользователяИБ);
		Если ДокЗаявки.ТекущийИсполнитель <> ПользовательЗапроса И Не ПользовательИнфБазы.Роли.Содержит(Метаданные.Роли.РазрешитьЗакрытиеНеСвоихЗаявок)  И Не ПользовательИнфБазы.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			СписокСтатусовНеОтображать.Добавить(Справочники.СостоянияЗаявок.Выполнена);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЗаявок.Ссылка
		|ИЗ
		|	Справочник.СостоянияЗаявок КАК СостоянияЗаявок
		|ГДЕ
		|	СостоянияЗаявок.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияЗаявок.Ссылка В (&СписокСтатусов)";
		Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусовНеОтображать);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Инд = 1;
		сч = 0;
		МассивКнопок = Новый Массив();
		ЧислоКнопокВСтроке = 2;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Инд = 1 Тогда
				МассивСтрокиКнопок = Новый Массив();
			КонецЕсли;
			
			СтруктураКнопки = Новый Структура();
			СтруктураКнопки.Вставить("ИмяКнопки",Строка(ВыборкаДетальныеЗаписи.Ссылка));
			СтруктураКнопки.Вставить("Ссылка","/ChangeStatus_"+Формат(ДокЗаявки.Номер,"ЧГ=0")+"_"+Формат(ДокЗаявки.Дата,"ДФ=ddMMyyyy")+"\"+Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
			МассивСтрокиКнопок.Добавить(СтруктураКнопки);			
			
			Если Инд = ЧислоКнопокВСтроке Тогда
				Инд = 1;
				МассивКнопок.Добавить(МассивСтрокиКнопок);
				сч = 0;
			Иначе
				Инд = Инд + 1;
				сч = сч + 1;
			КонецЕсли;		
		КонецЦикла;
		
		Если сч > 0 Тогда
			МассивКнопок.Добавить(МассивСтрокиКнопок);
		КонецЕсли;
		
		МассивСтрокиКнопок = Новый Массив();
		
		СтруктураКнопки = Новый Структура();
		СтруктураКнопки.Вставить("ИмяКнопки","Отмена");
		СтруктураКнопки.Вставить("Ссылка","/Cancel");
		МассивСтрокиКнопок.Добавить(СтруктураКнопки);
		
		МассивКнопок.Добавить(МассивСтрокиКнопок);
		
		ПараметрыКлавиатуры = СоздатьВнутрКлавиатуру(МассивКнопок);
	Иначе
		СообщениеВозврата = ОписаниеОшибки;
	КонецЕслИ;	
	
	Возврат СообщениеВозврата;
КонецФункции

Функция ИзменитьСтатусЗаявки(Ид,ТекстЗапроса,ПараметрыКлавиатуры)
	
	ОписаниеОшибки = "";
	Отказ = Ложь;
	СообщениеВозврата = "";
	ПараметрыКлавиатуры = "";
	
	ТекстДляПоиска = СокрЛП(СтрЗаменить(ТекстЗапроса,"/ChangeStatus_",""));
	НомерРазделителя = СтрНайти(ТекстДляПоиска,"_");
	
	ТекстНомера = Лев(ТекстДляПоиска,?(НомерРазделителя=0,СтрДлина(ТекстДляПоиска),НомерРазделителя-1));
	НомерДок = СокрЛП(ТекстНомера);
	
	ТекстДатыИПользователя = СокрЛП(СтрЗаменить(Сред(ТекстДляПоиска,НомерРазделителя),"_",""));
	НомерРазделителяДаты = СтрНайти(ТекстДатыИПользователя,"\");
	
	ТекстДаты = Лев(ТекстДатыИПользователя,?(НомерРазделителяДаты=0,СтрДлина(ТекстДатыИПользователя),НомерРазделителяДаты-1));
	ДатаДок = ПреобразоватьДатуИзТекста(ТекстДаты);
	
	ТекстСтатуса = СокрЛП(СтрЗаменить(Сред(ТекстДатыИПользователя,НомерРазделителяДаты),"\",""));
	
	Попытка
		ГУИД_Статуса = Новый УникальныйИдентификатор(СокрЛП(ТекстСтатуса));
		НовыйСтатус = Справочники.СостоянияЗаявок.ПолучитьСсылку(ГУИД_Статуса);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЗаявок.Ссылка
		|ИЗ
		|	Справочник.СостоянияЗаявок КАК СостоянияЗаявок
		|ГДЕ
		|	СостоянияЗаявок.Ссылка = &Ссылка И СостоянияЗаявок.Наименование Есть NULL";
		
		Запрос.УстановитьПараметр("Ссылка", НовыйСтатус);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Статус не найден в базе!";
			Отказ = Истина;
		КонецЕсли;		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Статус не найден в базе!"+ОписаниеОшибки();
		Отказ = истина;
	КонецПопытки;	
	
	ДокЗаявки  = Документы.Заявка.ПустаяСсылка();
	Если ЗначениеЗаполнено(НомерДок) Тогда		 
		ДокЗаявки = Документы.Заявка.НайтиПоНомеру(НомерДок,ДатаДок);
		
		Если Не ЗначениеЗаполнено(ДокЗаявки) Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Указанная заявка не найдена в базе!"; 
			Отказ = Истина;
		КонецЕслИ;	 
	Иначе
		ОписаниеОшибки =  ОписаниеОшибки + "Указанная заявка не найдена в базе!";
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ  Тогда
		//Проверяем права на передачу заявки. Мы можем предеать заявку только если у нас пустой исполнитель или это мы
		ПользовательЗапроса = ПолучитьПользователяПоИд(Ид);
		ОписаниеОшибкиПроверки = "";
		Если НЕ ПроверитьДоступностьИзмененияЗаявки(Ид,ДокЗаявки,ОписаниеОшибкиПроверки) Тогда
			ОписаниеОшибки =  ОписаниеОшибки + ОписаниеОшибкиПроверки; 
		Иначе  
			ТекОбъект = ДокЗаявки.ПолучитьОбъект();
			ТекОбъект.Статус = НовыйСтатус;
			
			НовСтр = Текобъект.ТекстыДополнений.Добавить();
			
			НовСтр.ДатаСоздания = ТекущаяДата();
			НовСтр.ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.ИзмененСтатус;
			НовСтр.ИдДополнения = Строка(Новый УникальныйИдентификатор());
			НовСтр.Пользователь = ПользовательЗапроса;
			НовСтр.ОписаниеДополнения = Строка(НовыйСтатус);
			
			Попытка
				ТекОбъект.Записать();
				СообщениеВозврата = "По заявка № "+НомерДок+" успешно установлен новый статус "+НовыйСтатус;
			Исключение	
				ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи заявки! " + ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;

	Если Отказ Тогда
		СообщениеВозврата = "При изменении статуса заявки "+НомерДок+" возникли ошибки! "+ОписаниеОшибки;
	КонецЕсли;
	
	Возврат СообщениеВозврата;
КонецФункции

Функция ПередатьЗаявкуПользователю(Ид,ТекстЗапроса,ПараметрыКлавиатуры)
	ОписаниеОшибки = "";
	Отказ = Ложь;
	СообщениеВозврата = "";
	ПараметрыКлавиатуры = "";
	
	ТекстДляПоиска = СокрЛП(СтрЗаменить(ТекстЗапроса,"/SendToUser_",""));
	НомерРазделителя = СтрНайти(ТекстДляПоиска,"_");
	
	ТекстНомера = Лев(ТекстДляПоиска,?(НомерРазделителя=0,СтрДлина(ТекстДляПоиска),НомерРазделителя-1));
	НомерДок = СокрЛП(ТекстНомера);
	
	ТекстДатыИПользователя = СокрЛП(СтрЗаменить(Сред(ТекстДляПоиска,НомерРазделителя),"_",""));
	НомерРазделителяДаты = СтрНайти(ТекстДатыИПользователя,"\");
	
	ТекстДаты = Лев(ТекстДатыИПользователя,?(НомерРазделителяДаты=0,СтрДлина(ТекстДатыИПользователя),НомерРазделителяДаты-1));
	ДатаДок = ПреобразоватьДатуИзТекста(ТекстДаты);
	
	ТекстПользователя = СокрЛП(СтрЗаменить(Сред(ТекстДатыИПользователя,НомерРазделителяДаты),"\",""));
	
	Попытка
		ГУИД_Пользователя = Новый УникальныйИдентификатор(СокрЛП(ТекстПользователя));
		НовыйПользователь = Справочники.Пользователи.ПолучитьСсылку(ГУИД_Пользователя);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Ссылка И Пользователи.Наименование Есть NULL";
		
		Запрос.УстановитьПараметр("Ссылка", НовыйПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Пользователь не найден в базе!";
			Отказ = Истина;
		КонецЕсли;		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Пользователь не найден в базе!"+ОписаниеОшибки();
		Отказ = истина;
	КонецПопытки;	
	
	ДокЗаявки  = Документы.Заявка.ПустаяСсылка();
	Если ЗначениеЗаполнено(НомерДок) Тогда		 
		ДокЗаявки = Документы.Заявка.НайтиПоНомеру(НомерДок,ДатаДок);
		
		Если Не ЗначениеЗаполнено(ДокЗаявки) Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Указанная заявка не найдена в базе!"; 
			Отказ = Истина;
		КонецЕслИ;	 
	Иначе
		ОписаниеОшибки =  ОписаниеОшибки + "Указанная заявка не найдена в базе!";
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ  Тогда
		//Проверяем права на передачу заявки. Мы можем предеать заявку только если у нас пустой исполнитель или это мы
		ПользовательЗапроса = ПолучитьПользователяПоИд(Ид);
		ОписаниеОшибкиПроверки = "";
		Если НЕ ПроверитьВозможностьПередачиЗаявки(Ид,ДокЗаявки,ОписаниеОшибкиПроверки) Тогда
			ОписаниеОшибки =  ОписаниеОшибки + ОписаниеОшибкиПроверки; 
		Иначе  
			ТекОбъект = ДокЗаявки.ПолучитьОбъект();
			ТекОбъект.ТекущийИсполнитель = НовыйПользователь;
			
			НовСтр = Текобъект.ТекстыДополнений.Добавить();
			
			НовСтр.ДатаСоздания = ТекущаяДата();
			НовСтр.ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.Передача;
			НовСтр.ИдДополнения = Строка(Новый УникальныйИдентификатор());
			НовСтр.Пользователь = ПользовательЗапроса;
			НовСтр.Получатель = НовыйПользователь;
			
			Попытка
				ТекОбъект.Записать();
				СообщениеВозврата = "Заявка № "+НомерДок+" успешно передана пользователю "+НовыйПользователь;
			Исключение	
				ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи заявки! " + ОписаниеОшибки();
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;

	Если Отказ Тогда
		СообщениеВозврата = "При передачи заявки "+НомерДок+" возникли ошибки! "+ОписаниеОшибки;
	КонецЕсли;
	Возврат СообщениеВозврата;
КонецФункции

Функция  ПроверитьВозможностьПередачиЗаявки (Ид,ДокЗаявки,ОписаниеОшибки)
	Отказ= Ложь;
	ПользовательЗапроса = ПолучитьПользователяПоИд(Ид);
	Если Не ЗначениеЗаполнено(ПользовательЗапроса) Тогда
		ОписаниеОшибки = ОписаниеОшибки + "Не найдено соответствие пользователя для вашего аккаунта или вам закрыт доступ! Обратитесь к администратору!";
		Отказ = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(ДокЗаявки.ТекущийИсполнитель) И Не ПользовательРаспределительЗаявок(Ид)  Тогда
		ОписаниеОшибки = ОписаниеОшибки + "У выбранной заявки не заполнен текущий исполнитель и вы не являеетесь распределителем заявок. Передача заявки не возможна.";
		Отказ = Истина;
	ИначеЕсли Не ДокЗаявки.ТекущийИсполнитель = ПользовательЗапроса И ЗначениеЗаполнено(ДокЗаявки.ТекущийИсполнитель) Тогда
		ОписаниеОшибки = ОписаниеОшибки + "У выбранной заявки текущий исполнитель отличается вашего пользователя. Передача заявки не возможна.";
		Отказ = Истина;
	ИначеЕсли ДокЗаявки.Статус = Справочники.СостоянияЗаявок.Выполнена или ДокЗаявки.Статус = Справочники.СостоянияЗаявок.Отменена или ДокЗаявки.Статус = Справочники.СостоянияЗаявок.Объединена Тогда	
		ОписаниеОшибки = ОписаниеОшибки + "Передача заявки со статусом "+ДокЗаявки.Статус+" запрещена.";
		Отказ = Истина;
	КонецЕсли;
	Возврат Не Отказ;
КонецФункции

Функция  ПроверитьДоступностьИзмененияЗаявки (Ид,ДокЗаявки,ОписаниеОшибки)
	Отказ= Ложь;
	ПользовательЗапроса = ПолучитьПользователяПоИд(Ид);
	Если Не ЗначениеЗаполнено(ПользовательЗапроса) Тогда
		ОписаниеОшибки = ОписаниеОшибки + "Не найдено соответствие пользователя для вашего аккаунта или вам закрыт доступ! Обратитесь к администратору!";
		Отказ = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(ДокЗаявки.ТекущийИсполнитель) Тогда
		ОписаниеОшибки = ОписаниеОшибки + "У выбранной заявки не заполнен текущий исполнитель. Добавление ответа к заявке не возможно.";
		Отказ = Истина;	
	ИначеЕсли Не ДокЗаявки.ТекущийИсполнитель = ПользовательЗапроса Тогда
		ОписаниеОшибки = ОписаниеОшибки + "У выбранной заявки текущий исполнитель отличается от вашего пользователя. Добавление ответа к заявке не возможно.";
		Отказ = Истина;
	ИначеЕсли ДокЗаявки.Статус = Справочники.СостоянияЗаявок.Выполнена или ДокЗаявки.Статус = Справочники.СостоянияЗаявок.Отменена или ДокЗаявки.Статус = Справочники.СостоянияЗаявок.Объединена Тогда	
		ОписаниеОшибки = ОписаниеОшибки + "Изменение заявки со статусом "+ДокЗаявки.Статус+" запрещено.";
		Отказ = Истина;
	КонецЕсли;
	Возврат Не Отказ;
КонецФункции

Функция  НайтиЗаявкуПоОписанию(Ид,ТекстЗапроса)
	ОписаниеОшибки = "";
	Отказ = Ложь;
	СообщениеВозврата = "";
	ПараметрыКлавиатуры = "";
	
	ТекстДляПоиска = СокрЛП(СтрЗаменить(ТекстЗапроса,"/SearchTicket\",""));
	
	ТекстНомера = СокрЛП(ТекстДляПоиска);
	
	ДокЗаявки  = Документы.Заявка.ПустаяСсылка();
	
	Если ЭтоЧисло(ТекстНомера) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Заявка.Ссылка
		|ИЗ
		|	Документ.Заявка КАК Заявка
		|ГДЕ
		|	Заявка.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", Число(ТекстНомера));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДокЗаявки = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокЗаявки;
КонецФункции
