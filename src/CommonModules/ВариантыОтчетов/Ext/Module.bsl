///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ВариантыОтчетов.ОбработкаПредопределенныхВариантов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.3";
	Обработчик.Процедура = "ВариантыОтчетов.УстановитьПризнакВариантаВнешнегоОтчета";
	
КонецПроцедуры

// Регистрирует предопределенные варианты отчетов при обновлении ИБ и заполнении пустой ИБ.
// 
// Параметры:
//   ИзмененныеОбъектыДанных - (Соответствие) 
//       |- Ключ     - (Строка) Старое имя отчета
//       |- Значение - (Строка) Новое имя отчета
//	
Функция ОбработкаПредопределенныхВариантов(ИзмененныеОбъектыДанных = Неопределено) Экспорт
	
	// обновить название отчетов и ключи объектов
	
	НачатьТранзакцию();
	Попытка
		БылиОшибки = ложь;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.КлючОбъекта,
		|	ВариантыОтчетов.ПредставлениеОбъекта
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИмяОтчета   = Выборка.КлючОбъекта;
			
			Если ИзмененныеОбъектыДанных <> Неопределено тогда
				ИзменИмяОтчета = ИзмененныеОбъектыДанных[ИмяОтчета];
				Если ИзменИмяОтчета <> Неопределено тогда
					ИмяОтчета = ИзменИмяОтчета;
				КонецЕсли;
			КонецЕсли;
			
			ИмяОтчета   = СтрЗаменить(ИмяОтчета, "Отчет.", "");
			ОтчетМетаданные = Метаданные.Отчеты.Найти(ИмяОтчета);
			Если ОтчетМетаданные = Неопределено тогда
				ОбъектВариантаОтчета = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектВариантаОтчета.ПометкаУдаления = истина;
				ОбъектВариантаОтчета.Записать();
			Иначе
				Если Выборка.ПредставлениеОбъекта <> ОтчетМетаданные.Синоним или Выборка.КлючОбъекта <> "Отчет." + ОтчетМетаданные.Имя тогда
					ОбъектВариантаОтчета = Выборка.Ссылка.ПолучитьОбъект();
					ОбъектВариантаОтчета.КлючОбъекта          = "Отчет." + ОтчетМетаданные.Имя;
					ОбъектВариантаОтчета.ПредставлениеОбъекта = ОтчетМетаданные.Синоним;
					ОбъектВариантаОтчета.ПометкаУдаления = ложь;
					ОбъектВариантаОтчета.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦИкла;
		
		// Обновление вариантов
		СписокОшибокПриОбновлении = Новый Массив;
		
		СписокКлючейПредопределенныхВариантов = Новый СписокЗначений;
		ОтчетыБезСКД = Новый Массив;
		                                         
		СписокОтчетов = ВариантыОтчетовПереопределяемый.СписокОтчетовПоддерживаемыхПодсистемой();
		СоответсвиеОтчетаПодсистемам = ПолучитьСписокПодсистемОтчетов();
		
		ДанныеОПодсистемахВариантов = Новый Структура("СоответствиеПодсистемИВариантов, НеИспользоватьПодсистемуОтчета");
		ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов = Новый ТаблицаЗначений;
		ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("Ключ");
		ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("ПутьКПодсистеме");
		
		ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета = Новый ТаблицаЗначений;
		ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.Колонки.Добавить("Ключ");
		ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.Колонки.Добавить("ПутьКПодсистеме");
		
		ОписаниеВариантов = Новый Соответствие;
		ЗначениеНастроекДопВариантов = Новый Соответствие;
		СписокДопВариантов = Новый СписокЗначений;
		
		Для каждого Отчет из Метаданные.Отчеты Цикл
			
			ПолноеИмяОтчета = Отчет.ПолноеИмя(); 
			
			Если СписокОтчетов.НайтиПоЗначению(ПолноеИмяОтчета) = Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			Если Отчет.ОсновнаяСхемаКомпоновкиДанных <> Неопределено тогда
				Макет = Отчет.ОсновнаяСхемаКомпоновкиДанных.Имя;
				СКД = Отчеты[Отчет.Имя].ПолучитьМакет(Макет);
				Для каждого Вариант из СКД.ВариантыНастроек Цикл
					СписокКлючейПредопределенныхВариантов.Добавить(Отчет.ПолноеИмя() + "\" + Вариант.Имя, Вариант.Представление);
				КонецЦикла;
			Иначе
				СписокКлючейПредопределенныхВариантов.Добавить(ПолноеИмяОтчета + "\СсылкаНаОтчет", Отчет.Синоним);
				ОтчетыБезСКД.Добавить(ПолноеИмяОтчета);
			КонецЕсли;
			
			ДобавитьВДопНастройки(ПолноеИмяОтчета, ОписаниеВариантов, ДанныеОПодсистемахВариантов, СписокДопВариантов, ЗначениеНастроекДопВариантов);
			
		КонецЦикла;
		
		Для каждого Вариант из СписокДопВариантов Цикл
			
			НомерСимвола = СтрНайти(Вариант.Значение, "\");
			ПолноеИмяОтчета = Лев(Вариант.Значение, НомерСимвола-1);
			
			СписокКлючейПредопределенныхВариантов.Добавить(Вариант.Значение, Вариант.Представление);
			
		КонецЦикла;
		
		// Определяем, что обновлять.
		ВариантыДляОбновления      = Новый СписокЗначений;
		НовыеВариантыДляДобавления = Новый СписокЗначений;
		ВариантыНеИспользуемые     = Новый Массив;
		
		Для каждого Вариант из СписокКлючейПредопределенныхВариантов Цикл
			НовыеВариантыДляДобавления.Добавить(Вариант.Значение, Вариант.Представление);
		КонецЦикла;
		
		ТекстЗапроса = "ВЫБРАТЬ
		     |	ВариантыОтчетов.Ссылка,
		     |	ВариантыОтчетов.КлючОбъекта + ""\"" + ВариантыОтчетов.КлючВарианта КАК КлючОбъекта,
		     |	ВариантыОтчетов.ТипВариантаОтчета
		     |ИЗ
		     |	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		     |ГДЕ
		     |	(ВариантыОтчетов.ТипВариантаОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыВариантовОтчетов.Предопределенный)
		     |			ИЛИ ВариантыОтчетов.ТипВариантаОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыВариантовОтчетов.Отчет))";
			 
		Запрос = Новый Запрос(ТекстЗапроса);
	 	УстановитьПривилегированныйРежим(истина);
		Выборка = Запрос.Выполнить().Выбрать();
	 	УстановитьПривилегированныйРежим(ложь);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Предопределенный тогда
				ЭлементСписка = СписокКлючейПредопределенныхВариантов.НайтиПоЗначению(Выборка.КлючОбъекта);
			Иначе
				ЭлементСписка = СписокКлючейПредопределенныхВариантов.НайтиПоЗначению(Выборка.КлючОбъекта+"СсылкаНаОтчет");
			КонецЕсли;
			
			Если ЭлементСписка = Неопределено тогда
				ВариантыНеИспользуемые.Добавить(Выборка.Ссылка);
			Иначе
				ВариантыДляОбновления.Добавить(Выборка.Ссылка, ЭлементСписка.Представление);
				Если Выборка.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Предопределенный тогда
					ИсключаемыйВариант = НовыеВариантыДляДобавления.НайтиПоЗначению(Выборка.КлючОбъекта);
				Иначе
					ИсключаемыйВариант = НовыеВариантыДляДобавления.НайтиПоЗначению(Выборка.КлючОбъекта+"СсылкаНаОтчет");
				КонецЕсли;
				
				Если ИсключаемыйВариант <> Неопределено Тогда
					НовыеВариантыДляДобавления.Удалить(ИсключаемыйВариант);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// обновляем существующие варианты
		Для каждого Вариант из ВариантыДляОбновления Цикл
			
			ВариантОбъект = Вариант.Значение.Ссылка.Получитьобъект();
			
			ВариантОбъект.Наименование    = Вариант.Представление;
			ВариантОбъект.Описание        = ОписаниеВариантов[ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта];
			ВариантОбъект.ПометкаУдаления = ложь;
			
			// удалим ссылки на подсистемы
			МассивПредопределенныхПодсистем = ВариантОбъект.Подсистемы.НайтиСтроки(Новый Структура("Предопределенная", истина));
			Для каждого Подсистема из МассивПредопределенныхПодсистем Цикл
				ВариантОбъект.Подсистемы.Удалить(Подсистема);
			КонецЦикла;
			
			// добавим подсистемы отчета
			МассивПодсистем = СоответсвиеОтчетаПодсистемам.НайтиСтроки(Новый Структура("Отчет", ВариантОбъект.КлючОбъекта));
			
			Для каждого Подсистема из МассивПодсистем Цикл
				
				СтруктураПоиска = Новый Структура("Ключ, ПутьКПодсистеме", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта, Подсистема.ПутьКПодсистеме);
				НеИспользоватьПодсистемуОтчета = ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.НайтиСтроки(СтруктураПоиска);
				
				Если НеИспользоватьПодсистемуОтчета.Количество() = 0 тогда 
					СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
					СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
					СтрокаПодсистемы.Название   = Подсистема.НазваниеПодсистемы;
					СтрокаПодсистемы.Предопределенная = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// добавим подсистемы варианта	
			МассивПодсистем = ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.НайтиСтроки(Новый Структура("Ключ", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта));
		
			Для каждого Подсистема из МассивПодсистем Цикл
				
				ПодсистемаМетаДанные = Метаданные.НайтиПоПолномуИмени("Подсистема." + СтрЗаменить(Подсистема.ПутьКПодсистеме, "\", ".Подсистема."));
				НазваниеПодсистемы = "";
				Если ПодсистемаМетаДанные <> Неопределено тогда
					НазваниеПодсистемы = ПодсистемаМетаДанные.Представление();
				КонецЕсли;
				СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
				СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
				СтрокаПодсистемы.Название   = НазваниеПодсистемы;
				
				СтрокаПодсистемы.Предопределенная = Истина;
			КонецЦикла;
			
			ВариантОбъект.ПометкаУдаления = Ложь;

			Если СписокДопВариантов.НайтиПоЗначению(ВариантОбъект.КлючОбъекта) <> Неопределено тогда
				ВариантОбъект.ХранилищеЗначений = ЗначениеНастроекДопВариантов[ВариантОбъект.КлючОбъекта];
			КонецЕсли;
			
			ВариантОбъект.Записать();          
			
		КонецЦикла;
		
		// добавить новые варианты
		ПоискДубликатов = Новый Запрос;
		ПоискДубликатов.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	0
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.КлючОбъекта = &КлючОбъекта
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
		|	И ВариантыОтчетов.ТипВариантаОтчета = &ТипВариантаОтчета";
		
		//
		Для Каждого Вариант из НовыеВариантыДляДобавления Цикл
			
			Индекс       = СтрНайти(Вариант.Значение, "\");
			КлючОбъекта  =   Лев(Вариант.Значение, Индекс - 1);
			КлючВарианта =  Сред(Вариант.Значение, Индекс + 1);
			Если КлючВарианта = "СсылкаНаОтчет" Тогда
				ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Отчет;
				КлючВарианта = "";
			Иначе
				ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Предопределенный;
			КонецЕсли;
			
			ПоискДубликатов.УстановитьПараметр("КлючОбъекта", КлючОбъекта);
			ПоискДубликатов.УстановитьПараметр("КлючВарианта", КлючВарианта);
			ПоискДубликатов.УстановитьПараметр("ТипВариантаОтчета", ТипВариантаОтчета);
			
			Если НЕ ПоискДубликатов.Выполнить().Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ВариантОбъект              = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			
			ИмяОтчета   = КлючОбъекта;
			
			Если ИзмененныеОбъектыДанных <> Неопределено тогда
				ИзменИмяОтчета = ИзмененныеОбъектыДанных[ИмяОтчета];
				Если ИзменИмяОтчета <> Неопределено тогда
					ИмяОтчета = ИзменИмяОтчета;
				КонецЕсли;
			КонецЕсли;
			
			ИмяОтчета       = СтрЗаменить(ИмяОтчета, "Отчет.", "");
			ОтчетМетаданные = Метаданные.Отчеты.Найти(ИмяОтчета);
			Если ОтчетМетаданные <> Неопределено тогда
				ВариантОбъект.ПредставлениеОбъекта = ОтчетМетаданные.Синоним;
			КонецЕсли;
			
			ВариантОбъект.ТипВариантаОтчета = ТипВариантаОтчета;
			ВариантОбъект.КлючОбъекта       = КлючОбъекта;
			ВариантОбъект.КлючВарианта      = КлючВарианта;
			ВариантОбъект.Наименование      = Вариант.Представление;
			ВариантОбъект.Описание          = ОписаниеВариантов[Вариант.Значение];
			ВариантОбъект.БыстрыйДоступ     = Истина;
			
			МассивПодсистем = СоответсвиеОтчетаПодсистемам.НайтиСтроки(Новый Структура("Отчет", ВариантОбъект.КлючОбъекта));
			
			Для каждого Подсистема из МассивПодсистем Цикл
				
				СтруктураПоиска = Новый Структура("Ключ, ПутьКПодсистеме", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта, Подсистема.ПутьКПодсистеме);
				НеИспользоватьПодсистемуОтчета = ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.НайтиСтроки(СтруктураПоиска);
				
				Если НеИспользоватьПодсистемуОтчета.Количество() = 0 тогда 
					СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
					СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
					СтрокаПодсистемы.Название   = Подсистема.НазваниеПодсистемы;
					СтрокаПодсистемы.Предопределенная = Истина;
				КонецЕсли;
			КонецЦикла;
				
			// добавить подсистемы варианта	
			МассивПодсистем =  ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.НайтиСтроки(Новый Структура("Ключ", ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта));
		
			Для каждого Подсистема из МассивПодсистем Цикл
				ПодсистемаМетаДанные = Метаданные.НайтиПоПолномуИмени("Подсистема." + СтрЗаменить(Подсистема.ПутьКПодсистеме, "\", ".Подсистема."));
				НазваниеПодсистемы = "";
				Если ПодсистемаМетаДанные <> Неопределено тогда
					НазваниеПодсистемы = ПодсистемаМетаДанные.Представление();
				КонецЕсли;
				
				СтрокаПодсистемы            = ВариантОбъект.Подсистемы.Добавить(); 
				СтрокаПодсистемы.Подсистема = Подсистема.ПутьКПодсистеме;
				СтрокаПодсистемы.Название   = НазваниеПодсистемы;
				СтрокаПодсистемы.Предопределенная = Истина;
			КонецЦикла;
			
			Если СписокДопВариантов.НайтиПоЗначению(ВариантОбъект.КлючОбъекта) <> Неопределено тогда
				ВариантОбъект.ХранилищеЗначений = ЗначениеНастроекДопВариантов.Получить(ВариантОбъект.КлючОбъекта + "\" + ВариантОбъект.КлючВарианта);
			КонецЕсли;
			
			ВариантОбъект.Записать();
			
		КонецЦикла;
		
		// добавить новые варианты
		Для каждого Вариант из ВариантыНеИспользуемые Цикл
			ВариантОбъект = Вариант.Получитьобъект();
			ВариантОбъект.УстановитьПометкуУдаления(истина);
		КонецЦикла;
		
		// перенос вариантов отчетов
		Если ХранилищеВариантовОтчетов = ХранилищаНастроек.ХранилищеВариантовОтчетов Тогда
			ЗавершитьКонвертациюВариантовОтчетов();
		Иначе
			ПрямаяКонвертацияВариантовОтчетов();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение	
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Обновление вариантов отчетов'"), УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат истина;
КонецФункции

// Загружает варианты, предварительно сохраненные из системного хранилища вариантов в хранилище общих настроек, 
//   в хранилище подсистемы.
// Используется для загрузки вариантов отчетов при полном или частичном внедрении.
// При полном внедрении может вызваться из обработки "ПереносВариантовОтчетов".
//
// Параметры:
//   ТаблицаВариантов - (ТаблицаЗначений) Необязательный. Используется в системных целях.
// 
Процедура ЗавершитьКонвертациюВариантовОтчетов(ТаблицаВариантов = Неопределено) Экспорт
	
	Если ТаблицаВариантов = Неопределено Тогда
		ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВариантов.Сортировать("Отчет Возр, Вариант Возр");
	
	// Существующие варианты отчетов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВариантов.Отчет,
	|	ТаблицаВариантов.Вариант,
	|	ТаблицаВариантов.Автор
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	&ТаблицаВариантов КАК ТаблицаВариантов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВарианты.Отчет,
	|	втВарианты.Вариант,
	|	ВариантыОтчетов.Ссылка,
	|	ПользователиПоИмени.Ссылка КАК ПользовательПоИмени
	|ИЗ
	|	втВарианты КАК втВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиПоИмени
	|		ПО втВарианты.Автор = ПользователиПоИмени.Наименование
	|			И (ПользователиПоИмени.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО втВарианты.Отчет = ВариантыОтчетов.КлючОбъекта
	|			И втВарианты.Вариант = ВариантыОтчетов.КлючВарианта";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
	Запрос.Текст = ТекстЗапроса;
	
	ВариантыБД = Запрос.Выполнить().Выгрузить();
	
	// Авторы вариантов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", ТаблицаВариантов.ВыгрузитьКолонку("ИдентификаторАвтора"));
	Запрос.Текст = ТекстЗапроса;
	
	ПользователиПоИдентификатору = Запрос.Выполнить().Выгрузить();
	
	// Пользователь по умолчанию
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// (ТаблицаЗначений) Колонки: Отчет, ПутьКПодсистеме, НазваниеПодсистемы, Пояснение
	ПодсистемыОтчетов = ПолучитьСписокПодсистемОтчетов();
	
	// Загрузка вариантов в хранилище подсистемы
	НачатьТранзакцию();
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Найденные = ВариантыБД.НайтиСтроки(Новый Структура("Отчет, Вариант", СтрокаТаблицы.Отчет, СтрокаТаблицы.Вариант));
		ВариантБД = Найденные[0];
		
		// Если вариант уже загружен в справочник "Варианты отчетов" - не загружаем его.
		Если ЗначениеЗаполнено(ВариантБД.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// СправочникОбъект
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		
		// Настройки КД
		ВариантОбъект.ХранилищеЗначений = СтрокаТаблицы.Настройка;
		
		// Заполнение нового варианта
		ВариантОбъект.КлючОбъекта          = СтрокаТаблицы.Отчет;
		ВариантОбъект.КлючВарианта         = СтрокаТаблицы.Вариант;
		ВариантОбъект.ПредставлениеОбъекта = СтрокаТаблицы.ПредставлениеОтчета;
		ВариантОбъект.Наименование         = СтрокаТаблицы.ПредставлениеВарианта;
		
		// Тип варианта
		ОтчетМетаданные = Метаданные.Отчеты.Найти(СтрЗаменить(СтрокаТаблицы.Отчет, "Отчет.", ""));
		Если ОтчетМетаданные = Неопределено Тогда
			ВариантОбъект.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.ВнешнийОтчет;
		Иначе
			ВариантОбъект.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.Пользовательский;
		КонецЕсли;
	
		// Автор варианта
		ПользовательПоИД = ПользователиПоИдентификатору.Найти(СтрокаТаблицы.ИдентификаторАвтора, "Идентификатор");
		Если ПользовательПоИД <> Неопределено И ЗначениеЗаполнено(ПользовательПоИД.Пользователь) Тогда
			ВариантОбъект.Администратор    = ПользовательПоИД.Пользователь;
		ИначеЕсли ВариантБД <> Неопределено И ЗначениеЗаполнено(ВариантБД.ПользовательПоИмени) Тогда
			ВариантОбъект.Администратор    = ВариантБД.ПользовательПоИмени;
		Иначе
			ВариантОбъект.Записать();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Варианты отчетов'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ВариантыОтчетов,
				ВариантОбъект.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вариант ""%1"" отчета ""%2"": не найден автор ""%3""'"), 
					ВариантОбъект.Наименование,
					ВариантОбъект.ПредставлениеОбъекта,
					СтрокаТаблицы.Автор
				) 
			);
		КонецЕсли;
		
		// Быстрый доступ - только для автора
		ВариантОбъект.БыстрыйДоступ = Ложь;
		ВариантОбъект.ИсключенияБыстрогоДоступа.Добавить().Пользователь = ВариантОбъект.Администратор;
		
		// Подсистемы варианта
		ПодсистемыОтчета = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("Отчет", ВариантОбъект.КлючОбъекта));
		Для Каждого Подсистема Из ПодсистемыОтчета Цикл
			СтрокаПодсистемы               = ВариантОбъект.Подсистемы.Добавить(); 
			СтрокаПодсистемы.Подсистема    = Подсистема.ПутьКПодсистеме;
			СтрокаПодсистемы.Название      = Подсистема.НазваниеПодсистемы;
			СтрокаПодсистемы.Предопределенная = Истина;
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();

	// Очистка
	ХранилищеОбщихНастроек.Удалить("ПереносВариантовОтчетов", "ТаблицаВариантов", "");
КонецПроцедуры // ЗавершитьКонвертациюВариантовОтчетов()

// Загружает варианты из системного хранилища вариантов в хранилище подсистемы при частичном внедрении.
//
// Параметры:
//   ИспользоватьДопОтчеты - (Булево) Признак поиска вариантов отчетов подсистемы "Дополнительные отчеты и обработки"
//
Процедура ПрямаяКонвертацияВариантовОтчетов() Экспорт
	
	// Результат, который будет сохранен в хранилище
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000));
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("Отчет",     ТипСтрока);
	ТаблицаВариантов.Колонки.Добавить("Вариант",   ТипСтрока);
	ТаблицаВариантов.Колонки.Добавить("Автор",     ТипСтрока);
	ТаблицаВариантов.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ХранилищеЗначения"));
	ТаблицаВариантов.Колонки.Добавить("ПредставлениеОтчета",   ТипСтрока);
	ТаблицаВариантов.Колонки.Добавить("ПредставлениеВарианта", ТипСтрока);
	ТаблицаВариантов.Колонки.Добавить("ИдентификаторАвтора",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать();
	Пока ВыборкаХранилища.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ВыборкаХранилища.Пользователь);
		Если ПользовательИБ = Неопределено Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаХранилища.Пользователь, Истина);
			Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторПользователя = Пользователь.ИдентификаторПользователяИБ;
		Иначе
			ИдентификаторПользователя = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		
		ОтчетМД = Метаданные.Отчеты.Найти(СтрЗаменить(ВыборкаХранилища.КлючОбъекта, "Отчет.", ""));
		ПредставлениеОтчета = ?(ОтчетМД = Неопределено, ВыборкаХранилища.КлючОбъекта, ОтчетМД.Представление());
		
		СтрокаТаблицы = ТаблицаВариантов.Добавить();
		СтрокаТаблицы.Отчет     = ВыборкаХранилища.КлючОбъекта;
		СтрокаТаблицы.Вариант   = ВыборкаХранилища.КлючНастроек;
		СтрокаТаблицы.Автор     = ВыборкаХранилища.Пользователь;
		СтрокаТаблицы.Настройка = Новый ХранилищеЗначения(ВыборкаХранилища.Настройки, Новый СжатиеДанных(9));
		СтрокаТаблицы.ПредставлениеОтчета   = ПредставлениеОтчета;
		СтрокаТаблицы.ПредставлениеВарианта = ВыборкаХранилища.Представление;
		СтрокаТаблицы.ИдентификаторАвтора   = ИдентификаторПользователя;
	КонецЦикла;
	
	// Загрузка вариантов в хранилище подсистемы
	ЗавершитьКонвертациюВариантовОтчетов(ТаблицаВариантов);

КонецПроцедуры // ПрямаяКонвертацияВариантовОтчетов()

// Для внешних отчетов заполняет реквизит ТипВариантаОтчета значением
// Перечисления.ТипыВариантовОтчетов.ВнешнийОтчет
// 
Процедура УстановитьПризнакВариантаВнешнегоОтчета() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.КлючОбъекта
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяОтчета = СтрЗаменить(Выборка.КлючОбъекта, "Отчет.", "");
		МетаданныеОтчета = Метаданные.Отчеты.Найти(ИмяОтчета);
		ЭтоВнешнийОтчет = (МетаданныеОтчета = Неопределено);
		Если ЭтоВнешнийОтчет Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ТипВариантаОтчета = Перечисления.ТипыВариантовОтчетов.ВнешнийОтчет;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// РАБОТА С ДОПОЛНИТЕЛЬНЫМИ НАСТРОЙКАМИ

// Добавить вариант отчета в подсистему. Для использования в функции КомандныйИнтерфейс
// общего модуля ВариантыОтчетовПереопределяемый.
//
// Параметры:
//			ДопНастройки    - параметр настройки процедуры НастройкиОтчетов
//			Ключ            - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			ПутьКПодсистеме - путь к подсистеме, к которой вариант привязывается
//
// Пример кода:
//	
//	Функция КомандныйИнтерфейс() Экспорт
//		ДанныеОПодсистемахВариантов = ВариантыОтчетов.НоваяСтруктураКомандногоИнтерфейса();
//		ВариантыОтчетов.ДобавитьПодсистемуВариантаВДопНастройках(Настройки, "Отчет.ДинамикаИзмененийФайлов\СводнаяДиаграммаИзменения", "Администрирование");
//		Возврат ДанныеОПодсистемахВариантов;
//	КонецФункции
//
Процедура ДобавитьПодсистемуВариантаВДопНастройках(ДопНастройки, Ключ, ПутьКПодсистеме) Экспорт
	
	Если ДопНастройки = Неопределено или Ключ = "" или ПутьКПодсистеме = "" тогда
		Возврат;   
	КонецЕсли;
	
	СтрокаПодсистемы      = ДопНастройки.СоответствиеПодсистемИВариантов.Добавить();
	СтрокаПодсистемы.Ключ = Ключ;
	СтрокаПодсистемы.ПутьКПодсистеме = ПутьКПодсистеме;
	
Конецпроцедуры

// Удалить вариант отчета из подсистемы. Для использования в функции КомандныйИнтерфейс
// переопределяемого модуля.
//
// Параметры:
//	ДопНастройки    - параметр настройки процедуры НастройкиОтчетов
//	Ключ            - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//	ПутьКПодсистеме - путь к подсистеме, к которой вариант привязывается
//
// Пример кода:
//	ВариантыОтчетов.УдалитьПодсистемуВариантаВДопНастройках(ДанныеОПодсистемахВариантов, "Отчет.ДинамикаИзмененийФайлов\СводнаяДиаграммаИзменения", "Администрирование");
//
Процедура УдалитьПодсистемуВариантаВДопНастройках(ДопНастройки, Ключ, ПутьКПодсистеме) Экспорт
	
	Если ДопНастройки = Неопределено или Ключ = "" или ПутьКПодсистеме = "" тогда
		Возврат;   
	КонецЕсли;
	
	СтрокаНеИспПодсистем      = ДопНастройки.НеИспользоватьПодсистемыОтчета.Добавить();
	СтрокаНеИспПодсистем.Ключ = Ключ;
	СтрокаНеИспПодсистем.ПутьКПодсистеме = ПутьКПодсистеме;
	
КонецПроцедуры

// Добавить вариант отчета не на базе СКД. Для использования в процедуре НастройкиОтчета
// менеджера отчета.
//
// Параметры:
//			ДопНастройки      - параметр настройки процедуры НастройкиОтчетов
//			Ключ              - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			Представление     - представление варианта отчета
//			ЗначениеНастройки - путь к подсистеме, к которой вариант привязывается
//
// Пример кода:
//	
//	Процедура НастройкиОтчета(Настройки) Экспорт
//		ВариантыОтчетов.ДобавитьПредопределенныйВариантВДопНастройках(Настройки, "Отчет.ОСВ\ПОСчету50", "Кассовые операции", Новый Структура("Счет", 50);
//	КонецПроцедуры
//
Процедура ДобавитьПредопределенныйВариантВДопНастройках(ДопНастройки, Ключ, Представление, ЗначениеНастройки) Экспорт
	
	Если ДопНастройки = Неопределено или Ключ = "" или Представление = "" тогда
		Возврат;   
	КонецЕсли;
	
	ДопНастройки.ПредопределенныеВариантыБезСКД.Добавить(Ключ, Представление);
	ДопНастройки.ЗначенияНастроекОтчетовБезСКД.Вставить(Ключ, ЗначениеНастройки);
	
КонецПроцедуры

// Установить описание варианта отчета. Для использования в процедуре НастройкиОтчета
// менеджера отчета.
//
// Параметры:
//			ДопНастройки - параметр настройки процедуры НастройкиОтчетов
//			Ключ         - общий ключ варианта отчета "Отчет.Взаиморасчеты\Основной"
//			Описание     - описание варианта отчета
//
// Пример кода:
//	
//	Процедура НастройкиОтчета(Настройки) Экспорт
//		ВариантыОтчетов.УстановитьОписаниеВариантаВДопНастройках(Настройки, "Отчет.ОСВ\ПОСчету50", "Кассовые операции за текущий месяц");
//	КонецПроцедуры
//
Процедура УстановитьОписаниеВариантаВДопНастройках(ДопНастройки, Ключ, Описание) Экспорт
	
	ДопНастройки.ОписаниеВариантов.Вставить(Ключ, Описание);
	
КонецПроцедуры

// Возвращает структуру данных для переопределения командного интерфейса.
//
Функция НоваяСтруктураКомандногоИнтерфейса() Экспорт
		
	ДанныеОПодсистемахВариантов = Новый Структура("СоответствиеПодсистемИВариантов, НеИспользоватьПодсистемыОтчета");
	ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов = Новый ТаблицаЗначений;
	ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("Ключ");
	ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Колонки.Добавить("ПутьКПодсистеме");
	
	ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемыОтчета = Новый ТаблицаЗначений;
	ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемыОтчета.Колонки.Добавить("Ключ");
	ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемыОтчета.Колонки.Добавить("ПутьКПодсистеме");
	
	Возврат ДанныеОПодсистемахВариантов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ

// Возвращает список значений подсистем отчетов. 
// Для внутреннего использования.
//
Функция ПолучитьСписокПодсистемОтчетов() Экспорт
	
	СоответствиеПодсистемОтчетам = Новый ТаблицаЗначений;
	СоответствиеПодсистемОтчетам.Колонки.Добавить("Отчет");
	СоответствиеПодсистемОтчетам.Колонки.Добавить("ПутьКПодсистеме");
	СоответствиеПодсистемОтчетам.Колонки.Добавить("НазваниеПодсистемы");
	СоответствиеПодсистемОтчетам.Колонки.Добавить("Пояснение");
	
	Для каждого Подсистема из Метаданные.Подсистемы Цикл
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		Путь = Подсистема.Имя;
		ДобавитьОтчетыПодсистемы(Подсистема, СоответствиеПодсистемОтчетам, Путь);
	КонецЦикла;
	
	Возврат СоответствиеПодсистемОтчетам;
	
КонецФункции

// Возвращает список виртуальных подсистем.
// Для внутреннего использования.
//
Функция ПолучитьВиртуальныеПодсистемы(ПутьПодсистемы) Экспорт
	
	ПодсистемыВиртуальные = Новый СписокЗначений;
	
	ПутиИПодсистем = ПолучитьПутьВиртуальныхПодсистем();
	
	Для каждого ЗначениеПути из ПутиИПодсистем Цикл
		
		Если ЗначениеПути.Значение.ПутьПодсистемы = ПутьПодсистемы тогда
			ПодсистемыВиртуальные.Добавить(ЗначениеПути.Значение.ПутьПодсистемы+"\"+ ЗначениеПути.Значение.ИмяПодсистемы, ЗначениеПути.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодсистемыВиртуальные;
	
КонецФункции

// Возвращает список подсистем (разделов).
// Для внутреннего использования.
//
Функция ПолучитьСписокПодсистем(ПутиПодсистемы, ДеревоПодсистем) Экспорт
	
	СписокПодсистем =  Новый СписокЗначений;
	
	Для каждого Подсистема из Метаданные.Подсистемы Цикл
		
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПодсистеме = Подсистема.Имя;
		
		ПодсистемаПрисутствует = ложь;
		
		Для каждого ЭлементПодсистемы из ПутиПодсистемы Цикл
			ПутьПодсистемы = ЭлементПодсистемы.Значение;
			Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
				ПодсистемаПрисутствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодсистемаПрисутствует тогда
			СтрокаДереваПодсистем            = ДеревоПодсистем.Строки.Добавить();
			СтрокаДереваПодсистем.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистем.Название   = Подсистема.Синоним;
			
			ЕстьПравоПросмотра  = ПравоДоступа("Просмотр", Подсистема);
			Если НЕ ЕстьПравоПросмотра тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыФункциональнаяОпция = Новый Структура("");
			
			ДоступенПоФункциональнаяОпцияОпциям = ложь;
			СодержитсяВФункциональнаяОпция = ложь;
			Для каждого ФункциональнаяОпция из Метаданные.ФункциональныеОпции Цикл
				
				Если Не ФункциональнаяОпция.Состав.Содержит(Подсистема) тогда
					Продолжить;
				КонецЕсли;
				
				СодержитсяВФункциональнаяОпция = Истина;
				
				ЗначениеФункциональнаяОпция = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, ПараметрыФункциональнаяОпция);
				Если ТипЗнч(ЗначениеФункциональнаяОпция) = Тип("Булево") тогда
					Если ЗначениеФункциональнаяОпция тогда
						ДоступенПоФункциональнаяОпцияОпциям = истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СодержитсяВФункциональнаяОпция И НЕ ДоступенПоФункциональнаяОпцияОпциям тогда
				Продолжить;
			КонецЕсли;
			
			
			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение      = ПутьКПодсистеме;
			СтрокаПодсистемы.Представление = Подсистема.Синоним;
			ДобавитьДеревоПодсистем(СписокПодсистем, Подсистема, ПутьКПодсистеме, СтрокаДереваПодсистем);
		КонецЕсли;
		
	КонецЦикла;
	
	ВиртуальныеПодсистемы = ПолучитьВиртуальныеПодсистемы(Подсистема);
	
	Для каждого Подсистема из ВиртуальныеПодсистемы Цикл
		
		ПутьКПодсистеме = Подсистема.Значение;
		
		ПодсистемаПрисутствует = ложь;
		
		Для каждого ЭлементПодсистемы из ПутиПодсистемы Цикл
			ПутьПодсистемы = ЭлементПодсистемы.Значение;
			Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
				ПодсистемаПрисутствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодсистемаПрисутствует тогда
			
			СтрокаДереваПодсистем            = ДеревоПодсистем.Строки.Добавить();
			СтрокаДереваПодсистем.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистем.Название   = Подсистема.Представление;

			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение = Подсистема.Значение;
			СтрокаПодсистемы.Представление = Подсистема.Представление;
			ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, Подсистема.Значение, СтрокаДереваПодсистем);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПодсистем;
	
КонецФункции

// Заменяет запрещенные символы в именах элементов формы на их допустимые аналоги.
//
Функция ЗаменитьЗапрещенныеСимволы(Знач СтрокаДляЗамены) Экспорт
	
	СтрокаРезультат = СтрокаДляЗамены;
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ".", "_Точка_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ",", "_Зап_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "\", "_Слэш_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "-", "_Тирэ_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, " ", "_П_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "!", "_Воскл_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "@", "_Соб_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "№", "_Ном_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ";", "_ТЗап_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "%", "_Проц_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ":", "_ДвТ_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "?", "_Воп_");
   	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "*", "_Звезд_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "(", "_ОСк_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ")", "_ЗСк_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "=", "_Рав_");

	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "~", "_Вол_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "`", "_Ап_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "#", "_Реш_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "$", "_Дол_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "^", "_Степ_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "&", "_Анд_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "{", "_ОФС_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "{", "_ЗФС_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "[", "_ОКС_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "[", "_ЗКС_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, """", "_Кав_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "'", "_ОКав_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "|", "_Пал_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "\", "_ПСл_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "/", "_ОСл_");
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ">", "_Бол_");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "<", "_Мен_");
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Возвращает шаблон заполнения для доп. настроек отчета.
// Для внутреннего использования.
//
Функция ПолучитьСтруктуруДополнительныхНастроек() Экспорт
	
	ДополнительныеНастройки = Новый Структура("ПредопределенныеВариантыБезСКД,
								 |ЗначенияНастроекОтчетовБезСКД,
								 |ОписаниеВариантов");
	
	ДополнительныеНастройки.ПредопределенныеВариантыБезСКД = Новый СписокЗначений;
	ДополнительныеНастройки.ЗначенияНастроекОтчетовБезСКД = Новый Соответствие;
	
	ДополнительныеНастройки.ОписаниеВариантов = Новый Соответствие;

	Возврат ДополнительныеНастройки;
	
КонецФункции

Процедура ДобавитьОтчетыПодсистемы(Подсистема, СоответствиеПодсистемОтчетам, Знач Путь)

	Для каждого ОбъектМетаданных из Подсистема.Состав Цикл
		
		Если ОбъектМетаданных = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если Найти(ПолноеИмя, "Отчет.") <> 0 Тогда
			
			СтрокаДанных = СоответствиеПодсистемОтчетам.Добавить();
			СтрокаДанных.Отчет              = ПолноеИмя;
			СтрокаДанных.ПутьКПодсистеме    = Путь;
			СтрокаДанных.НазваниеПодсистемы = Подсистема.Синоним; 
			СтрокаДанных.Пояснение          = Подсистема.Пояснение; 
			
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Подсистема из Подсистема.Подсистемы Цикл
		Если Не Подсистема.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		ДобавитьОтчетыПодсистемы(Подсистема, СоответствиеПодсистемОтчетам, Путь + "\" + Подсистема.Имя);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПутьВиртуальныхПодсистем()
	
	СписокЗначений = Новый СписокЗначений;
	
	СписокВиртуальныхПодсистем = ВариантыОтчетовПереопределяемый.ОписаниеВиртуальныхПодсистем();
	
	Для каждого Подсистема из СписокВиртуальныхПодсистем Цикл
		
		НомерПозицииПоследнегоРазделителя = 0;
		
		ДлинаПути = СтрДлина(Подсистема.Значение);
		
		Для Сч = 1 по ДлинаПути Цикл
			
			Если КодСимвола(Подсистема.Значение, Сч) = КодСимвола("\") тогда
				
				НомерПозицииПоследнегоРазделителя = Сч;
				
			КонецЕсли;
		КонецЦикла;
		
		ПутьПодсистемы     = Лев(Подсистема.Значение, НомерПозицииПоследнегоРазделителя-1);
		ИмяПодсистемы      = Прав(Подсистема.Значение, ДлинаПути -НомерПозицииПоследнегоРазделителя);
		НазваниеПодсистемы = Подсистема.Представление;
		
		СписокЗначений.Добавить(Новый Структура("ПутьПодсистемы, ИмяПодсистемы", ПутьПодсистемы, ИмяПодсистемы), НазваниеПодсистемы);
		
	КонецЦикла;
	
	Возврат СписокЗначений;
КонецФункции

Процедура ДобавитьДеревоПодсистем(СписокПодсистем, Подсистема, Знач ПутьПодсистемы, СтрокаДереваПодсистем)
	
	Для каждого ПодсистемаПодчиненная из Подсистема.Подсистемы Цикл
		
		Если Не ПодсистемаПодчиненная.ВключатьВКомандныйИнтерфейс тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПравоПросмотра  = ПравоДоступа("Просмотр", ПодсистемаПодчиненная);
		Если НЕ ЕстьПравоПросмотра тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФункциональнаяОпция = Новый Структура("");
		
		ДоступенПоФункциональнаяОпцияОпциям = ложь;
		СодержитсяВФункциональнаяОпция = ложь;
		Для каждого ФункциональнаяОпция из Метаданные.ФункциональныеОпции Цикл
			
			Если Не ФункциональнаяОпция.Состав.Содержит(ПодсистемаПодчиненная) тогда
				Продолжить;
			КонецЕсли;
			
			СодержитсяВФункциональнаяОпция = Истина;
			
			ЗначениеФункциональнаяОпция = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, ПараметрыФункциональнаяОпция);
			Если ТипЗнч(ЗначениеФункциональнаяОпция) = Тип("Булево") тогда
				Если ЗначениеФункциональнаяОпция тогда
					ДоступенПоФункциональнаяОпцияОпциям = истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СодержитсяВФункциональнаяОпция И НЕ ДоступенПоФункциональнаяОпцияОпциям тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПодсистеме = ПутьПодсистемы + "\" + ПодсистемаПодчиненная.Имя;
		
		Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
			СтрокаДереваПодсистемПодчиненная            = СтрокаДереваПодсистем.Строки.Добавить();
			СтрокаДереваПодсистемПодчиненная.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистемПодчиненная.Название   = ПодсистемаПодчиненная.Синоним;
			
			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение = ПутьКПодсистеме;
			СтрокаПодсистемы.Представление = ПодсистемаПодчиненная.Синоним;
			ДобавитьДеревоПодсистем(СписокПодсистем, ПодсистемаПодчиненная, ПутьКПодсистеме, СтрокаДереваПодсистемПодчиненная);
		КонецЕсли;
	КонецЦикла;
	
	ВиртуальныеПодсистемы = ПолучитьВиртуальныеПодсистемы(ПутьПодсистемы);
	
	Для каждого ПодсистемаПодчиненная из ВиртуальныеПодсистемы Цикл
		
		ПутьКПодсистеме = ПодсистемаПодчиненная.Значение;
		
		Если Найти(ПутьКПодсистеме, ПутьПодсистемы) > 0 тогда
			СтрокаДереваПодсистемПодчиненная            = СтрокаДереваПодсистем.Строки.Добавить();
			СтрокаДереваПодсистемПодчиненная.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистемПодчиненная.Название   = ПодсистемаПодчиненная.Представление;
			
			СтрокаПодсистемы               = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение      = ПодсистемаПодчиненная.Значение;
			СтрокаПодсистемы.Представление = ПодсистемаПодчиненная.Представление;
			ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, ПодсистемаПодчиненная.Значение, СтрокаДереваПодсистемПодчиненная);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, Знач Подсистема, СтрокаДереваПодсистем)
	
	ВиртуальныеПодсистемы = ПолучитьВиртуальныеПодсистемы(Подсистема);
	
	Для каждого ПодсистемаПодчиненная из ВиртуальныеПодсистемы Цикл
		
		ПутьКПодсистеме = ПодсистемаПодчиненная.Значение;
		Если Найти(ПутьКПодсистеме, Подсистема) > 0 тогда
			СтрокаДереваПодсистемПодчиненная            = СтрокаДереваПодсистем.Строки.Добавить();
			СтрокаДереваПодсистемПодчиненная.Подсистема = ПутьКПодсистеме;
			СтрокаДереваПодсистемПодчиненная.Название   = Подсистема.Представление;
			
			СтрокаПодсистемы = СписокПодсистем.Добавить();
			СтрокаПодсистемы.Значение = ПодсистемаПодчиненная.Значение;
			СтрокаПодсистемы.Представление = ПодсистемаПодчиненная.Представление;
			ДобавитьДеревоВиртуальныхПодсистем(СписокПодсистем, ПодсистемаПодчиненная.Значение, СтрокаДереваПодсистемПодчиненная);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВДопНастройки(ИмяОтчета, ОписаниеВариантов, ДанныеОПодсистемахВариантов, СписокДопВариантов, ЗначениеНастроекДопВариантов)
	
	ДанныеДополнительныхНастроек = ПолучитьСтруктуруДополнительныхНастроек();
	ИмяОтчетаБезПрефикса = СтрЗаменить(ИмяОтчета, "Отчет.", "");
	ОтчетМенеджер = Отчеты[ИмяОтчетаБезПрефикса];
	
	НастройкиПолучены = Ложь;
	Попытка
		ОтчетМенеджер.НастройкиОтчета(ДанныеДополнительныхНастроек);
		НастройкиПолучены = Истина;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Варианты отчетов'"),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ВариантыОтчетов,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описания вариантов отчета %1 будут заполнены по умолчанию.'"),
				"'"+ ИмяОтчетаБезПрефикса +"'"
			) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
	Если НЕ НастройкиПолучены Тогда
		ОтчетОбъект = ОтчетМенеджер.Создать();
		Если ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
			ВариантыОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек;
			Для Каждого Вариант Из ВариантыОтчета Цикл
				УстановитьОписаниеВариантаВДопНастройках(
					ДанныеДополнительныхНастроек, 
					Вариант.Имя, 
					Вариант.Представление
				);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ОписаниеВарианта из ДанныеДополнительныхНастроек.ОписаниеВариантов Цикл
		ОписаниеВариантов.Вставить(ИмяОтчета + "\" + ОписаниеВарианта.Ключ, ОписаниеВарианта.Значение);
	КонецЦикла;
	
	Для каждого ВариантБезСКД из ДанныеДополнительныхНастроек.ПредопределенныеВариантыБезСКД Цикл
		СписокДопВариантов.Добавить(ИмяОтчета + "\" + ВариантБезСКД.Значение, ВариантБезСКД.Представление);
	КонецЦикла;
	
	Для каждого ЗначениеВариантаБезСКД из ДанныеДополнительныхНастроек.ЗначенияНастроекОтчетовБезСКД Цикл
		ЗначениеНастроекДопВариантов.Вставить(ИмяОтчета + "\" + ВариантБезСКД.Ключ, ВариантБезСКД.Значение);
	КонецЦикла;
	
	ДанныеДополнительныхНастроек = ВариантыОтчетовПереопределяемый.КомандныйИнтерфейс();
	Для каждого ДанныеОПодсистеме из ДанныеДополнительныхНастроек.СоответствиеПодсистемИВариантов Цикл
		СтрокаПодсистемы = ДанныеОПодсистемахВариантов.СоответствиеПодсистемИВариантов.Добавить();
		СтрокаПодсистемы.Ключ = ДанныеОПодсистеме.Ключ;
		СтрокаПодсистемы.ПутьКПодсистеме = ДанныеОПодсистеме.ПутьКПодсистеме;
	КонецЦикла;
	
	Для каждого ДанныеОПодсистеме из ДанныеДополнительныхНастроек.НеИспользоватьПодсистемыОтчета Цикл
		СтрокаПодсистемы = ДанныеОПодсистемахВариантов.НеИспользоватьПодсистемуОтчета.Добавить();
		СтрокаПодсистемы.Ключ = ДанныеОПодсистеме.Ключ;
		СтрокаПодсистемы.ПутьКПодсистеме = ДанныеОПодсистеме.ПутьКПодсистеме;
	КонецЦикла;
	
КонецПроцедуры

// Получает право изменения вариантов отчета
// 
// Параметры:
//   КлючОбъекта - (...)
//       |- (Неопределено) - Право проверяется для всех отчетов конфигурации
//       |- (Строка)       - Имя отчета с точкой
// 
// Возвращаемое значение: 
//   Истина - Есть право изменения вариантов
//   Ложь   - Нет права изменения вариантов
//
Функция ПравоИзмененияВариантов(КлючОбъекта = Неопределено, ЧерезИсключение = Ложь) Экспорт
	Если КлючОбъекта = Неопределено Тогда
		
		Для Каждого ОтчетМД Из Метаданные.Отчеты Цикл
			Если НЕ ПравоДоступа("Просмотр", ОтчетМД) Тогда
				Если ЧерезИсключение Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Недостаточно прав доступа к отчету %1'"),
						ОтчетМД.Представление()
					);
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		
		ОтчетМД = Метаданные.Отчеты.Найти(СтрЗаменить(КлючОбъекта, "Отчет.", ""));
		Если ОтчетМД = Неопределено Тогда
			Если ЧерезИсключение Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отчет %1 не найден в системе'"),
					КлючОбъекта
				);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НЕ ПравоДоступа("Использование", ОтчетМД) Тогда
			Если ЧерезИсключение Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недостаточно прав доступа к отчету %1'"),
					ОтчетМД.Представление()
				);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

