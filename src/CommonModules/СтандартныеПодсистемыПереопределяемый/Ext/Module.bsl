////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Переопределяемые процедуры и функции для интеграции между собой подсистем библиотеки БСП.
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

/////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Обработчики.Вставить("ОграничиватьДоступПоВиду*",               "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ВидыДоступа*",                            "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ДобавлятьРуководителямДоступПодчиненных", "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	
	// СтандартныеПодсистемы.Пользователи
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.Пользователи
		
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки.
//
// Здесь в алфавитном порядке размещаются только процедуры-обработчики обновления 
// библиотечных подсистем, которые используются в данной конфигурации. 
// Процедуры-обработчики обновления самой конфигурации следует размещать в функции 
// ОбработчикиОбновления общего модуля ОбновлениеИнформационнойБазыПереопределяемый.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
//
Функция ОбработчикиОбновленияСтандартныхПодсистем() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	
	
	СтандартныеПодсистемыСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
		
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	БизнесПроцессыИЗадачиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи

	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.ПолнотекстовыйПоиск
	ПолнотекстовыйПоискСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск
	
	
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	ЭлектроннаяПочта.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ФайловыеФункции
	ФайловыеФункцииСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РегламентныеЗаданияСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Свойства
		
	
	// СтандартныеПодсистемы.ФизическиеЛица
	ФизическиеЛица.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФизическиеЛица

	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ДанныеБизнесПроцессов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	
	
	// СтандартныеПодсистемы.Пользователи
	Массив.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Пользователи
	
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Массив.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Свойства
	
	
	
	// СтандартныеПодсистемы.ФизическиеЛица
	Массив.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	Возврат Массив;
	
КонецФункции

// Возвращает флаг доступности подсистемы ПолучениеФайловИзИнтернета.
//
// ВозвращаемоеЗначение - Булево - 
//  Истина - подсистема доступна, любое другое значение - подсистемв
//  не доступна
//
Процедура ДоступноПолучениеФайловИзИнтернета(ВозвращаемоеЗначение) Экспорт
	
	
	
КонецПроцедуры

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//   ВозвращаемоеЗначение - (выходной параметр)
//     Структура, со свойствами
//       Статус - Булево - ключ присутствует в структуре всегда, значения
//                         Истина - вызов функции успешно завершен
//                         Ложь   - вызов функции завершен неудачно
//       Путь   - Строка - путь к файлу на сервере, ключ используется только
//                         если статус Истина
//       СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Процедура СкачатьФайлНаСервере(Знач Адрес, Знач ПараметрыПолучения, ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	// СтандартныеПодсистемы.АнализЖурналаРегистрации
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.0.1",
		"Подсистема.СтандартныеПодсистемы.Подсистема.КонтрольЖурналаРегистрации",
		"Подсистема.СтандартныеПодсистемы.Подсистема.АнализЖурналаРегистрации",
		Библиотека);
	// Конец СтандартныеПодсистемы.АнализЖурналаРегистрации
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.0.1.2",
		"Роль.ДобавлениеИзменениеОбщихПоставляемыхДанных",
		"Роль.ДобавлениеИзменениеОбщейБазовойНСИ",
		Библиотека);
	
	
	
КонецПроцедуры

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
		
КонецПроцедуры

// Функция создает таблицу соответствия разделенных типов данных общим данным
//
// Возвращаемое значение:
// ТаблицаЗначений - соответствия типов данных
//
Функция ТаблицаСоответствияРазделенныхДанныхОбщим() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("ВидПоставляемыхДанных");
	ТаблицаЗначений.Колонки.Добавить("ТипОбщихДанных");
	ТаблицаЗначений.Колонки.Добавить("ТипРазделенныхДанных");
	ТаблицаЗначений.Колонки.Добавить("КопироватьВоВсеОбластиДанных");
		
	Возврат ТаблицаЗначений;
	
КонецФункции

// Блокирует текущую область, начиная транзакцию и накладывая исключительную блокировку
// на все разделяемые объекты метаданных области.
//
// Параметры:
// ПроверитьОтсутствиеДругихСеансов - Булево - проверить отсутствие других
// пользовательских сеансов со значением разделителя равным текущему.
// В случае обнаружения других сеансов будет выдано исключение.
//
Процедура ЗаблокироватьТекущуюОбластьДанных(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт
	
	
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Снимает блокировки с текущей области, фиксируя (или, в случае ошибки, откатывая) транзакцию.
//
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт
	
	
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
		
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.УдалитьЭлементыСправочникаСтраныМира();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Обмен данными РИБ

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
		
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.Пользователи
		
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	// При отправке данных главному обработчик не вызываем, 
	// т.к. ограничение миграции "снизу-вверх" в РИБ по умолчанию не предусмотрено.
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
			
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Разделение данных

// Устанавливает разделение сеанса.
//
// Параметры:
// Использование - Булево - Использование разделителя ОбластьДанных в сеансе
// ОбластьДанных - Число - Значение разделителя ОбластьДанных
//
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено) Экспорт
	
		
КонецПроцедуры

// Возвращает значение разделителя текущей области данных.
// В случае если значение не установлено выдается ошибка.
// 
// Возвращаемое значение: 
// Тип значения разделителя.
// Значение разделителя текущей области данных. 
// 
Функция ЗначениеРазделителяСеанса() Экспорт
	
	
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

// Возвращает флаг использования разделителя ОбластьДанных для текущего сеанса.
// 
// Возвращаемое значение: 
// Булево - Истина разделение используется, иначе нет.
// 
Функция ИспользованиеРазделителяСеанса() Экспорт
	
	
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Поставляемые данные

// Процедура копирует список элементов общего справочника в новую область данных
//
// Параметры:
// СписокКодовСправочника - массив - массив кодов справочника
// ТипИсточника           - тип - тип общего справочника,
//                                откуда будут скопированы элементы
//
Процедура СкопироватьЭлементыСправочникаПоставляемыхДанных(СписокКодовСправочника, ТипИсточника) Экспорт
	
КонецПроцедуры

// Считывает текущее состояние разделенного объекта и приводит форму
// в соответстие с ним
//
Процедура СчитатьФлагРучногоИзмененияПоставляемыхДанных(Знач Форма) Экспорт
	
КонецПроцедуры

// Записывает состояние разделенного объекта
//
Процедура ЗаписатьФлагРучногоИзменениеПоставляемыхДанных(Знач Форма) Экспорт
	
	
	
КонецПроцедуры

// Копирует данные общего объекта в разделенный и изменяет
// состояние разделенного объекта
//
Процедура ВосстановитьЭлементИзОбщихДанных(Знач Форма) Экспорт
	
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Версионирование программных интерфейсов

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

/////////////////////////////////////////////////////////////////////////////////
// Обновление версии ИБ

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// Подробнее см. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ, 
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений) Экспорт
	
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

// СтандартныеПодсистемы.Пользователи

/////////////////////////////////////////////////////////////////////////////////
// Пользователи

// Обработчики записи администратора.

// Переопределяет текст вопроса перед записью первого администратора.
//  Вызывается из обработчика ПередЗаписью формы пользователя.
//  Вызов выполняется если установлен ЗапретРедактированияРолей() и
// количество пользователей информационной базы равно нулю.
// 
Процедура ТекстВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса) Экспорт
	
		
КонецПроцедуры

// Доопределяет действия при записи пользователя, когда он записывается
// совместно с пользователем ИБ, у которого есть роль ПолныеПрава.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи (изменение объекта запрещено).
//
Процедура ПриЗаписиАдминистратора(Пользователь) Экспорт
	
		
КонецПроцедуры

// Переопределяет текст комментария при авторизации пользователя ИБ,
// созданного в конфигураторе с административными правами.
//  Вызывается из Пользователи.АвторизоватьТекущегоПользователя().
//  Комментарий записывается в журнал регистрации.
// 
// Параметры:
//  Комментарий  - Строка - начальное значение задано.
//
Процедура ПослеЗаписиАдминистратораПриАвторизации(Комментарий) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Комментарий = НСтр("ru = 'Обнаружено, что пользователь информационной базы
	                         |с ролью ""Полные права"" был создан в Конфигураторе:
	                         |
	                         |- пользователь не найден в справочнике Пользователи,
	                         |- пользователь зарегистрирован в справочнике Пользователи,
	                         |- пользователь добавлен в группу доступа Администраторы.
	                         |
	                         |Пользователей информационной базы следует создавать в режиме 1С:Предприятия.'");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Переопределяет действие перед авторизацией пользователя,
// выполняемой при начале работы системы (в процессе получения
// параметров работы клиента при запуске).
//
// Можно заполнить состав пользователей и выполнить перезапуск.
// 
// Требуется, например, при настройке автономного рабочего места.
// 
// Параметры:
//  Перезапустить - Булево, начальное значение Ложь. Если указать
//                  Истина, тогда работа системы будет прекращена.
//
//  ДополнительныеПараметрыКомаднойСтроки - Строка, которая может
//                  быть заполнена для передачи во второй параметр
//                  метода ПрекратитьРаботуСистемы.
//
Процедура ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(
		Перезапустить, ДополнительныеПараметрыКомаднойСтроки) Экспорт
	
	
	
КонецПроцедуры

// Для поддержки работы в модели сервиса.

// Обработчик, вызываемый перед записью пользователя.
//
// Параметры:
// ПользовательОбъект - СправочникОбъект.Пользователи - записываемый пользователь
//
Процедура ПередЗаписьюПользователя(ПользовательОбъект) Экспорт
	
	
	
КонецПроцедуры

// Обработчик, вызываемый при записи пользователя.
//
// Параметры:
// ПользовательОбъект         - СправочникОбъект.Пользователи - записываемый пользователь
// ОписаниеПользователя       - Объект XDTO: {"http://www.1c.ru/SaaS/1.0/XMLSchema/ManageApplication"}UserInfo -
//                              описание пользователя менеджера сервиса
// ПользовательСуществует     - Булево - пользователь существовал до начала транзакции записи
// ДоступРазрешен             - Булево - после записи пользователя, доступ к ИБ должен быть разрешен
// СоздатьПользователяСервиса - Булево - требуется создать нового пользователя сервиса
//
Процедура ПриЗаписиПользователя(ПользовательОбъект,
                                ОписаниеПользователя,
                                ПользовательСуществует,
                                ДоступРазрешен,
                                СоздатьПользователяСервиса) Экспорт
	
	
КонецПроцедуры

// Обработчик, вызываемый при получении формы справочника Пользователи
//
// Параметры:
//  См. параметры платформенного обработчика ОбработкаПолученияФормы
//
Процедура ОбработкаПолученияФормыПользователя(ВидФормы,
                                              Параметры,
                                              ВыбраннаяФорма,
                                              ДополнительнаяИнформация,
                                              СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Проверяет содержится ли пользователь ИБ с заданным идентификатором
// в списке неразделенных пользователей.
//
// Параметры:
// ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор
// пользователя ИБ принадлежность которого к неразделенным пользователям
// требуется проверить.
//
Функция ЭтоНеразделенныйПользовательИБ(Знач ИдентификаторПользователяИБ) Экспорт
		
	Возврат Ложь;
	
КонецФункции

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
Процедура ЗарегистрироватьНеразделенногоПользователя() Экспорт
	
	
	
КонецПроцедуры

// Возвращает флаг доступности действий изменения пользователей.
//
// Возвращаемое значение:
// Булево - Истина, если изменение пользователей доступно, иначе Ложь.
//
Функция ДоступноИзменениеПользователей() Экспорт
		
	Возврат Истина;
	
КонецФункции

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных


// СтандартныеПодсистемы.ФайловыеФункции

/////////////////////////////////////////////////////////////////////////////////
// Файловые функции

// Возвращает структуру, содержащую различные персональные настройки
// по работе с файлами
Процедура ПолучитьПерсональныеНастройкиРаботыСФайлами(Настройки) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьПерсональныеНастройкиФайловыхФункций(Настройки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа"
//
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа"
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.УдалитьРегистрациюИзменений(ПланОбменаСсылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(ДанныеСтроки) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ДанныеСтроки.Объект) Тогда
		
		Возврат РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса для извлечения текста
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом
//
Процедура ПолучитьКоличествоВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ЧислоВерсий = ЧислоВерсий + РаботаСФайламиВызовСервера.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

Процедура ПодсчитатьРазмерФайловНаТоме(СсылкаТома, РазмерФайлов) Экспорт
	
	РазмерФайлов = 0;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РазмерФайлов = РазмерФайлов + РаботаСФайламиВызовСервера.ПодсчитатьРазмерФайловНаТоме(СсылкаТома);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Получает полный путь к файлу на диске
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		Возврат РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	
КонецФункции

// Записывает извлеченный текст
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлОбъект) Тогда
		РаботаСФайламиВызовСервера.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище)
Функция ПолучитьНавигационнуюСсылкуФайла(ФайлСсылка, УникальныйИдентификатор) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		Возврат РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
КонецФункции

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
//
Процедура ПолучитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
			
КонецПроцедуры

// Читает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
// Возвращаемое значение:
//   Строка кодировки
Процедура ПолучитьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(ВерсияСсылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// СтандартныеПодсистемы.БизнесПроцессыИЗадачи

/////////////////////////////////////////////////////////////////////////////////
// Бизнес-процессы и задачи

// Возвращает адрес электронной почты пользователя Получатель для рассылки уведомлений о задачах.
//
// Параметры
//  Получатель  – СправочникСсылка.Пользователи
//  Адрес       - Строка – возвращаемый адрес электронной почты.
//
//
Процедура ПолучитьАдресЭлектроннойПочты(Знач Получатель, Адрес) Экспорт

	// СтандартныеПодсистемы.КонтактнаяИнформация
	Адрес = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(
		Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры 

// Возвращает Истина, если используется подсистема ВнешниеЗадачиИБизнесПроцессы
Функция ИспользоватьВнешниеЗадачиИБизнесПроцессы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает содержание переданного объекта для передачи в другую информационную систему.
//
// Параметры
//  ПредметЗадачи - объект, представление которого надо сформировать
//  Представление - Строка - содержание в виде HTML или MXL документа
//
Процедура ПолучитьПредставлениеПредметаВнешнейЗадачи(ПредметЗадачи, Представление) Экспорт
	
		
КонецПроцедуры

// Возвращает массив объектов типа ОписаниеПередаваемогоФайла или Неопределено.
//
// Параметры
//  ПредметЗадачи - объект, список файлов которого надо вернуть
//  СписокФайлов - Массив - список файлов предмета
//
Процедура ПолучитьСписокФайлов(ПредметЗадачи, СписокФайлов) Экспорт
	
		
КонецПроцедуры

// Возвращает Истина, если задача является внешней. 
//
// Параметры
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ЭтоВнешняяЗадача(ЗадачаСсылка) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Помечает задачу-источник бизнес-процесса БизнесПроцесс как выполненную.
//
// Параметры
//  БизнесПроцесс - БизнесПроцессОбъект.Задание
//
Процедура ВыполнитьЗадачуИсточник(БизнесПроцесс) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

/////////////////////////////////////////////////////////////////////////////////
// Очередь заданий

// Заполняет список имен неразделенных регламентных заданий, которые
// должны выполняться в разделенном режиме.
//
// Параметры:
// СписокРазделенныхРегламентныхЗаданий - Массив - Массив с именами неразделенных 
//                                        регламентных заданий, которые будут 
//                                        выполняться механизмом подсистемы "Регламентные задания"
//                                        в областях данных.
//
Процедура ЗаполнитьСписокРазделенныхРегламентныхЗаданий(СписокРазделенныхРегламентныхЗаданий) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗаполнениеДанныхДляОграниченияДоступа");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗапускДополнительныхОбработок");
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ФайловыеФункции
	СписокРазделенныхРегламентныхЗаданий.Добавить("ИзвлечениеТекста");
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	СписокРазделенныхРегламентныхЗаданий.Добавить("МониторингЗадач");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УведомлениеИсполнителейОНовыхЗадачах");
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	СписокРазделенныхРегламентныхЗаданий.Добавить("ОбновлениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПерестроениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УстановкаПериодаРассчитанныхИтогов");
	// Конец СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения 
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Взаимодействия
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПолучениеИОтправкаЭлектронныхПисем");
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Процедура формирует таблицу регламентных заданий
// с признаком использования
//
// Параметры:
// ТаблицаИспользования - ТаблицаЗначений - таблица, которую необходимо 
// заполнить регламентными заданиями и признаком использования
//
Процедура ЗаполнитьТаблицуИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
	
	// СтандартныеПодсистемы.Валюты
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКурсовВалют";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ОбменДанными
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ВыполнениеОбменаДанными";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.Банки
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКлассификатораБанковРФССайтаРБК";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Банки
	
КонецПроцедуры

// Формирует список методов разрешенных к вызову через механизм очереди заданий
//
// Параметры:
//  РазрешенныеМетоды - Массив - имена методов, разрешенных к вызову через
//    механизм очереди заданий
//
Процедура ПолучитьРазрешенныеМетодыОчередиЗаданий(Знач РазрешенныеМетоды) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьОбменДанными");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбновлениеИнформационнойБазыВМоделиСервиса.ВыполнитьОбновлениеТекущейОбластиДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованию");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ОчиститьОбластьДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РазрешенныеМетоды.Добавить("ПоставляемыеДанные.ОбновитьПоставляемыеДанные");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	РазрешенныеМетоды.Добавить("УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	РазрешенныеМетоды.Добавить("РезервноеКопированиеОбластейДанных.ВыгрузитьОбластьВХранилищеМС");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РазрешенныеМетоды.Добавить("ОбработчикКаналовСообщенийПоставляемыхДанных.ЗагрузитьДанные");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	РазрешенныеМетоды.Добавить("КурсыВалютВМоделиСервиса.КопироватьКурсыВалюты");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса

КонецПроцедуры

// Переопределяет массив реквизитов объекта, относительно которых разрешается устанавливать время напоминания.
// Например, можно скрыть те реквизиты с датами, которые являются служебными или не имеют смысла для 
// установки напоминаний: дата документа или задачи и прочие.
// 
// Параметры
//  Источник	 - Любая ссылка - Ссылка на объект, для которого формируется массив реквизитов с датами
//  МассивРеквизитов - Массив - Массив имён реквизитов (из метаданных), содержащих даты
//
Процедура ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания(Источник, МассивРеквизитов) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить("СрокИсполнения"); 
		МассивРеквизитов.Добавить("ДатаНачала"); 
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
		
	// СтандартныеПодсистемы.ЗаметкиПользователя
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Заметки") Тогда
		МассивРеквизитов.Очистить();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗаметкиПользователя
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи


// СтандартныеПодсистемы.ВариантыОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов

// Заменяет тип и ссылку внешнего отчета для дополнительных отчетов, подключенных
//   к хранилищу подсистемы.
//
// Параметры:
//   Результат (Структура) см. ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени()
//
Процедура ЗаменитьТипИСсылкуЕслиОтчетДополнительный(Результат) Экспорт
	
		
КонецПроцедуры // ЗаменитьТипИСсылкуЕслиОтчетДополнительный

// Дополняет массив ссылкам дополнительных отчетов, доступных текущему пользователю.
//
// Параметры:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
Процедура ДобавитьДополнительныеОтчетыДоступныеТекущемуПользователю(Результат) Экспорт
	
КонецПроцедуры // ДополнитьОтчетыТекущегоПользователя

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтотОбъект (УправляемаяФорма)
//   Остальные параметры передаются из параметров обработчика "как есть",
//       см. события для "УправляемаяФорма" в справке.
//
Процедура ФормаОтчетаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Экспорт
		
КонецПроцедуры

// Обновляет переименовывает роли в данных конфигурации.
//
Процедура ОбновитьПереименованныеРоли(ТаблицаПереименований) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ЗавершениеРаботыПользователей

/////////////////////////////////////////////////////////////////////////////////
// Завершение работы пользователей

// Вызывается при отключении сеанса на стороне сервера 1С:Предприятия.
//
// Параметры
//  НомерСеанса - Число - номер сеанса для отключения.
//  Результат - Булево – результат отключения сеанса.
//  СообщениеОбОшибке - Строка - в этом параметре возвращается текст сообщения об ошибке в случае неудачи.
//  СтандартнаяОбработка - Булево - вернуть Ложь, если необходимо запретить стандартную обработку отключения сеанса.
//
Процедура ПриОтключенииСеанса(НомерСеанса, Результат, СообщениеОбОшибке, СтандартнаяОбработка) Экспорт
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.ФайловыеФункции

Процедура УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Флаг) Экспорт
	
КонецПроцедуры