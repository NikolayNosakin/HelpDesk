
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция ВсеРоли() возвращает таблицу значений имен всех ролей конфигурации.
//
// Параметры:
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//      Имя           - Строка
//      Синоним       - Строка
//      Идентификатор - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//
Функция ВсеРоли() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя",           Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	Для каждого Роль Из Метаданные.Роли Цикл
		Строка = Таблица.Добавить();
		Строка.Имя           = Роль.Имя;
		Строка.Синоним       = ?(ЗначениеЗаполнено(Роль.Синоним), Роль.Синоним, Роль.Имя);
		Строка.Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Роль);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Функция ДеревоРолей возвращает дерево
// ролей с/без подсистем
//  Если роль не принадлежит ни одной подсистеме
// она добавляется "в корень"
// 
// Параметры:
//  ПоПодсистемам - Булево, если ложь, все роли добавляются в "корень"
// 
// Возвращаемое значение:
//  ДеревоЗначений
//    ЭтоРоль    - Булево
//    Имя        - Строка - имя роли или подсистемы
//    Синоним    - Строка - синоним роли или подсистемы
//    Роль       - СправочникСсылка.ИдентификаторыОбъектовМетаданных,
//                 для подсистемы - пустая ссылка
//
Функция ДеревоРолей(ПоПодсистемам = Истина) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ЭтоРоль",       Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Имя",           Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Синоним",       Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Роль",    Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	Если ПоПодсистемам Тогда
		ЗаполнитьПодсистемыИРоли(Дерево.Строки);
	КонецЕсли;
	
	// Добавление ненайденных ролей
	Для каждого Роль Из Метаданные.Роли Цикл
		Если Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, Роль.Имя), Истина).Количество() = 0 Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.ЭтоРоль = Истина;
			СтрокаДерева.Имя     = Роль.Имя;
			СтрокаДерева.Синоним = ?(ЗначениеЗаполнено(Роль.Синоним), Роль.Синоним, Роль.Имя);
			СтрокаДерева.Роль    = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Роль);
		КонецЕсли;
	КонецЦикла;
	
	Дерево.Строки.Сортировать("ЭтоРоль Убыв, Синоним Возр", Истина);
	
	Возврат Дерево;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры модуля

Процедура ЗаполнитьПодсистемыИРоли(КоллекцияСтрокДерева, Подсистемы = Неопределено)
	
	Если Подсистемы = Неопределено Тогда
		Подсистемы = Метаданные.Подсистемы;
	КонецЕсли;
	
	Для каждого Подсистема Из Подсистемы Цикл
		
		ОписаниеПодсистемы = КоллекцияСтрокДерева.Добавить();
		ОписаниеПодсистемы.Имя           = Подсистема.Имя;
		ОписаниеПодсистемы.Синоним       = ?(ЗначениеЗаполнено(Подсистема.Синоним), Подсистема.Синоним, Подсистема.Имя);
		
		ЗаполнитьПодсистемыИРоли(ОписаниеПодсистемы.Строки, Подсистема.Подсистемы);
		
		Для каждого Роль Из Метаданные.Роли Цикл
			Если Подсистема.Состав.Содержит(Роль) Тогда
				ОписаниеРоли = ОписаниеПодсистемы.Строки.Добавить();
				ОписаниеРоли.ЭтоРоль = Истина;
				ОписаниеРоли.Имя     = Роль.Имя;
				ОписаниеРоли.Синоним = ?(ЗначениеЗаполнено(Роль.Синоним), Роль.Синоним, Роль.Имя);
				ОписаниеРоли.Роль    = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Роль);
			КонецЕсли;
		КонецЦикла;
		
		Если ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль", Истина), Истина).Количество() = 0 Тогда
			КоллекцияСтрокДерева.Удалить(ОписаниеПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дерево - ветви - структура предприятия, листья - пользователи
Функция ПолучитьПользователейВПодразделениях() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникСтруктураПредприятия.Ссылка КАК ГруппаСсылка,
		|	СправочникСтруктураПредприятия.ПометкаУдаления КАК ГруппаПометкаУдаления,
		|	СправочникСтруктураПредприятия.Предопределенный КАК ГруппаПредопределенный,
		|	СправочникСтруктураПредприятия.Родитель КАК ГруппаРодитель,
		|	СправочникСтруктураПредприятия.Наименование КАК ГруппаНаименование,
		|	Пользователи.Ссылка КАК ПользователиСсылка,
		|	Пользователи.ПометкаУдаления КАК ПользователиПометкаУдаления,
		|	Пользователи.Предопределенный КАК ПользователиПредопределенный,
		|	Пользователи.Наименование КАК ПользователиНаименование
		|ИЗ
		|	Справочник.ГруппыПользователей КАК СправочникСтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ИСТИНА В
		|				(ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|				ГДЕ
		|					СведенияОПользователях.Пользователь = Пользователи.Ссылка
		|					И СведенияОПользователях.Подразделение = СправочникСтруктураПредприятия.Ссылка))
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаСсылка ИЕРАРХИЯ,
		|	ПользователиНаименование";
	
	ВыборкаДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ВыборкаДерево;

КонецФункции	

// Возвращает дерево - ветви - группы пользователей, листья - пользователи
Функция ПолучитьПользователейВГруппах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникГруппыПользователей.Ссылка КАК ГруппаСсылка,
		|	СправочникГруппыПользователей.ПометкаУдаления КАК ГруппаПометкаУдаления,
		|	СправочникГруппыПользователей.Предопределенный КАК ГруппаПредопределенный,
		|	СправочникГруппыПользователей.Родитель КАК ГруппаРодитель,
		|	СправочникГруппыПользователей.Наименование КАК ГруппаНаименование,
		|	Пользователи.Ссылка КАК ПользователиСсылка,
		|	Пользователи.ПометкаУдаления КАК ПользователиПометкаУдаления,
		|	Пользователи.Предопределенный КАК ПользователиПредопределенный,
		|	Пользователи.Наименование КАК ПользователиНаименование
		|ИЗ
		|	Справочник.ГруппыПользователей КАК СправочникГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ИСТИНА В
		|				(ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|				ГДЕ
		|					СоставыГруппПользователей.Пользователь = Пользователи.Ссылка
		|					И СоставыГруппПользователей.ГруппаПользователей = СправочникГруппыПользователей.Ссылка))
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаСсылка ИЕРАРХИЯ,
		|	ПользователиНаименование";
		
	ВыборкаДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ВыборкаДерево;

КонецФункции	

// Возвращает таблицу - все пользователи
Функция ПолучитьПользователейСписком() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	Пользователи.ПометкаУдаления,
		|	Пользователи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	ВыборкаТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыборкаТаблица;

КонецФункции	