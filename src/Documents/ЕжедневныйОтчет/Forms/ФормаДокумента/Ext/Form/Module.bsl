
//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.СпособУказанияВремени = ЗначениеПеречисленияДлительность Тогда
		
		Элементы.НачалоДня.ТолькоПросмотр = Ложь;
		Элементы.ОкончаниеДня.ТолькоПросмотр = Ложь;
		
		Элементы.НачалоДня.АвтоОтметкаНезаполненного = Истина;
		Элементы.ОкончаниеДня.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.Начало.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
		Элементы.ДлительностьСтр.Видимость = Истина;
		
	ИначеЕсли Объект.СпособУказанияВремени = ЗначениеПеречисленияВремяНачала Тогда
		
		Элементы.НачалоДня.ТолькоПросмотр = Истина;
		Элементы.ОкончаниеДня.ТолькоПросмотр = Ложь;
		
		Элементы.НачалоДня.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ОкончаниеДня.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.Начало.Видимость = Истина;
		Элементы.Окончание.Видимость = Истина;
		Элементы.ДлительностьСтр.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьПродолжительностьДня()
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПродолжительностьДня = "";
		
	ИначеЕсли Объект.НачалоДня > Объект.ОкончаниеДня Тогда 
		ПродолжительностьДня = "";
		
	Иначе	
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(Объект.ОкончаниеДня - Объект.НачалоДня);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПодвал()
	
	// вывод строки Всего за день
	ДлительностьРаботСек = 0;
	Для Каждого Строка Из Работы Цикл
		ДлительностьРаботСек = ДлительностьРаботСек + Строка.Длительность;
	КонецЦикла;
	ДлительностьРабот = НСтр("ru = 'Всего за день: '") + УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек, "0");
	
	// вывод строки Превышено \ Осталось
	ПродолжительностьДняСек = Объект.ОкончаниеДня - Объект.НачалоДня;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		СообщениеОшибки = "";
		
	ИначеЕсли ДлительностьРаботСек > ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(превышено на %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек - ПродолжительностьДняСек));
		
	ИначеЕсли ДлительностьРаботСек < ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(осталось %1)'"),
			УчетВремениКлиентСервер.ЧисловСтроку(ПродолжительностьДняСек - ДлительностьРаботСек));
		
	Иначе
		СообщениеОшибки = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
    Если Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Заголовок = НСтр("ru = 'Ежедневный отчет (создание)'");
	Иначе
		ЭтотОбъект.Заголовок = НСтр("ru = 'Ежедневный отчет за '") + Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Элементы.НачалоДня.Заголовок = ТРег(Формат(Объект.Дата, "ДФ=дддд"));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительностьСтрок()
	
	// заполнение поля длительность
	Если (Объект.СпособУказанияВремени = ЗначениеПеречисленияВремяНачала) И (Работы.Количество() > 0) Тогда
		Работы.Сортировать("Начало Возр");

		Для Каждого Строка Из Работы Цикл
			Если Строка.Окончание > Строка.Начало Тогда 
				Строка.Длительность = Строка.Окончание - Строка.Начало;
			Иначе
				Строка.Длительность = 0;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьРаботыВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Работы.Выгрузить(,"Работа"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	Для Каждого Строка Из Работы Цикл
		НоваяСтрока = СписокСохраняемыхПолей.Добавить();
		НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
		НоваяСтрока.ЗначениеРеквизита = Строка.ВидРабот;
	КонецЦикла;
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

&НаСервере
Функция ЭлементыДляЗаполнения()
	
	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");
	
	НоваяСтрока = СписокСохраняемыхПолей.Добавить();
	НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
	
	Возврат СписокСохраняемыхПолей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачалоИОкончениеДня()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда 
		Возврат;
	КонецЕсли;	
	
	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Объект.Пользователь);
	СтруктураВозврата = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(Объект.Дата, ГрафикРаботы);
	
	Если ЗначениеЗаполнено(СтруктураВозврата.НачалоДня) Тогда 
		Объект.НачалоДня = СтруктураВозврата.НачалоДня;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураВозврата.ОкончаниеДня) Тогда 
		Объект.ОкончаниеДня = СтруктураВозврата.ОкончаниеДня;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииДаты()
	
	Если НачалоДня(Объект.Дата) = Объект.Дата Тогда 
		Объект.Дата = Объект.Дата + 1;
	КонецЕсли;
	СформироватьЗаголовокФормы();
	ЗаполнитьНачалоИОкончениеДня();
	
	ЗаполнитьРаботыНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРаботыНаСервере(ДатаОтчета = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеТрудозатраты.Подразделение,
	|	ФактическиеТрудозатраты.Пользователь,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления,
	|	ФактическиеТрудозатраты.Начало,
	|	ФактическиеТрудозатраты.Окончание,
	|	ФактическиеТрудозатраты.Длительность,
	|	ФактическиеТрудозатраты.ЕжедневныйОтчет,
	|	ФактическиеТрудозатраты.ОписаниеРаботы,
	|	ФактическиеТрудозатраты.РольПользователя,
	|	ФактическиеТрудозатраты.ПричинаПеревыполнения,
	|	ФактическиеТрудозатраты.МесяцНачисления
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|	И ФактическиеТрудозатраты.Пользователь = &Пользователь";
	
	Если ДатаОтчета <> Неопределено Тогда 
		Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	Иначе
		Запрос.УстановитьПараметр("ДатаОтчета", Объект.Дата);
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		
		НоваяСтрока.РольНаПроекте = Строка.РольПользователя;
		НоваяСтрока.ПричинаПревышения = Строка.ПричинаПеревыполнения;
		НоваяСтрока.МесяцНачисления = Строка.МесяцНачисления;
		Если ДатаОтчета <> Неопределено Тогда 
			НоваяСтрока.ДатаДобавления = '00010101';
		Иначе	
			НоваяСтрока.ДатаДобавления = Строка.ДатаДобавления;
		КонецЕсли;	
		
		Если ДатаОтчета <> Неопределено И ТипЗнч(Строка.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда 
			НоваяСтрока.Источник = Неопределено;
		Иначе	
			НоваяСтрока.Источник = Строка.Источник;
		КонецЕсли;	
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = Строка.Окончание;
			НоваяСтрока.Длительность = Строка.Длительность;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;
		НоваяСтрока.СтараяДлительность = Строка.Длительность;
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;	
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеПеречисленияДлительность = Перечисления.СпособыУказанияВремени.Длительность;
    ЗначениеПеречисленияВремяНачала  = Перечисления.СпособыУказанияВремени.ВремяНачала;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = ТекущаяДата();
		
		Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда 
			Объект.Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;	
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
		
		Если Не ЗначениеЗаполнено(Объект.СпособУказанияВремени) Тогда 
			Объект.СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
		КонецЕсли;
		Объект.Автор = Пользователи.ТекущийПользователь();
		
		ЗаполнитьНачалоИОкончениеДня();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		ЗаполнитьРаботыНаСервере(Параметры.ЗначениеКопирования.Дата);
	Иначе	
		ЗаполнитьРаботыНаСервере();
	КонецЕсли;	
	
	ОсновнойВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
	ОсновнойПроект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	// установка видимости полей
	УстановитьВидимость();
	
	// формирование заголовка формы
	СформироватьЗаголовокФормы();
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаМиниАнкета");
	
	Если ЭтотОбъект.Свойства_ИспользоватьСвойства Тогда
		Если ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда 
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		КонецЕсли;
	КонецЕсли;	
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтотОбъект, ЭлементыДляЗаполнения(), ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	РассчитатьПродолжительностьДня(); 	// обновление реквизита продолжительность
	ОбновитьПодвал();					// вывод итогов в подвал
	Оповестить("ОбновитьСписокПоследних");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если (ИсточникВыбора.ИмяФормы = "Документ.ЕжедневныйОтчет.Форма.ФормаПодбораРабот") 
	   И (ТипЗнч(РезультатВыбора) = Тип("Структура")) Тогда
		
		Строка = Работы.Добавить();
		Строка.Работа 	= РезультатВыбора.Работа; 
		Строка.ВидРабот = РезультатВыбора.ВидРабот;
		Строка.Проект = РезультатВыбора.Проект;
		Строка.ПроектнаяЗадача = РезультатВыбора.ПроектнаяЗадача;
		Строка.Источник = РезультатВыбора.Источник;
		Строка.РольНаПроекте = РезультатВыбора.РольНаПроекте;
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
		Строка.ПричинаПревышения =  РезультатВыбора.ПричинаПревышения;
		
		Если Объект.СпособУказанияВремени = ЗначениеПеречисленияДлительность Тогда 
		
		ИначеЕсли Объект.СпособУказанияВремени = ЗначениеПеречисленияВремяНачала Тогда 
			// заполняем начало работы текущим временем
			ТекущаяДата   = ТекущаяДата();
			Строка.Начало = ТекущаяДата - Секунда(ТекущаяДата);
			
			РассчитатьДлительностьСтрок();
		КонецЕсли;
		ОбновитьПодвал();

		ЭтотОбъект.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоПодразделениеПользователя" И Параметр = Объект.Пользователь Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОчиститьСообщения();

	// заполнение длительности на основе строкового поля
	Если Объект.СпособУказанияВремени = ЗначениеПеречисленияДлительность Тогда
		Для Каждого Строка Из Работы Цикл
			Строка.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
		КонецЦикла;
	КонецЕсли;
	ОбновитьПодвал();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Работы", Работы.Выгрузить());
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтотОбъект, ЭлементыДляСохранения(), ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СформироватьЗаголовокФормы();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
// 

&НаКлиенте
Процедура НачалоДняПриИзменении(Элемент)

	#Если ВебКлиент Тогда
    	Объект.НачалоДня = Объект.НачалоДня - Секунда(Объект.НачалоДня);
	#КонецЕсли

	Если Объект.НачалоДня > Объект.ОкончаниеДня И ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("НачалоДняПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Указанное время начала дня больше времени окончания!'"));
        Возврат;
	КонецЕсли;
	НачалоДняПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НачалоДняПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	НачалоДняПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НачалоДняПриИзмененииФрагмент()
	
	РассчитатьПродолжительностьДня();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзменении(Элемент)

	#Если ВебКлиент Тогда
    	Объект.ОкончаниеДня = Объект.ОкончаниеДня - Секунда(Объект.ОкончаниеДня);
	#КонецЕсли
	
	Если Объект.ОкончаниеДня < Объект.НачалоДня И ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОкончаниеДняПриИзмененииЗавершение1", ЭтотОбъект), НСтр("ru = 'Указанное время окончания дня меньше времени начала'"));
        Возврат;	
	КонецЕсли;
	
	ОкончаниеДняПриИзмененииФрагмент1();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзмененииЗавершение1(ДополнительныеПараметры) Экспорт
	
	ОкончаниеДняПриИзмененииФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзмененииФрагмент1()
	
	Если (Объект.СпособУказанияВремени = ЗначениеПеречисленияВремяНачала) И (Работы.Количество() > 0) И ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		Если Объект.ОкончаниеДня < Работы[Работы.Количество()-1].Начало Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОкончаниеДняПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Указанное время окончания дня меньше времени начала одной из работ!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОкончаниеДняПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	Объект.ОкончаниеДня = '00010101';
	
	ОкончаниеДняПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзмененииФрагмент()
	
	РассчитатьДлительностьСтрок();
	РассчитатьПродолжительностьДня();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура Подобрать()
	
	АдресВременногоХранилища = ПоместитьРаботыВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Пользователь", Объект.Пользователь);
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);

	ОткрытьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаПодбораРабот", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.Начало = ТекущиеДанные.Начало - Секунда(ТекущиеДанные.Начало);
	
	Если ТекущиеДанные.Начало > ТекущиеДанные.Окончание И ЗначениеЗаполнено(ТекущиеДанные.Окончание) Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("НачалоПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Время начала работы больше, чем время окончания'"));
        Возврат;
	КонецЕсли;

	НачалоПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	НачалоПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзмененииФрагмент()
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
    ТекущиеДанные.Окончание = ТекущиеДанные.Окончание - Секунда(ТекущиеДанные.Окончание);

	Если ТекущиеДанные.Окончание < ТекущиеДанные.Начало И ЗначениеЗаполнено(ТекущиеДанные.Окончание) Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОкончаниеПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Время окончания работы меньше, чем время начала'"));
        Возврат;
	КонецЕсли;
	
	ОкончаниеПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ОкончаниеПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзмененииФрагмент()
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры


&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 	
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;    	
		Если Не Копирование Тогда 
			ТекущиеДанные.ВидРабот = ОсновнойВидРабот;
			ТекущиеДанные.Проект = ОсновнойПроект;
			ТекущиеДанные.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ТекущиеДанные.Проект, 
				ТекущиеДанные.ПроектнаяЗадача);
		КонецЕсли;
		
		
		Если Объект.СпособУказанияВремени = ЗначениеПеречисленияВремяНачала Тогда 
			Строка = Работы.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
			Индекс = Работы.Индекс(Строка);
			Если Индекс > 0 Тогда 
				ТекущиеДанные.Начало = Работы[Индекс-1].Окончание;
			Иначе
				ТекущиеДанные.Начало = Объект.НачалоДня;
			КонецЕсли;	
				
			РассчитатьДлительностьСтрок();
		КонецЕсли;
		
		ОбновитьПодвал();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
    РассчитатьДлительностьСтрок();
	ОбновитьПодвал();
    ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	//АбисСофт-Кострицын Олег-Старт  14 марта 2014 г.
	ОчиститьТабличнуюЧастьРаботы();
	//АбисСофт-Кострицын Олег-финиш  14 марта 2014 г.
	
	ПриИзмененииДаты();

	//АбисСофт-Кострицын Олег-Старт  14 марта 2014 г.
	РассчитатьПродолжительностьДня(); 	// обновление реквизита продолжительность
	ОбновитьПодвал();					// вывод итогов в подвал
	//АбисСофт-Кострицын Олег-финиш  14 марта 2014 г.
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	Если Записать() Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДлительностьСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если Не УчетВремениКлиентСервер.ПроверитьФормат(ТекущиеДанные.ДлительностьСтр) Тогда
		ТекущиеДанные.ДлительностьСтр = "";
	КонецЕсли;
	ТекущиеДанные.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(ТекущиеДанные.ДлительностьСтр);
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Пользователь);
	ЗаполнитьНачалоИОкончениеДня();
	ЗаполнитьРаботыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Пользователь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Работы Цикл
		ИндексСтроки = Работы.Индекс(Строка);
		
		Если Не ЗначениеЗаполнено(Строка.Работа) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Содержание работ"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Работа",,Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ВидРабот) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Вид работ"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ВидРабот",,Отказ);
		КонецЕсли;
		
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
			Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
			Если Не ЗначениеЗаполнено(Длительность) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Время"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ДлительностьСтр",,Отказ);
			КонецЕсли;	
		Иначе
			Если Не ЗначениеЗаполнено(Строка.Начало) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Начало работ"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Начало",,Отказ);
			КонецЕсли;	
				
			Если Не ЗначениеЗаполнено(Строка.Окончание) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Окончание работ"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Окончание",,Отказ);
			КонецЕсли;	
				
			Если Строка.Начало > Строка.Окончание Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Время начала работ больше, чем время окончания работ в строке %1 списка ""Работы"".'"),
					ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].Начало",,Отказ);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		
		Для Инд1 = 0 По Работы.Количество()-2 Цикл
			Строка1 = Работы[Инд1];
			
			Для Инд2 = Инд1+1 По Работы.Количество()-1 Цикл
				Строка2 = Работы[Инд2];
				
				Если (Строка2.Начало >= Строка1.Начало И Строка2.Начало < Строка1.Окончание)
					Или (Строка2.Окончание > Строка1.Начало И Строка2.Окончание <= Строка1.Окончание) Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Найдены пересекающиеся интервалы времени в строках %1 и %2 списка ""Работы"".'"),
						Инд1+1,
						Инд2+1);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
						"Работы",,Отказ);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
		
	КонецЕсли;		
			
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		
		Для каждого Строка Из Работы Цикл
			ИндексСтроки = Работы.Индекс(Строка);
			ТекстСообщения = "";
			
			Если Не ЗначениеЗаполнено(Строка.ПроектЗадача) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ПричинаПревышения) Тогда

				РезультатПроверки = РаботаСЗаявками.ПроверитьПревышениеНормыТрудозатрат(Строка.Проект,
				Строка.ПроектнаяЗадача,
				Строка.Источник,
				Строка.РольНаПроекте,
				ТекстСообщения,Строка.Длительность-Строка.СтараяДлительность);  
				Если Не РезультатПроверки Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].ПричинаПревышения",, 
					Отказ);
				КонецЕсли;	
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Строка.РольНаПроекте) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Роль на проекте"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
				"Работы["+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") +"].РольНаПроекте",,Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки = РаботаСПроектами.ПроверитьЗаписьОФактическихТрудозатратах(
				Строка.Проект,
				Строка.ПроектнаяЗадача,
				Строка.Источник,
				Строка.РольНаПроекте,//Объект.Пользователь,
				ТекстСообщения);
			Если Не РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					"Работы[" + ИндексСтроки + "].ПроектЗадача",, 
					Отказ);	
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
		
КонецПроцедуры


&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ТекущиеДанные.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, 
			ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда 
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Проект = Неопределено;
	ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
			ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ТекущиеДанные.ПроектЗадача = РаботасПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ВыбранноеЗначение.Проект, 
				ВыбранноеЗначение.ПроектнаяЗадача,
				ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РольНаПроектеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ДанныеВыбора = РаботаСЗаявками.СформироватьДанныеВыбораИсполнителя(ТекущиеДанные.Проект,ТекущиеДанные.ПроектнаяЗадача,Истина,Ложь);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокВыбора = СписокВыбораВремениДня();
		
		ВыбранноеЗначение = Неопределено;

		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоНачалоВыбораИзСпискаЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), СписокВыбора, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	
	ВыбранноеЗначение = ВыбранныйЭлемент;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекСтрока.Начало = ВыбранноеЗначение.Значение;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокВыбора = СписокВыбораВремениДня();
		
		ВыбранноеЗначение = Неопределено;

		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОкончаниеНачалоВыбораИзСпискаЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), СписокВыбора, Элемент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	
	ВыбранноеЗначение = ВыбранныйЭлемент;
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекСтрока.Окончание = ВыбранноеЗначение.Значение;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораВремениДня()
	
	СписокВыбора = Новый СписокЗначений;
	
	ВремяНачала = 8*3600;
	ВремяОкончания = 22*3600;
	ДатаНачала = Дата(1,1,1)+ ВремяНачала;
	ДатаОкончания = Дата(1,1,1)+ ВремяОкончания;
	Интервал = 30*60;
	
	Пока ДатаНачала <= ДатаОкончания Цикл
		СписокВыбора.Добавить(ДатаНачала,Формат(ДатаНачала,"ДФ=ЧЧ:мм"));
		ДатаНачала = ДатаНачала + Интервал; 
	КонецЦикла;	
	Возврат СписокВыбора;
	
КонецФункции

//АбисСофт-Кострицын Олег-Старт  14 марта 2014 г.
&НаКлиенте
Процедура ОчиститьТабличнуюЧастьРаботы()
	ТекстВопроса = "Очистить табличную часть?";
	Если Работы.Количество() <> 0 Тогда
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Работы.Очистить();
		КонецЕсли;
	КонецЕсли;			
КонецПроцедуры
//АбисСофт-Кострицын Олег-финиш  14 марта 2014 г.
