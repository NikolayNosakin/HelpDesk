Перем СменаОтвественного;
Перем ЭтоНовыйОбъект;

Процедура ЗаписатьтекстЗаявки(ОбъектФормы,ТекущийОбъект,Отказ);
	Если Не Отказ Тогда
		ТекстHTML = ТекущийОбъект.ОписаниеЗаявкиHTML;
		
		Для Каждого Стр Из ОбъектФормы.ТаблицаВложений Цикл
			ТекстHTML = СтрЗаменить(ТекстHTML,?(ЗначениеЗаполнено(Стр.ИмяЛокальногоФайла),Стр.ИмяЛокальногоФайла,Стр.Адрес),Стр.Ключ);
		КонецЦикла;
		ТекущийОбъект.ОписаниеЗаявкиHTML = ТекстHTML;
		
		//Запишем текст
		ФД_ОписаниеЗаявки = Новый ФорматированныйДокумент;
		ФД_ОписаниеЗаявки.УстановитьHTML(ТекстHTML,Новый Структура());
		ОписаниеЗаявки = СокрЛП(ФД_ОписаниеЗаявки.ПолучитьТекст());

		//Добавим описание из дополнений и решений		
		//Для Каждого Стр Из ТекущийОбъект.ТекстыДополнений Цикл
		//	Пользователь = Стр.Пользователь;
		//	ДатаСоздания = Стр.ДатаСоздания;
		//	ТекстHTML = Стр.ОписаниеДополненияHTML;
		//	ТипДополнения = Стр.ТипДополнения;
		//	Получатель = Стр.Получатель;

		//	Если ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.Дополнение Тогда
		//		СтрТипДополнения = "Дополнение от "+Пользователь;
		//	ИначеЕсли ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.Передача Тогда
		//		СтрТипДополнения = "Заявка передана пользователю "+Получатель+" от "+Пользователь;
		//	Иначе
		//		СтрТипДополнения = "";
		//	КонецЕсли;	
		//	ОписаниеЗаявки = ОписаниеЗаявки+Символы.ПС+СтрТипДополнения+Символы.ПС+Стр.ОписаниеДополнения;
		//КонецЦикла;	
		ТекущийОбъект.ОписаниеЗаявки = ОписаниеЗаявки;
	КонецЕслИ;	
КонецПроцедуры

Процедура СохранитьОбъектыHTML(ТекстHTML,ТаблВложений,Ссылка) Экспорт
	НаборЗаписей = РегистрыСведений.ОбъектыHTMLСтраниц.СоздатьНаборЗаписей();
	ТекОтбор = НаборЗаписей.Отбор.Владелец;
	ТекОтбор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	ТаблЗаписей = НаборЗаписей.Выгрузить();
	ТаблЗаписей.Очистить();
	Для Каждого Стр Из ТаблВложений Цикл
		Если Найти(ТекстHTML,Стр.Ключ) > 0 Тогда
			НоваяСтрока = ТаблЗаписей.Добавить();
			НоваяСтрока.Идентификатор = Стр.Ключ;
			НоваяСтрока.Владелец = Ссылка;
			НоваяСтрока.Вложение = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Стр.Адрес));
		КонецЕсли;
	КонецЦикла;
	Наборзаписей.Загрузить(ТаблЗаписей);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СохранитьОбъектыВложенийHTML(ТекстHTML,ТаблВложений) Экспорт
	Для Каждого Стр Из ТаблВложений Цикл
		Если Не ЭтоАдресВременногоХранилища(Стр.Адрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Найти(ТекстHTML,Стр.Ключ) > 0 Тогда
			МенеджерЗаписи = РегистрыСведений.ОбъектыHTMLСтраниц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Идентификатор = Стр.Ключ;
			МенеджерЗаписи.Владелец = Ссылка; 
			МенеджерЗаписи.Прочитать();
			
			Если Не МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Идентификатор = Стр.Ключ;
				МенеджерЗаписи.Владелец = Ссылка;
				МенеджерЗаписи.Вложение = ПолучитьИзВременногоХранилища(Стр.Адрес);
				МенеджерЗаписи.Записать();
				УдалитьИзВременногоХранилища(Стр.Адрес);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура МодульОбъектаПередЗаписьюНаСервере(ОбъектФормы, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаписатьтекстЗаявки(ОбъектФормы,ТекущийОбъект,Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Заявка") Тогда
		Организация = ДанныеЗаполнения.Организация;
		Постановщик = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Постановщик),ДанныеЗаполнения.Постановщик,Пользователи.ТекущийПользователь());		
		Контрагент = ДанныеЗаполнения.Контрагент;
		Проект = ДанныеЗаполнения.Проект;
		ПроектнаяЗадача = ДанныеЗаполнения.ПроектнаяЗадача;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		Организация = ДанныеЗаполнения.Владелец.Организация;
		Контрагент = ДанныеЗаполнения.Владелец.Заказчик;
        Проект = ДанныеЗаполнения.Владелец;
		ПроектнаяЗадача = ДанныеЗаполнения.Ссылка;

		СписокВыбора = Новый СписокЗначений();
		СписокВыбора.ЗагрузитьЗначения(ДанныеЗаполнения.Исполнители.ВыгрузитьКолонку("Исполнитель"));
		
		Постановщик = Пользователи.ТекущийПользователь();
		Если СписокВыбора.Количество() > 1 Тогда
			ТекущийИсполнитель = СписокВыбора.ВыбратьЭлемент("Выберите исполнителя задачи...");
		ИначеЕсли СписокВыбора.Количество() = 1 Тогда
			ТекущийИсполнитель = СписокВыбора.Получить(0);
		Иначе
			ТекущийИсполнитель = Пользователи.ТекущийПользователь();
		КонецЕсли;	
		УстановитьТекстЗаявки(ДанныеЗаполнения.Описание);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Проекты") Тогда
		Организация = ДанныеЗаполнения.Организация;
		Контрагент = ДанныеЗаполнения.Заказчик;
        Проект = ДанныеЗаполнения.Ссылка;

		СписокВыбора = Новый СписокЗначений();
		СписокВыбора.ЗагрузитьЗначения(ДанныеЗаполнения.Исполнители.ВыгрузитьКолонку("Исполнитель"));
		
		Постановщик = Пользователи.ТекущийПользователь();
		УстановитьТекстЗаявки(ДанныеЗаполнения.Описание);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ТекстПисьма = ДанныеЗаполнения.ТекстПисьмаHTMLХранилище.Получить();
		
		Если ТекстПисьма = Неопределено Тогда
			ТекстПисьма = ДанныеЗаполнения.ТекстПисьмаПростойТекстХранилище.Получить();
			Если ТекстПисьма <> Неопределено Тогда
				ТекстПисьма = "<p>"+ТекстПисьма+"</p>";
			Иначе
				ТекстПисьма = "";
			КонецЕсли;	
		КонецЕсли;
		
		ТаблицаВложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ДанныеЗаполнения.Ссылка, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Истина); // ВключатьПомеченныеНаУдаление
		
		//Обработаем текст письма если он пришел от outlok 2003 и выше
		ТекстПисьма = РаботаСЗаявкамиИПочтой.ВыделитьТекстПисьмаOutlook(ТекстПисьма);

		СтруктураТекстов = ПолучитьСтруктуруТекстовСВложениями(ТекстПисьма,ТаблицаВложения);
		ЭтотОбъект.ОписаниеЗаявки = СтруктураТекстов.ОписаниеЗаявки;
		ЭтотОбъект.ОписаниеЗаявкиHTML = СтруктураТекстов.ОписаниеЗаявкиHTML;

		ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
		ЭтотОбъект.Тема = ДанныеЗаполнения.Тема;
		
		ЭтотОбъект.Контрагент		= РаботаСЗаявкамиИПочтой.НайтиКонтрагентаПоАдресуОтправителя(ДанныеЗаполнения.ОтправительАдрес);
		ЭтотОбъект.Дата				= ДанныеЗаполнения.Дата;
		ЭтотОбъект.Приоритет		= Перечисления.ПриоритетыЗаявки.Обычный;
		ЭтотОбъект.Статус 			= Справочники.СостоянияЗаявок.Зарегистрирована;
		ЭтотОбъект.Постановщик		= РаботаСЗаявкамиИПочтой.НайтиСоздатьПользователяПоАдресуОтправителя(ДанныеЗаполнения.ОтправительАдрес);
				
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ТекущийИсполнитель) Тогда
			ЭтотОбъект.ТекущийИсполнитель = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	
		Если Константы.ВестиУчетПоПроектам.Получить() = Истина Тогда
			ЭтотОбъект.Проект = РаботаСЗаявками.ПолучитьПроектПоКонтрагенту(ЭтотОбъект.Контрагент);
			ЭтотОбъект.ПроектнаяЗадача = РаботаСЗаявками.ПолучитьПроектнуюЗадачуПоПроекту(ЭтотОбъект.Проект);
		КонецЕсли;
		
		Записать();
		
		Для Каждого Стр Из ДанныеЗаполнения.ПолучателиКопий Цикл
			Если нрег(Стр.Адрес) = нрег(ДанныеЗаполнения.УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если нрег(Стр.Адрес) = нрег(ДанныеЗаполнения.ОтправительАдрес) Тогда
				Продолжить;
			КонецЕсли;
			
			Получатель = РаботаСЗаявкамиИПочтой.НайтиСоздатьПользователяПоАдресуОтправителя(Стр.Адрес);
			
			Если ЗначениеЗаполнено(Получатель) Тогда
				МенеджерЗаписи = РегистрыСведений.ПодписчикиЗаявок.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Заявка = Ссылка;
				МенеджерЗаписи.Пользователь = Получатель;
				МенеджерЗаписи.Записать();
			КонецЕсли;	
		КонецЦикла;	

		Для Каждого Стр Из ДанныеЗаполнения.ПолучателиПисьма Цикл
			Если нрег(Стр.Адрес) = нрег(ДанныеЗаполнения.УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если нрег(Стр.Адрес) = нрег(ДанныеЗаполнения.ОтправительАдрес) Тогда
				Продолжить;
			КонецЕсли;
			
			Получатель = РаботаСЗаявкамиИПочтой.НайтиСоздатьПользователяПоАдресуОтправителя(Стр.Адрес);
			
			Если ЗначениеЗаполнено(Получатель) Тогда
				МенеджерЗаписи = РегистрыСведений.ПодписчикиЗаявок.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Заявка = Ссылка;
				МенеджерЗаписи.Пользователь = Получатель;
				МенеджерЗаписи.Записать();
			КонецЕсли;	
		КонецЦикла;	
		КопироватьФайлыПисьмаВЗаявку(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ТекстПисьма = ДанныеЗаполнения.ТекстХранилище.Получить();
		Если ТекстПисьма = Неопределено Тогда
			ТекстПисьма = ДанныеЗаполнения.ТекстПисьмаПростойТекстХранилище.Получить();
			Если ТекстПисьма <> Неопределено Тогда
				ТекстПисьма = "<p>"+ТекстПисьма+"</p>";
			Иначе
				ТекстПисьма = "";
			КонецЕсли;	
		КонецЕсли;

		ТаблицаВложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ДанныеЗаполнения.Ссылка, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Истина); // ВключатьПомеченныеНаУдаление

		СтруктураТекстов = ПолучитьСтруктуруТекстовСВложениями(ТекстПисьма,ТаблицаВложения);
		
		ЭтотОбъект.ОписаниеЗаявки = СтруктураТекстов.ОписаниеЗаявки;
		ЭтотОбъект.ОписаниеЗаявкиHTML = СтруктураТекстов.ОписаниеЗаявкиHTML;
		
		ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
		ЭтотОбъект.Тема = ДанныеЗаполнения.Тема;
	ИначеЕсли  ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  И ДанныеЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда	//Заполнение из календаря
	    ЭтотОбъект.КалендарьСотрудника = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Календарь;
		ЭтотОбъект.ДатаНачалаПлан = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Начало;
		ЭтотОбъект.ДатаОкончанияПлан = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Окончание;
		ЭтотОбъект.Тема = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Наименование;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьТекстЗаявки(Текст)
	ФД = Новый  ФорматированныйДокумент();
	ФД.Добавить(Текст,ТипЭлементаФорматированногоДокумента.Текст);
	ТекстHTML = "";
	СтруктураВложений = Новый Структура();
	
	ФД.ПолучитьHTML(ТекстHTML,СтруктураВложений);
		
	ЭтотОбъект.ОписаниеЗаявкиHTML = ТекстHTML;
	ЭтотОбъект.ОписаниеЗаявки = СокрЛП(ФД.ПолучитьТекст());
КонецПроцедуры

Функция ПолучитьСтруктуруТекстовСВложениями(ТекстHTML,ТаблицаВложений) Экспорт
	ФД = Новый  ФорматированныйДокумент();
	СоответствиеВложений = Новый Соответствие();
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	
	СтруктураВозврата = новый Структура("ОписаниеЗаявкиHTML,ОписаниеЗаявки");
	Для Каждого Стр Из ТаблицаВложений Цикл
		Если СтрНайти(ТекстHTML,Стр.ИДФайлаЭлектронногоПисьма)= 0 ИЛИ НЕ ЗначениеЗаполнено(Стр.ИДФайлаЭлектронногоПисьма)  Тогда
			Продолжить;
		КонецЕсли;	
		
		Вложение = Новый ХранилищеЗначения(РаботаСФайлами.ПолучитьДвоичныеДанныеФайла(Стр.Ссылка));
		
		СоответствиеВложений.Вставить(Стр.ИДФайлаЭлектронногоПисьма,Вложение);
	КонецЦикла;
	
	Для Каждого Эл Из СоответствиеВложений Цикл		
		Если Эл.Ключ = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Вложение = Эл.Значение;		
		ИдКартинки = Новый УникальныйИдентификатор(); 
		
		НоваяСтрока = ТаблицаВложенийОбъекта.Добавить();
	  	НоваяСтрока.Ключ = Строка(ИдКартинки);
		НоваяСтрока.Адрес = ПоместитьВоВременноеХранилище(Вложение,Новый УникальныйИдентификатор());
		
		//Если у нас прописано через cid
		ТекстHTML = СтрЗаменить(ТекстHTML,"cid:"+Эл.Ключ,Строка(ИдКартинки));
		//Если прописано через img src
		ТекстHTML = СтрЗаменить(ТекстHTML,"src='"+Эл.Ключ,"src='"+Строка(ИдКартинки));
		ТекстHTML = СтрЗаменить(ТекстHTML,"src="""+Эл.Ключ,"src="""+Строка(ИдКартинки));
	КонецЦикла;
		
	ФД.УстановитьHTML(ТекстHTML,Новый Структура());
	
	СтруктураВозврата.Вставить("ОписаниеЗаявки",СокрЛП(ФД.ПолучитьТекст()));
	СтруктураВозврата.Вставить("ОписаниеЗаявкиHTML",ТекстHTML);

	Возврат СтруктураВозврата;
КонецФункции

Процедура КопироватьФайлыПисьмаВЗаявку(Письмо) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ИдентификаторыПочтовыхВложений.Идентификатор, """") КАК ИДФайлаЭлектронногоПисьма
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПочтовыхВложений КАК ИдентификаторыПочтовыхВложений
		|		ПО (ИдентификаторыПочтовыхВложений.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Письмо
		|	И ИдентификаторыПочтовыхВложений.Идентификатор ЕСТЬ NULL");
		
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФайлЗаявки = Выборка.Ссылка.Скопировать();
		ФайлЗаявки.ВладелецФайла = Ссылка;
		ФайлЗаявки.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтотОбъект.Статус = Справочники.СостоянияЗаявок.Отменена Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Проект) И ЭтотОбъект.Контрагент.ВестиУчетЗаявокПоПроектам  Тогда
		
		// Если он не заполнен, сообщим об этом пользователю 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнен проект в заявке!";
		Сообщение.Поле = "Проект";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		
		Сообщение.Сообщить();
		
		// Так как информация не консистентна, то продолжать работу дальше смысла нет 
		Отказ = Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЭтотОбъект.ПроектнаяЗадача) И ЭтотОбъект.Контрагент.ВестиУчетЗаявокПоПроектам Тогда
		
		// Если он не заполнен, сообщим об этом пользователю 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнен проектная задача в заявке!";
		Сообщение.Поле = "ПроектнаяЗадача";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		
		Сообщение.Сообщить();
		
		// Так как информация не консистентна, то продолжать работу дальше смысла нет 
		Отказ = Истина;
	КонецЕсли;
	
	//Пока удалим исполнителя для зарегистрированных
	Если Статус = Справочники.СостоянияЗаявок.Зарегистрирована Тогда
		Эл = ПроверяемыеРеквизиты.Найти("ТекущийИсполнитель");
		ПроверяемыеРеквизиты.Удалить(Эл);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеОПлановомВремени(ТаблицаОценки) Экспорт
	
	Для Каждого СтрОценки Из ТаблицаОценки Цикл
		
		НаборЗаписей = РегистрыСведений.ПлановыеТрудозатратыПоЗаявкам.СоздатьНаборЗаписей();
		
		ТекОтбор = НаборЗаписей.Отбор.Источник;
		ТекОтбор.Установить(ЭтотОбъект.Ссылка);
		
		ТекОтбор = НаборЗаписей.Отбор.Проект;
		ТекОтбор.Установить(ЭтотОбъект.Проект);
		
		ТекОтбор = НаборЗаписей.Отбор.ПроектнаяЗадача;
		ТекОтбор.Установить(ЭтотОбъект.ПроектнаяЗадача);
		
		ТекОтбор = НаборЗаписей.Отбор.Исполнитель;
		ТекОтбор.Установить(СтрОценки.Исполнитель);
		
		ТекОтбор = НаборЗаписей.Отбор.Период;
		ТекОтбор.Установить(СтрОценки.Период);
		
		НаборЗаписей.Прочитать();
		
		Если ЭтотОбъект.Статус <> Справочники.СостоянияЗаявок.Отменена И СтрОценки.Оценка <> 0 Тогда
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
			Иначе
				НоваяЗапись = НаборЗаписей.Получить(0);
			КонецЕсли;
			
			НоваяЗапись.Активность = Истина;
			НоваяЗапись.Источник = ЭтотОбъект.Ссылка;
			НоваяЗапись.Длительность = СтрОценки.Оценка*3600;
			НоваяЗапись.Проект = ЭтотОбъект.Проект;
			НоваяЗапись.ПроектнаяЗадача = ЭтотОбъект.ПроектнаяЗадача;
			НоваяЗапись.Исполнитель = СтрОценки.Исполнитель;
			НоваяЗапись.Период = СтрОценки.Период;
			
			Если Не ЗначениеЗаполнено(СтрОценки.Ответственный) Тогда
				НоваяЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Иначе
				НоваяЗапись.Ответственный = СтрОценки.Ответственный;
			КонецЕсли;
			
			НоваяЗапись.ПричинаИзменения = СтрОценки.ПричинаИзменения;
		Иначе
			НаборЗаписей.Очистить();
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры	

#Область ИнтерфейсКалендаряСотрудника

Процедура ОбновитьЗаписьКалендаряПриЗаписиИсточника(ЗаписиПоИсточнику) Экспорт
	
	// Отмена всех существующих записей календарей в случае установки пометки удаления
	Если ПометкаУдаления Тогда
	
		Для Каждого ЗаписьКалендаря Из ЗаписиПоИсточнику Цикл
			ЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
			ЗаписьКалендаря.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
		
	Если  ЗаписиПоИсточнику.Количество() = 0 Тогда
		
		ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
		ЗаписьКалендаря.УстановитьНовыйКод();
		ОбновитьДанныеЗаписиКалендаря(ЗаписьКалендаря);
	Иначе
		
		Для Каждого Запись Из ЗаписиПоИсточнику Цикл
			ЗаписьКалендаря = Запись.ПолучитьОбъект();
		
			Если ЗаписьКалендаря.ПометкаУдаления Тогда
				//ЗаписьКалендаря.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			ОбновитьДанныеЗаписиКалендаря(ЗаписьКалендаря);
		КонецЦикла;
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбновитьДанныеЗаписиКалендаря(ЗаписьКалендаря)
	ТекСсылкаНаЗаписьКалендаря = ЗаписьКалендаря.Ссылка;
			
	Если ЗаписьКалендаря.ПометкаУдаления Тогда
		ЗаписьКалендаря.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
			
	
	ПредставлениеЗаписи = СтрШаблон(
	НСтр("ru='Заявка №%1: %2';uk='Заявка №%1: %2'"),
	Ссылка.Номер,Ссылка.Тема
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланированиеЗаявок.ДатаНачала КАК ДатаНачала,
		|	ПланированиеЗаявок.Заявка,
		|	ПланированиеЗаявок.ЗаписьКалендаря,
		|	ПланированиеЗаявок.ДатаОкончания,
		|	ПланированиеЗаявок.Календарь КАК Календарь
		|ИЗ
		|	РегистрСведений.ПланированиеЗаявок КАК ПланированиеЗаявок
		|ГДЕ
		|	ПланированиеЗаявок.Заявка = &Заявка
		|	И ПланированиеЗаявок.ЗаписьКалендаря = &ЗаписьКалендаря";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	Запрос.УстановитьПараметр("ЗаписьКалендаря", ТекСсылкаНаЗаписьКалендаря);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаписьКалендаря.Наименование		= ПредставлениеЗаписи;
		ЗаписьКалендаря.Источник			= Ссылка;
		ЗаписьКалендаря.Календарь			= ВыборкаДетальныеЗаписи.Календарь;
		ЗаписьКалендаря.Начало				= ВыборкаДетальныеЗаписи.ДатаНачала;
		ЗаписьКалендаря.Окончание			= ВыборкаДетальныеЗаписи.ДатаОкончания;
		ЗаписьКалендаря.Описание			= Ссылка.ОписаниеЗаявки;
		ЗаписьКалендаря.НомерСтрокиИсточника = 1;
		
		ЗаписьКалендаря.Записать();
		
		//В случае если у нас не создана запись в регистре
		Если Не Значениезаполнено(ТекСсылкаНаЗаписьКалендаря) Тогда
			МенеджерЗаписи = РегистрыСведений.ПланированиеЗаявок.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Заявка = Ссылка;
			МенеджерЗаписи.ЗаписьКалендаря = ТекСсылкаНаЗаписьКалендаря;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Заявка = Ссылка;
				МенеджерЗаписи.ЗаписьКалендаря = ЗаписьКалендаря.Ссылка; 
				
				МенеджерЗаписи.ДатаНачала = ЗаписьКалендаря.Начало;
				МенеджерЗаписи.ДатаОкончания = ЗаписьКалендаря.Окончание;
				МенеджерЗаписи.Календарь = ЗаписьКалендаря.Календарь;
				
				МенеджерЗаписи.Записать();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

Процедура ОбновитьИсточникПриИзмененииЗаписиКалендаря(ЭлементыПланировщика) Экспорт
	
	Для Каждого ДанныеЭлемента Из ЭлементыПланировщика Цикл
		МенеджерЗаписи = РегистрыСведений.ПланированиеЗаявок.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заявка = ДанныеЭлемента.Источник;
		МенеджерЗаписи.ЗаписьКалендаря = ДанныеЭлемента.ЗаписьКалендаря;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Заявка = ДанныеЭлемента.Источник;
		МенеджерЗаписи.ЗаписьКалендаря = ДанныеЭлемента.ЗаписьКалендаря; 
		
		МенеджерЗаписи.ДатаНачала = ДанныеЭлемента.Начало;
		МенеджерЗаписи.ДатаОкончания = ДанныеЭлемента.Конец;
		МенеджерЗаписи.Календарь = КалендарьСотрудника;
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(КалендарьСотрудника) И ЭтоНовыйОбъект Тогда
		МенеджерЗаписи = РегистрыСведений.ПланированиеЗаявок.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заявка = Ссылка;
		МенеджерЗаписи.ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.ПустаяСсылка(); 
		
		МенеджерЗаписи.ДатаНачала = ДатаНачалаПлан;
		МенеджерЗаписи.ДатаОкончания = ДатаОкончанияПлан;
		МенеджерЗаписи.Календарь = КалендарьСотрудника;
		
		МенеджерЗаписи.Записать();
		
		КалендарьСотрудника = Неопределено;
		ДатаНачалаПлан = Дата(1,1,1);
		ДатаОкончанияПлан = Дата(1,1,1);
	ИначеЕсли Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда 
		Если СменаОтвественного = Истина Тогда
			//Тут у нас будет календарь на который нужно передвинуть записи календаря например в случае передачи заявки
			КалендарьДляПереданныхЗадач =
			ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСКалендарем",
			"КалендарьДляПереданныхЗадач");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПланированиеЗаявок.Заявка,
			|	ПланированиеЗаявок.ЗаписьКалендаря,
			|	ПланированиеЗаявок.Календарь,
			|	ПланированиеЗаявок.ДатаНачала,
			|	ПланированиеЗаявок.ДатаОкончания
			|ИЗ
			|	РегистрСведений.ПланированиеЗаявок КАК ПланированиеЗаявок
			|ГДЕ
			|	ПланированиеЗаявок.Заявка = &Заявка
			|	И ПланированиеЗаявок.ЗаписьКалендаря.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Заявка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ПланированиеЗаявок.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Заявка = ВыборкаДетальныеЗаписи.Заявка;
				МенеджерЗаписи.ЗаписьКалендаря = ВыборкаДетальныеЗаписи.ЗаписьКалендаря;
				МенеджерЗаписи.Прочитать();
				
				МенеджерЗаписи.Заявка = ВыборкаДетальныеЗаписи.Заявка;
				МенеджерЗаписи.ЗаписьКалендаря = ВыборкаДетальныеЗаписи.ЗаписьКалендаря; 
				
				МенеджерЗаписи.ДатаНачала = ВыборкаДетальныеЗаписи.ДатаНачала;
				МенеджерЗаписи.ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаОкончания;
				МенеджерЗаписи.Календарь = КалендарьДляПереданныхЗадач;
				
				МенеджерЗаписи.Записать();
	
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ и ЭтотОбъект.Статус = Справочники.СостоянияЗаявок.Объединена И ЗначениеЗаполнено(ЭтотОбъект.ГлавнаяЗаявка) Тогда
		 РаботаСЗаявками.ОбъединитьЗаявки(ЭтотОбъект.Ссылка,ЭтотОбъект.ГлавнаяЗаявка);
	КонецЕсли;	
	
	Если Не Отказ И ТаблицаВложенийОбъекта.Количество()> 0 Тогда
		ТекстHTML = ОписаниеЗаявкиHTML;
		СохранитьОбъектыВложенийHTML(ТекстHTML,ТаблицаВложенийОбъекта);
	КонецЕсли;	
	
	Если ЭтоНовыйОбъект И ЭтотОбъект.Статус = Справочники.СостоянияЗаявок.Зарегистрирована Тогда 
		МенеджерЗаписи = РегистрыСведений.ОповещенияПоЗаявкам.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заявка = ЭтотОбъект.Ссылка;
		МенеджерЗаписи.УчетнаяЗапись = ?(ЗначениеЗаполнено(ЭтотОбъект.Контрагент.УчетнаяЗаписьДляОповещений),ЭтотОбъект.Контрагент.УчетнаяЗаписьДляОповещений,ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки());
		МенеджерЗаписи.Событие = Перечисления.ВидыСобытийПоЗаявке.Зарегистрирована;
		МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
		
		МенеджерЗаписи.Записать();
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ТекущийИсполнитель) И ПроверитьНеобходимостьУведомленияПользователя(Перечисления.ВидыСобытийПоЗаявке.Получение) Тогда
			МенеджерЗаписи = РегистрыСведений.ОповещенияПоЗаявкам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Заявка = Ссылка;
			МенеджерЗаписи.УчетнаяЗапись = ?(ЗначениеЗаполнено(Контрагент.УчетнаяЗаписьДляОповещений),Контрагент.УчетнаяЗаписьДляОповещений,ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки());
			МенеджерЗаписи.Событие = Перечисления.ВидыСобытийПоЗаявке.Получение;
			МенеджерЗаписи.ИдСобытия = Строка(Новый УникальныйИдентификатор());
			МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
			МенеджерЗаписи.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЗаписатьИсториюСостояний") Тогда
		НоваяЗапись 				= РегистрыСведений.ИсторияСостояний.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период 			= ТекущаяДата();
		НоваяЗапись.Объект 			= Ссылка;
		НоваяЗапись.Срок 		= СрокЗаявки;
		НоваяЗапись.Состояние 		= Статус;
		НоваяЗапись.Прогресс 		= Прогресс;
		НоваяЗапись.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		НоваяЗапись.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.ТекущийИсполнитель <> ТекущийИсполнитель И ЗначениеЗаполнено(Ссылка.ТекущийИсполнитель) И ЗначениеЗаполнено(ТекущийИсполнитель) Тогда
		СменаОтвественного = Истина;
	КонецЕсли;
	ЭтоНовыйОбъект = ЭтоНовый();
	
	ДатаИзменения = ТекущаяДата();

	Если Статус = Справочники.СостоянияЗаявок.Выполнена И Не ЗаявкаЗакрыта Тогда
		ЗаявкаЗакрыта = Истина;
		ДатаЗакрытия = ТекущаяДата();
	КонецЕсли;
	
	Если Ссылка.Статус <> Статус И Не ЭтоНовый() Тогда //Поменяли статус
		НоваяСтрока = ТекстыДополнений.Добавить();
		НоваяСтрока.ТипДополнения = ?(Статус = Справочники.СостоянияЗаявок.Объединена,Перечисления.ВидыСобытийПоЗаявке.Объединена,Перечисления.ВидыСобытийПоЗаявке.ИзмененСтатус);
		НоваяСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		НоваяСтрока.ИдДополнения = Новый УникальныйИдентификатор();
		НоваяСтрока.ОписаниеДополнения = Строка(Статус);
		НоваяСтрока.ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	
	Если Не ЭтоНовыйОбъект Тогда
		ТаблСобытий = Ссылка.ТекстыДополнений.Выгрузить();
		ТаблСобытийНов = ТекстыДополнений.Выгрузить();
		СтруктураПоиска = Новый Структура();
		Для Каждого Стр Из ТаблСобытий Цикл
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("ИдДополнения",Стр.ИдДополнения);
			МассивСтрок = ТаблСобытийНов.НайтиСтроки(СтруктураПоиска);
			Для Каждого Эл Из МассивСтрок Цикл
				ТаблСобытийНов.Удалить(Эл);
			КонецЦикла;	
		КонецЦикла;
		
		//Теперь фиксируем новые строки
		Для Каждого Стр Из ТаблСобытийНов Цикл
			Если НЕ ПроверитьНеобходимостьУведомленияПользователя(Стр.ТипДополнения) Тогда
				Продолжить;  
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ОповещенияПоЗаявкам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Заявка = Ссылка;
			МенеджерЗаписи.УчетнаяЗапись = ?(ЗначениеЗаполнено(Контрагент.УчетнаяЗаписьДляОповещений),Контрагент.УчетнаяЗаписьДляОповещений,ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки());
			МенеджерЗаписи.Событие = Стр.ТипДополнения;
			МенеджерЗаписи.ИдСобытия = Стр.ИдДополнения;
			МенеджерЗаписи.ДатаСобытия = Стр.ДатаСоздания;
			МенеджерЗаписи.Записать();
			
			Если  Стр.ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.Передача Тогда
				Если ПроверитьНеобходимостьУведомленияПользователя(Перечисления.ВидыСобытийПоЗаявке.Получение) Тогда
					МенеджерЗаписи = РегистрыСведений.ОповещенияПоЗаявкам.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Заявка = Ссылка;
					МенеджерЗаписи.УчетнаяЗапись = ?(ЗначениеЗаполнено(Контрагент.УчетнаяЗаписьДляОповещений),Контрагент.УчетнаяЗаписьДляОповещений,ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки());
					МенеджерЗаписи.Событие = Перечисления.ВидыСобытийПоЗаявке.Получение;
					МенеджерЗаписи.ИдСобытия = Строка(Новый УникальныйИдентификатор());
					МенеджерЗаписи.ДатаСобытия = ТекущаяДата();
					МенеджерЗаписи.Записать();
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ЗаписатьИсториюСостояний", Истина);
	КонецЕсли; 
	Если Прогресс<>Ссылка.Прогресс Тогда
		ДополнительныеСвойства.Вставить("ЗаписатьИсториюСостояний", Истина);
	КонецЕсли; 
	Если СрокЗаявки<>Ссылка.СрокЗаявки Тогда
		ДополнительныеСвойства.Вставить("ЗаписатьИсториюСостояний", Истина);
	КонецЕсли; 
	Если Статус <> Ссылка.Статус Тогда
		ДополнительныеСвойства.Вставить("ЗаписатьИсториюСостояний", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ОписаниеЗаявки = "";
	ЗаявкаЗакрыта = Ложь;
	ДатаЗакрытия = Дата(1,1,1);
	Статус = Справочники.СостоянияЗаявок.ВРаботе;
	ДокументОснование = Неопределено;
	ГлавнаяЗаявка  = Документы.Заявка.ПустаяСсылка();
	ТекстыДополнений.Очистить();
КонецПроцедуры

Функция ПроверитьНеобходимостьУведомленияПользователя(ТипСобытия)
	Если ТекущийИсполнитель = Постановщик Тогда
		ТаблПодписчиков = РаботаСЗаявкамиИПочтой.ПолучитьТаблицуПодписчиков(Ссылка);
		Возврат ТаблПодписчиков.Количество()>0;		              //Сами себе писать не будем, только подписчикам 
	ИначеЕсли ТекущийИсполнитель = Справочники.Пользователи.РаспределительЗаявок Тогда
		Возврат Ложь;		              //Служебному пользователю не пишем
	ИначеЕсли ТипСобытия = Перечисления.ВидыСобытийПоЗаявке.Получение Тогда
		Возврат Не ТекущийИсполнитель.НеПолучатьУведомленияПриПоступленииЗаявки;	
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции


