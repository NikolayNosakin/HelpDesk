&НаКлиенте
Перем СтруктураотбораПред;

&НаКлиенте
Процедура ТипСтраницыПриИзменении(Элемент)
	УстановитьНастройкиДинСписка();
	
	ОбработатьПользовательскиеНастройкиСписка(ДнГруппы.КомпоновщикНастроек.ПользовательскиеНастройки);

	ОбновитьСписок();
	
	ТекСтрокаДерева = Элементы.ДеревоГрупп.ТекущиеДанные;
	СтруктураОтбора = ПолучитьСоответствиеОтбораСтрокамДерева(ТекСтрокаДерева);

	УстановитьПредставлениеДереваВВидеСсылок(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗаявок(ТекСтрока)	
	//Получим структуру выбранной строки
	СтруктураОтбора = ПолучитьСтруктуруОтбора(ТекСтрока);
	
	УстановитьОтборСпискаЗаявок(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруОтбора(ТекСтрока,ПоВсемРеквизитам = Ложь)
	//Заполним структуру отбора
	Структураотбора = новый Структура();
	
	Если ТекСтрока = Неопределено Тогда
		 Возврат Структураотбора;
	КонецЕсли;
	
	Если ТекСтрока.СписокЗаявок.Количество() > 0 И НЕ ПоВсемРеквизитам Тогда
		Структураотбора.Вставить("Ссылка",ТекСтрока.СписокЗаявок);
		Возврат Структураотбора;
	КонецЕсли;
	
	//Обработаем тек строку
	Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
		Структураотбора.Вставить(ТекСтрока.ИмяРеквизита,ТекСтрока.ЗначениеРеквизита);
	КонецЕсли;

	//И всех ее родителей
	Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда//У нас корневая строка
		СтруктураотбораПред = Неопределено;
	Иначе	
		Пока ТекСтрока.ПолучитьРодителя() <> Неопределено Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
				Структураотбора.Вставить(ТекСтрока.ИмяРеквизита,ТекСтрока.ЗначениеРеквизита);
			КонецЕсли;
			ТекСтрока = ТекСтрока.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	Возврат Структураотбора;
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеОтбораСтрокамДерева(ТекСтрока)
	//Заполним структуру отбора
	СоответствиеОтбора = новый Структура();
	
	Если ТекСтрока = Неопределено Тогда
		 Возврат СоответствиеОтбора;
	КонецЕсли;
	
	//Обработаем тек строку
	Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
		СоответствиеОтбора.Вставить("Ключ"+Формат(ТекСтрока.ПолучитьИдентификатор(),"ЧГ=0"),ТекСтрока.ПредставлениеРеквизита);
	КонецЕсли;

	//И всех ее родителей
	Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда//У нас корневая строка
		СоответствиеОтбораПред = Неопределено;
	Иначе	
		Пока ТекСтрока.ПолучитьРодителя() <> Неопределено Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
				СоответствиеОтбора.Вставить("Ключ"+Формат(ТекСтрока.ПолучитьИдентификатор(),"ЧГ=0"),ТекСтрока.ПредставлениеРеквизита);
			КонецЕсли;
			ТекСтрока = ТекСтрока.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеОтбора;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСпискаЗаявок(Структураотбора)
	СписокЗаявокПоИсполнителю.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ПолучитьНастройкиДнГруппыСервер());
	
	Если СтруктураотбораПред = Неопределено Тогда
		СтруктураотбораПред = Новый Структура();
	КонецЕсли;
		
	//Удаляем значения предыдущих отборов
	Для Каждого КлючИЗначение Из  СтруктураотбораПред Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокЗаявокПоИсполнителю.Отбор,КлючИЗначение.Ключ)
	КонецЦикла;
	
	//Удаляем значения отборов которые будем устанавливать
	Для Каждого КлючИЗначение Из  Структураотбора Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокЗаявокПоИсполнителю.Отбор,КлючИЗначение.Ключ)
	КонецЦикла;
	
	//Добавляем отборы по заявкам
	Для Каждого КлючИЗначение Из  Структураотбора Цикл		
		СтруктураотбораПред.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СписокЗаявокПоИсполнителю.Отбор,КлючИЗначение.Ключ, КлючИЗначение.Значение,?(ТипЗнч(КлючИЗначение.Значение)=Тип("СписокЗначений"),ВидСравненияКомпоновкиДанных.ВСписке,ВидСравненияКомпоновкиДанных.Равно));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
   ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 100);

	ОбработатьПользовательскиеНастройкиСписка(ДнГруппы.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	//ТекущаяСтрокаДереваГруппировок = -1;	
	ТекСтрокаДерева = Неопределено;
	Если ДанныеДереваГрупп.ПолучитьЭлементы().Количество() <> 0 Тогда 
		Если НЕ ОтображатьГруппировкуЗаявок Тогда
			ТекСтрокаДерева = ДанныеДереваГрупп.НайтиПоИдентификатору(ТекущаяСтрокаДереваГруппировок);
			Если ТекСтрокаДерева = Неопределено Тогда
				ТекСтрокаДерева = ДанныеДереваГрупп.ПолучитьЭлементы().Получить(0);
			КонецЕсли;	
		Иначе	
			Элементы.ДеревоГрупп.ТекущаяСтрока = ТекущаяСтрокаДереваГруппировок;
			ТекСтрокаДерева = Элементы.ДеревоГрупп.ТекущиеДанные;	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборЗаявок(ТекСтрокаДерева);	
	СоответствиеОтбора = ПолучитьСоответствиеОтбораСтрокамДерева(ТекСтрокаДерева);
	УстановитьПредставлениеДереваВВидеСсылок(СоответствиеОтбора);

	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	 Если ИмяСобытия = "ФормаНастроекДинамическогоСпискаЗакрытие" Тогда		 
		ОбработатьПользовательскиеНастройкиСписка(Параметр.ПользовательскиеНастройки);
		ДнГруппы.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Параметр.ПользовательскиеНастройки);
		ОбновитьСписок();
		
		ПользНастройки = ДнГруппы.КомпоновщикНастроек.ПользовательскиеНастройки;
		СохранитьПользовательскиеНастройкиСервер(ПользНастройки);
	ИначеЕсли ИмяСобытия = "ЗаписаноИзменениеЗаявки" Тогда
		ОбновитьСписок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.СписокМоихЗаявок.Обновить();
	ЗаполнитьДеревоГруппКлиент();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	//Элементы.СписокЗаявокКомандыОрганизация.Видимость = ИспользоватьУчетПоОрганизациям;
	//Элементы.СписокЗаявокПоОтветственномуОрганизация.Видимость = ИспользоватьУчетПоОрганизациям;
	//Элементы.СписокМоихЗаявокОрганизация.Видимость = ИспользоватьУчетПоОрганизациям;
	Элементы.ГруппаНевидимости.Видимость = Ложь;
	Элементы.ГруппаДерева.Видимость = ОтображатьГруппировкуЗаявок;
	
	Если ОтображатьГруппировкуЗаявок Тогда
		Элементы.ПоказатьСкрытьНастройкуГруппировки.Картинка = БиблиотекаКартинок.Назад;	
	Иначе
		Элементы.ПоказатьСкрытьНастройкуГруппировки.Картинка = БиблиотекаКартинок.ОтборКомпоновкиДанных;	
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройкуГруппировки(Команда)
	
	Элементы.ГруппаДерева.Видимость = НЕ Элементы.ГруппаДерева.Видимость;
	ОтображатьГруппировкуЗаявок = Элементы.ГруппаДерева.Видимость;
	
	Если ОтображатьГруппировкуЗаявок Тогда
		Элементы.ДеревоГрупп.ТекущаяСтрока = ТекущаяСтрокаДереваГруппировок;
	КонецЕслИ;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СписокМоихЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.СписокМоихЗаявок.Развернут(ВыбраннаяСтрока) Тогда
            Элементы.СписокМоихЗаявок.Свернуть(ВыбраннаяСтрока);
        иначе
            Элементы.СписокМоихЗаявок.Развернуть(ВыбраннаяСтрока);
        КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	ТекТабл = ЭтотОбъект.ТекущийЭлемент;
	Если ТипЗнч(ТекТабл) = Тип("ТаблицаФормы") Тогда
		МассивСтрок = ТекТабл.ВыделенныеСтроки;
		Если МассивСтрок.Количество() <> 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПометитьНаУдалениеЗавершение", ЭтотОбъект, Новый Структура("МассивСтрок, ТекТабл", МассивСтрок, ТекТабл)), "Отменить выбранные заявки?",РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ДополнительныеПараметры.МассивСтрок;
	ТекТабл = ДополнительныеПараметры.ТекТабл;	
	
	Для Каждого ТекДок Из МассивСтрок Цикл
		Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.Заявка") тогда
			РаботаСЗаявками.ОбработатьУдалениеЗаявки(ТекДок);
		КонецЕсли;
	КонецЦикла;
	ТекТабл.Обновить()
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаГрупп(Команда)
    ПараметрыФормы = Новый Структура();

	ПараметрыФормы.Вставить("Заголовок", "Настройка списка");
    ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", ДнГруппы.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
    ПараметрыФормы.Вставить("Настройки", ДнГруппы.КомпоновщикНастроек.Настройки);
    ПараметрыФормы.Вставить("ПользовательскиеНастройки", ДнГруппы.КомпоновщикНастроек.ПользовательскиеНастройки);
    ПараметрыФормы.Вставить("ФиксированныеНастройки", ДнГруппы.КомпоновщикНастроек.ФиксированныеНастройки);
    ОткрытьФорму("ОбщаяФорма.ФормаНастроекДинамическогоСписка",ПараметрыФормы,ЭтотОбъект, Истина, ,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоГруппКлиент()
	Если ОтображатьГруппировкуЗаявок Тогда
		//Сохраним текущее состояние дерева
		ДанныеДереваГруппСостояния.ПолучитьЭлементы().Очистить();
		
		СохранитьСостояниеДеревоЗначенийФормы(ДанныеДереваГрупп,ДанныеДереваГруппСостояния);
		
		ЗаполнитьДеревоГрупп(Ложь);
		
		ВыбраннаяСтрока = УстановитьСостояниеДерева(ДанныеДереваГруппСостояния,ДанныеДереваГрупп);
		
		Если ДанныеДереваГрупп.ПолучитьЭлементы().Количество() <> 0 Тогда 
			ПерваяСтрока = ДанныеДереваГрупп.ПолучитьЭлементы().Получить(0);
			Если Элементы.ДеревоГрупп.Развернут(ПерваяСтрока.ПолучитьИдентификатор()) = Ложь Тогда
				Элементы.ДеревоГрупп.Развернуть(ПерваяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			
			Если ВыбраннаяСтрока <> Неопределено Тогда
				КлючСтроки = ВыбраннаяСтрока;
			Иначе
				КлючСтроки = ПерваяСтрока.ПолучитьИдентификатор();
			КонецЕслИ;
			
			Элементы.ДеревоГрупп.ТекущаяСтрока = КлючСтроки;
		КонецЕсли;	
	Иначе
		ЗаполнитьДеревоГрупп(Истина);
		
		//Определим данные по строке
		ТекСтрокаОлдДерева = ДанныеДереваГрупп.НайтиПоИдентификатору(ТекущаяСтрокаДереваГруппировок);
		ТекСтрокаДерева = Неопределено;
		Если ДанныеДереваГруппКопия.ПолучитьЭлементы().Количество() <> 0 Тогда
			//Найдем такую строку в копии
			КлючСтроки = НайтиСтрокуДерева(ДанныеДереваГруппКопия,ТекСтрокаОлдДерева);
			Если КлючСтроки = Неопределено Тогда
				ТекСтрокаДерева = ДанныеДереваГруппКопия.ПолучитьЭлементы().Получить(0);
			Иначе	
				ТекСтрокаДерева = ДанныеДереваГруппКопия.НайтиПоИдентификатору(КлючСтроки);
			КонецЕсли;
		КонецЕсли;
		УстановитьОтборЗаявок(ТекСтрокаДерева);	
		СоответствиеОтбора = ПолучитьСоответствиеОтбораСтрокамДерева(ТекСтрокаДерева);
		УстановитьПредставлениеДереваВВидеСсылок(СоответствиеОтбора);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция  НайтиСтрокуДерева(ДеревоИсточник,СтрокаДерева)
	ЕстьСтрока = Ложь;
	ВыбрСтрока = Неопределено;
	Если СтрокаДерева = Неопределено Тогда
		Возврат ВыбрСтрока;
	КонецЕсли;	
	//сравниваем наше дерево с копией
	Для каждого ТекСтрокаИсточник Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ЗначениеРеквизита = ТекСтрокаИсточник.ЗначениеРеквизита 
			И СтрокаДерева.ИмяРеквизита = ТекСтрокаИсточник.ИмяРеквизита Тогда
			ЕстьСтрока = истина;
		КонецЕсли;	
		
		Если ЕстьСтрока Тогда
			ВыбрСтрока = ТекСтрокаИсточник.ПолучитьИдентификатор();
		Иначе
			ВыбрСтрока = НайтиСтрокуДерева(ТекСтрокаИсточник,СтрокаДерева);
		КонецЕсли;	
		
		Если ВыбрСтрока <> Неопределено Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ВыбрСтрока;	
КонецФункции

&НаКлиенте
Процедура  СохранитьСостояниеДеревоЗначенийФормы(ДеревоИсточник,ДеревоПриемник)
	Для каждого ТекСтрока Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		НоваяСтрока = ДеревоПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		НоваяСтрока.Развернут = Элементы.ДеревоГрупп.Развернут(ТекСтрока.ПолучитьИдентификатор());
		НоваяСтрока.Выбран = Элементы.ДеревоГрупп.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
		
		СохранитьСостояниеДеревоЗначенийФормы(ТекСтрока,НоваяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция  УстановитьСостояниеДерева(ДеревоИсточник,ДеревоПриемник)
	
	//сравниваем наше дерево с копией
	Для каждого ТекСтрокаИсточник Из ДеревоИсточник.ПолучитьЭлементы() Цикл
			
		ЕстьСтрока = Ложь;
		Для каждого стрПриемник Из  ДеревоПриемник.ПолучитьЭлементы() цикл
			Если СтрПриемник.ЗначениеРеквизита = ТекСтрокаИсточник.ЗначениеРеквизита И СтрПриемник.ИмяРеквизита = ТекСтрокаИсточник.ИмяРеквизита Тогда
				ЕстьСтрока = истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
			
		Если ЕстьСтрока Тогда
			Если ТекСтрокаИсточник.Выбран Тогда
				ВыбрСтрока = СтрПриемник.ПолучитьИдентификатор();
			КонецЕсли;			
			Если ТекСтрокаИсточник.развернут Тогда
				Элементы.ДеревоГрупп.Развернуть(СтрПриемник.ПолучитьИдентификатор(),Ложь);
			КонецЕсли;
			
			ВыбрСтрокаНов = УстановитьСостояниеДерева(ТекСтрокаИсточник,СтрПриемник);
			ВыбрСтрока = ?(ВыбрСтрокаНов=Неопределено,ВыбрСтрока,ВыбрСтрокаНов);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ВыбрСтрока;	
КонецФункции

&НаКлиенте
Процедура ДеревоГруппПриАктивизацииСтроки(Элемент)
	Если ТекущаяСтрокаДереваГруппировок = Элементы.ДеревоГрупп.ТекущаяСтрока Тогда
		Возврат;
	КонецЕслИ;
	
	ТекСтрокаДерева = Элементы.ДеревоГрупп.ТекущиеДанные;
	ТекущаяСтрокаДереваГруппировок = Элементы.ДеревоГрупп.ТекущаяСтрока;
	УстановитьОтборЗаявок(ТекСтрокаДерева);
	
	СоответствиеОтбора = ПолучитьСоответствиеОтбораСтрокамДерева(ТекСтрокаДерева);
	УстановитьПредставлениеДереваВВидеСсылок(СоответствиеОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкиГруппировки(Настройки)
	//Если ТипСтраницы = 0 Тогда
	//	//Удаляем ссылку из структуры настроек (ссылка это группировка)
	//	//На случай если пользовтель разместил ее не в конце
	//	УдалитьСтруктуруГруппировкиПоПолю(Настройки,Новый ПолеКомпоновкиДанных("ТекущийИсполнитель"));
	//Иначе	
	//	Если НайтиГруппировкуВНастройках(Настройки,Новый ПолеКомпоновкиДанных("ТекущийИсполнитель"))  = Ложь Тогда	
	//		//Добавляем в конец Структуру по ссылке
	//		ГруппаСсылки = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	//		ПолеГруппировки = ГруппаСсылки.ПоляГруппировки; 
	//		ПолеГруппировкиСсылка =ПолеГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
	//		ПолеГруппировкиСсылка.Использование      = Истина;
	//		ПолеГруппировкиСсылка.Поле               = Новый ПолеКомпоновкиДанных("ТекущийИсполнитель");
	//		ПолеГруппировкиСсылка.ТипГруппировки = 	ТипГруппировкиКомпоновкиДанных.Элементы;
	//		ПолеГруппировкиСсылка.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	//	КонецЕсли;	
	//КонецЕсли;	
	
	//Удаляем ссылку из структуры настроек (ссылка это группировка)
	//На случай если пользовтель разместил ее не в конце
	УдалитьСтруктуруГруппировкиПоПолю(Настройки,Новый ПолеКомпоновкиДанных("Ссылка"));
	
	//Добавляем в конец Структуру по ссылке
	ГруппаСсылки = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = ГруппаСсылки.ПоляГруппировки; 
	ПолеГруппировкиСсылка =ПолеГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
	ПолеГруппировкиСсылка.Использование      = Истина;
	ПолеГруппировкиСсылка.Поле               = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировкиСсылка.ТипГруппировки = 	ТипГруппировкиКомпоновкиДанных.Элементы;
	ПолеГруппировкиСсылка.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
КонецПроцедуры

&НаКлиенте
Функция НайтиГруппировкуВНастройках(Настройки,ПолеПоиска)
	ЕстьЭлемент = Ложь;
	
	Для Каждого Эл Из Настройки.Структура Цикл
		ПолеГруппировки = Эл.ПоляГруппировки;
		Для Каждого ПолеЭлемента Из ПолеГруппировки.Элементы Цикл
			Если ПолеЭлемента.Поле = ПолеПоиска Тогда
				ЕстьЭлемент = Истина;
				Прервать;	
			КонецЕсли;
		КонецЦикла;	
		ЕстьЭлемент = НайтиГруппировкуВНастройках(Эл,ПолеПоиска);	
	КонецЦикла;	
	
	Возврат ЕстьЭлемент;	
 КонецФункции	
 
&НаКлиенте
Процедура УдалитьСтруктуруГруппировкиПоПолю(Настройки,ПолеПоиска)
	МассивГруппНаУдаление = Новый Массив();
	
	Для Каждого Эл Из Настройки.Структура Цикл
		ПолеГруппировки = Эл.ПоляГруппировки;
		Для Каждого ПолеЭлемента Из ПолеГруппировки.Элементы Цикл
			Если ПолеЭлемента.Поле = ПолеПоиска Тогда
				МассивГруппНаУдаление.Добавить(Эл);
				Прервать;	
			КонецЕсли;
		КонецЦикла;	
		УдалитьСтруктуруГруппировкиПоПолю(Эл,ПолеПоиска);	
	КонецЦикла;	
	
	//Удаляем структуру по ссылке
	Для Каждого ЭлНаУдаление Из МассивГруппНаУдаление Цикл
		 Настройки.Структура.Удалить(ЭлНаУдаление);
	 КонецЦикла;	
КонецПроцедуры	 

&НаКлиенте
Процедура ОбработатьПользовательскиеНастройкиСписка(ПользовательскиеНастройки)
	//Доработаем пользовательские настройки. Добавим ссылку в группировку
	Для Каждого Эл Из ПользовательскиеНастройки.Элементы  Цикл
		Если ТипЗнч(Эл) = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			ОбработатьНастройкиГруппировки(Эл); 
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры		 

&НаКлиенте
Процедура ОбновитьЗаявкиГруппы(Команда)
	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКалендарь(Команда)
	ТекСтрока = Элементы.СписокМоихЗаявок.ТекущаяСтрока;
	
	МассивСтрок = Элементы.СписокМоихЗаявок.ВыделенныеСтроки;
	Для Каждого ТекСтрока Из МассивСтрок Цикл		
		Если ПолучитьРеквизитПоСсылке(ТекСтрока,"Статус") = ПредопределенноеЗначение("Справочник.СостоянияЗаявок.Отменена") Тогда
			Продолжить;
		КонецЕсли;
		
		Календарь = ПолучитьВыбранныйКалендарь();
		
		СтруктураЗаполнения = Новый Структура();
		СтруктураЗаполнения.Вставить("Источник",ТекСтрока);
		СтруктураЗаполнения.Вставить("Начало",НачалоЧаса(ТекущаяДата()));
		СтруктураЗаполнения.Вставить("Окончание",НачалоЧаса(ТекущаяДата()+3600));
		СтруктураЗаполнения.Вставить("Календарь",Календарь);
		
		ПредставлениеЗаписи = СтрШаблон(
		НСтр("ru='Заявка №%1: %2';uk='Заявка №%1: %2'"),
		ПолучитьРеквизитПоССылке(ТекСтрока,"Номер"),ПолучитьРеквизитПоССылке(ТекСтрока,"Тема"));
		
		СтруктураЗаполнения.Вставить("Описание",ПолучитьРеквизитПоССылке(ТекСтрока,"ОписаниеЗаявки"));
		СтруктураЗаполнения.Вставить("Наименование",ПредставлениеЗаписи);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
		
		ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.ФормаОбъекта", ПараметрыФормы);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокМоихЗаявокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не Копирование И Группа = Ложь И Параметр = Тип("ДокументСсылка.Заявка") Тогда
		Если ОтображатьГруппировкуЗаявок = Ложь Тогда
			ТекСтрокаДерева = ДанныеДереваГрупп.НайтиПоИдентификатору(ТекущаяСтрокаДереваГруппировок);
		Иначе
			ТекСтрокаДерева = Элементы.ДеревоГрупп.ТекущиеДанные;
		КонецЕслИ;
	 
		СтруктураПараметров = ПолучитьСтруктуруОтбора(ТекСтрокаДерева,Истина);
		Если СтруктураПараметров.Количество() <> 0 Тогда
			Отказ = Истина;
			СоздатьНовыйДокументЗаявки(СтруктураПараметров);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументЗаявки(СтруктураПараметров)
	
	Форма = ПолучитьФорму("Документ.Заявка.ФормаОбъекта");
	
	ДанныеФормы = Форма.Объект; // Получаем объект формы в переменную
	ЗаполнитьДокументНаСервере(ДанныеФормы,СтруктураПараметров); // Заполняем документ на сервере
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); // копируем наш объект в объект формы и далее открываем ее
	
	Если Не ЗначениеЗаполнено(ДанныеФормы.Проект) Тогда
		Форма.ЗаполнитьПроектПоКонтрагенту();
	КонецЕслИ;
	
	Если Не ЗначениеЗаполнено(ДанныеФормы.ПроектнаяЗадача) Тогда
		Форма.ЗаполнитьПроектнуюЗадачуПоПроекту();
	КонецЕслИ;

	Форма.Открыть();
	
КонецПроцедуры

// Можно использовать безконтекстный вызов, оптимизируем передачу данных

&НаСервереБезКонтекста
Функция ЗаполнитьДокументНаСервере(ДанныеФормы,СтруктураПараметров);
	
	Док = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.Заявка")); // Получаем объект из данных формы 
		
	ЗаполнитьЗначенияСвойств(Док,СтруктураПараметров);
	
	Док.Статус = Справочники.СостоянияЗаявок.Зарегистрирована;
	Док.ЗаявкаЗакрыта  = Ложь;
	Док.ТекущийИсполнитель  = Справочники.Пользователи.РаспределительЗаявок;
	Док.ДатаЗакрытия     = Дата(1,1,1);
	Док.ДатаИзменения    = Дата(1,1,1);
	Док.ГлавнаяЗаявка    = Документы.Заявка.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Док.ПроектнаяЗадача) И Не ЗначениеЗаполнено(Док.Проект) Тогда
	   Док.Проект = Док.ПроектнаяЗадача.Владелец;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Док.Проект) И Не ЗначениеЗаполнено(Док.Контрагент) Тогда
	   Док.Контрагент = Док.Проект.Заказчик;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Док,ДанныеФормы); // Кладем обратно в объект формы уже созданный документ
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиДнГруппыСервер()
	Возврат ДнГруппы.КомпоновщикНастроек.ПолучитьНастройки();
КонецФункции

&НаСервере
Функция ПолучитьРеквизитПоСсылке(ТекСсылка,ИмяРеквизита)
	Возврат ТекСсылка[ИмяРеквизита];
КонецФункции

&НаСервере
Функция ПолучитьВыбранныйКалендарь()
	КалендарьПользователя = Справочники.КалендариСотрудников.ПустаяСсылка();
	
	ДоступныеКалендари = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений
		);
		
	Отбор = Новый Структура("Выбран", Истина);
	Если ДоступныеКалендари.Количество() > 0 Тогда
		МассивСтрокКалендарей = ДоступныеКалендари.НайтиСтроки(Отбор);
		Если МассивСтрокКалендарей.Количество() = 1 Тогда
			КалендарьПользователя = МассивСтрокКалендарей.Получить(0).Календарь;
		КонецЕсли;	
	КонецЕсли;	
	Возврат КалендарьПользователя;
КонецФункции

&НаСервере
Процедура УстановитьПредставлениеДереваВВидеСсылок(СтруктураОтбора)
	//Очищаем строки
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаЭлементов Из Элементы.ГруппаСсылокГруппировки.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаЭлементов);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
		
	СсылкаНаЭлементДерева = Элементы.Добавить("ЭлементДерева_Ключ0", Тип("ДекорацияФормы"),  Элементы.ГруппаСсылокГруппировки);
	СсылкаНаЭлементДерева.Вид = ВидДекорацииФормы.Надпись;
	СсылкаНаЭлементДерева.Заголовок = ?(ТипСтраницы = 0,"Мои заявки","Заявки от меня");
	СсылкаНаЭлементДерева.Гиперссылка = Истина;
	СсылкаНаЭлементДерева.УстановитьДействие("Нажатие", "Подключаемый_ВыбранЭлементДерева");
	
	СсылкаНаЭлементДерева = Элементы.Добавить("РазделительДерева_Ключ0", Тип("ДекорацияФормы"),  Элементы.ГруппаСсылокГруппировки);
	СсылкаНаЭлементДерева.Вид = ВидДекорацииФормы.Надпись;
	СсылкаНаЭлементДерева.Заголовок = "/";

	ПредЭлем = Неопределено;
	Для Каждого Эл Из СтруктураОтбора Цикл
		Если ПредЭлем = Неопределено Тогда
			СсылкаНаЭлементДерева = Элементы.Добавить("ЭлементДерева_"+Эл.Ключ, Тип("ДекорацияФормы"),  Элементы.ГруппаСсылокГруппировки);
			ПредЭлем = СсылкаНаЭлементДерева;
		Иначе
			СсылкаНаЭлементДерева = Элементы.Вставить("РазделительДерева_"+Эл.Ключ, Тип("ДекорацияФормы"),  Элементы.ГруппаСсылокГруппировки,ПредЭлем);
			СсылкаНаЭлементДерева.Вид = ВидДекорацииФормы.Надпись;
			СсылкаНаЭлементДерева.Заголовок = "/";

			СсылкаНаЭлементДерева = Элементы.Вставить("ЭлементДерева_"+Эл.Ключ, Тип("ДекорацияФормы"),  Элементы.ГруппаСсылокГруппировки,СсылкаНаЭлементДерева);
			ПредЭлем = СсылкаНаЭлементДерева;
		КонецЕсли;	
		
		СсылкаНаЭлементДерева.Вид = ВидДекорацииФормы.Надпись;
		СсылкаНаЭлементДерева.Заголовок = Строка(Эл.Значение);
		СсылкаНаЭлементДерева.Гиперссылка = Истина;
		СсылкаНаЭлементДерева.УстановитьДействие("Нажатие", "Подключаемый_ВыбранЭлементДерева");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьПользовательскиеНастройкиСервер(ПользНастройки)
	 СохранениеНастроекДинСписка.СохранитьНастройкиСписка(ЭтотОбъект,"ДнГруппы");
КонецПроцедуры	

&НаСервере
Процедура  УстановитьНастройкиДинСписка()
    ТекПользователь = Пользователи.ТекущийПользователь();

	СписокЗаявокПоИсполнителю.Параметры.УстановитьЗначениеПараметра("Ответственный", ТекПользователь);
	СписокЗаявокПоИсполнителю.Параметры.УстановитьЗначениеПараметра("Тип", ТипСтраницы);
	 
	ДнГруппы.Параметры.УстановитьЗначениеПараметра("Ответственный", ТекПользователь);
	ДнГруппы.Параметры.УстановитьЗначениеПараметра("Тип", ТипСтраницы);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если РольДоступна("ОграниченныйИнтерфейсПользователя") Тогда
		ТипСтраницы = 1;
		Элементы.ДобавитьВКалендарь.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям") Тогда
		ИспользоватьУчетПоОрганизациям = Истина;
	Иначе
		ИспользоватьУчетПоОрганизациям = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоКонтрагентам") Тогда
		ИспользоватьУчетПоКонтрагентам = Истина;
	Иначе
		ИспользоватьУчетПоКонтрагентам = Ложь;
	КонецЕсли;

	УстановитьНастройкиДинСписка();
	
	СохранениеНастроекДинСписка.ВосстановитьНастройкиСписка( ЭтотОбъект,"ДнГруппы");
	
	//Заполним дерево групп
	ЗаполнитьДеревоГрупп();	
 КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоГрупп(ЗаполнятьКопию = Ложь)
	Схема = Элементы.ДинСписокГруппы.ПолучитьИсполняемуюСхемуКомпоновкиДанных();	
	Настройки = Элементы.ДинСписокГруппы.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = Компоновщик.Выполнить(Схема,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДеревоДанных = Новый ДеревоЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ЗаполнятьКопию Тогда
		ДеревоГруппНаФорме = РеквизитФормыВЗначение("ДанныеДереваГрупп");
	Иначе
		ДеревоГруппНаФорме = РеквизитФормыВЗначение("ДанныеДереваГруппКопия");
	КонецЕсли;
	
	ДеревоГруппНаФорме.Строки.Очистить();
	
	СоотвествиеКолонок = Новый Соответствие();
	Инд = 0;
	Для Каждого Кол Из ДеревоДанных.Колонки Цикл
		 СоотвествиеКолонок.Вставить(Инд,Кол);
		 Инд = Инд + 1;
	КонецЦикла;
	
	СтрокаДерева = ДеревоГруппНаФорме.Строки.Добавить();
	СтрокаДерева.ПредставлениеРеквизита = ?(ТипСтраницы = 0,"Мои заявки","Заявки от меня");
	
	СписокЗаявок = ДобавитьГруппыВДерево(СтрокаДерева.Строки, ДеревоДанных.Строки,СоотвествиеКолонок);
	СтрокаДерева.КоличествоЭлементов = СписокЗаявок.Количество();
	СтрокаДерева.СписокЗаявок = СписокЗаявок;
	
	//Передадим значение обратно клиенту	
	Если ЗаполнятьКопию Тогда
		ЗначениеВДанныеФормы(ДеревоГруппНаФорме, ДанныеДереваГруппКопия);
	Иначе
		ЗначениеВДанныеФормы(ДеревоГруппНаФорме, ДанныеДереваГрупп);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДобавитьГруппыВДерево(ДеревоСтроки, ИсточникСтроки,СтруктураКолонок)
	ЗаявкиПоСтроке = новый СписокЗначений();
	Для каждого Строка Из ИсточникСтроки Цикл				
		СоотвествиеКолонокУровня = Новый Соответствие();

		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			ЗаявкиПоСтроке.Добавить(Строка.Ссылка);
			Продолжить; 
		КонецЕсли;
		ТекИмяКолонки = СтруктураКолонок.Получить(0).Имя;
		СтрокаГруппы = ДеревоСтроки.Добавить();
		Инд = 0;
		Для Каждого ЗначениеКолонки Из СтруктураКолонок Цикл
			Кол = ЗначениеКолонки.Значение;
			Если Кол.Имя = ТекИмяКолонки Тогда
				СтрокаГруппы.ПредставлениеРеквизита = Строка[Кол.Имя];
				СтрокаГруппы.ЗначениеРеквизита = Строка[Кол.Имя];
								
				СтрокаГруппы.ИмяРеквизита = Кол.Имя;
				Если Не ЗначениеЗаполнено(Строка[Кол.Имя]) Тогда
					СтрокаГруппы.ПредставлениеРеквизита = "< нет данных по " + Кол.Заголовок + ">";
				КонецЕсли;	
				Продолжить;
			КонецЕсли;			
			Если Кол.Имя = "Ссылка" Тогда
				СоотвествиеКолонокУровня.Вставить(999,Кол);
			Иначе	
				СоотвествиеКолонокУровня.Вставить(Инд,Кол);
				Инд = Инд + 1;
			КонецЕсли;
		КонецЦикла;	
		
		Если СоотвествиеКолонокУровня.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаявкиПоВложеннойСтроке = ДобавитьГруппыВДерево(СтрокаГруппы.Строки, Строка.Строки,СоотвествиеКолонокУровня);
		КолЭлементов = ЗаявкиПоВложеннойСтроке.Количество();		
		СтрокаГруппы.КоличествоЭлементов = КолЭлементов;
		СтрокаГруппы.СписокЗаявок = ЗаявкиПоВложеннойСтроке;
		
		Для Каждого Эл Из ЗаявкиПоВложеннойСтроке Цикл
			ЗаявкиПоСтроке.Добавить(Эл.Значение,Эл.Представление);
		КонецЦикла;	
	КонецЦикла;
	Возврат ЗаявкиПоСтроке;
КонецФункции

&НаКлиенте
Процедура СписокМоихЗаявокОписаниеЗаякиДокументСформирован(Элемент)
	Пока Элемент.Документ.readyState <> "complete" Цикл
		//Анализируем когда документ загрузится
	КонецЦикла; 
		
	Элемент.Документ.Body.ContentEditable ="false";
	Элемент.Документ.Body.scroll = "yes";
КонецПроцедуры

&НаКлиенте
Процедура СписокМоихЗаявокПриАктивизацииСтроки(Элемент)
	ДокЗаявки = Элемент.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ДокЗаявки) Тогда
		Кодировка = КодировкаТекста.UTF8;
		
		ОписаниеЗаявкиHTML = ПодготовитьHTMLСтраницу(РаботаСЗаявками.ПолучитьТекстHTMLЗаявки(ДокЗаявки,Кодировка,ЭтаФорма.УникальныйИдентификатор));
	Иначе
		ОписаниеЗаявкиHTML = ПодготовитьHTMLСтраницу("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьHTMLСтраницу(ТекстHTML)
	
	//Добавим тег HTML если он отсутствует. 
	//Необходимо для корректного отображения в элементе формы.
	Если СтрЧислоВхождений(ТекстHTML,"<body") = 0 Тогда
		ЗаголовокHTML = "<html>
		|<style type='text/css'>	
  		|Body{
  		|border:0; margin: 0 0 0 5px; /* Отступ Body*/
  		|} 
		|P{
  		|border:0; margin: 5px 0 0 10px; /* Отступ P*/
  		|}
		|</style>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		//|<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|</head>
		|<body>";
		
		ПодвалHTML = "</body>
		|</html>";
		
		ТекстHTML = ЗаголовокHTML + ТекстHTML + ПодвалHTML;
	Иначе
		//Возможно у нас уже есть Body, тогда проверим тег overflow в body
		ТекстHTML = СтрЗаменить(ТекстHTML,"overflow:hidden;","");
	КонецЕсли;	
	
	Возврат ТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыбранЭлементДерева(Элемент)
	 ТекИмя = Элемент.Имя;
	 КлючСтроки = Число(Стрзаменить(ТекИмя,"ЭлементДерева_Ключ",""));
	 Если ОтображатьГруппировкуЗаявок = Ложь Тогда
	 	ТекущаяСтрокаДереваГруппировок = КлючСтроки;
		ТекСтрокаДерева = ДанныеДереваГрупп.НайтиПоИдентификатору(КлючСтроки);
		УстановитьОтборЗаявок(ТекСтрокаДерева);	
		СоответствиеОтбора = ПолучитьСоответствиеОтбораСтрокамДерева(ТекСтрокаДерева);
		УстановитьПредставлениеДереваВВидеСсылок(СоответствиеОтбора);
	Иначе
		 Элементы.ДеревоГрупп.ТекущаяСтрока = КлючСтроки;
	КонецЕслИ;	 
КонецПроцедуры

&НаКлиенте
Процедура СписокМоихЗаявокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	МассивСтрок = ПараметрыПеретаскивания.Значение;
	КоличествоКПеретаскиванию = 0;
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		Если НЕ ПолучитьРеквизитПоСсылке(ТекСтрока,"Статус") = ПредопределенноеЗначение("Справочник.СостоянияЗаявок.Отменена") Тогда
			КоличествоКПеретаскиванию = КоличествоКПеретаскиванию + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоКПеретаскиванию = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;	
КонецПроцедуры


