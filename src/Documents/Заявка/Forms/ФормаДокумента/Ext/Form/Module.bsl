&НаКлиенте
Перем ТребоватьУказанияФактВремени;

&НаКлиенте
Перем СтруктураСтрокиОценки;

&НаКлиенте
Перем СписокСтатусов;

&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Перем мТекстЗаявки;

/////////////////////////////////////////////////////////////////////////////////
//Обработчики командной панели редактора HTML

&НаКлиенте
Процедура ПолеHTMLДокументаПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
	
	Команда = Сред(Элемент.Имя, 8);
	Если УзелЭлемента.queryCommandSupported(Команда) Тогда
		УзелЭлемента.execCommand(Команда, Истина, ВыбранноеЗначение);
		ПоказатьРежимыКнопок();
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
	ЭтотОбъект.Модифицированность = ИСтина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Кнопка)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
		
	Команда = Сред(Кнопка.Имя, 8);
	Если УзелЭлемента.queryCommandSupported(Команда) Тогда
		УзелЭлемента.execCommand(Команда, Ложь);
		ПоказатьРежимыКнопок();
	КонецЕсли;
	ЭтотОбъект.Модифицированность = ИСтина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРежимыКнопок()
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
	
	Для каждого Группа Из Элементы.КоманднаяПанельКнопок.ПодчиненныеЭлементы Цикл
		Для каждого Кнопка Из Группа.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Кнопка) = тип("КнопкаФормы") Тогда
				Команда = Сред(Кнопка.Имя, 8);
				Если УзелЭлемента.queryCommandSupported(Команда) Тогда
					Попытка
						Кнопка.Пометка = УзелЭлемента.queryCommandState(Команда);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРежим(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кнопка = Элементы.Найти(Команда.Имя);
	Если Кнопка.Пометка Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступностьКнопок = Истина;
	Элементы.КомандаFormatBlock.Доступность = ДоступностьКнопок;
	Элементы.КомандаFontName.Доступность = ДоступностьКнопок;
	Элементы.КомандаFontSize.Доступность = ДоступностьКнопок;
	
	Для каждого Группа Из Элементы.КоманднаяПанельКнопок.ПодчиненныеЭлементы Цикл
		Если Группа.Имя = "ГруппаУправлениеРежимом" Тогда
			УправлятьДоступностью = Ложь;
		Иначе
			УправлятьДоступностью = Истина;
		КонецЕсли;
		
		Для каждого Кн Из Группа.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Кн) = тип("КнопкаФормы") Тогда
				Если УправлятьДоступностью Тогда
					Кн.Доступность = ДоступностьКнопок
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла; 
	
	ПредыдущийРежим = Кнопка;
	ПоказатьРежимыКнопок();
	
	ПропарситьСсылкиИзHTML(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
    		ВыбраннаяКартинка = Новый Картинка(ПутьКФайлу);
    		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершениеЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяКартинка", ВыбраннаяКартинка)), ПутьКФайлу);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыбраннаяКартинка = ДополнительныеПараметры.ВыбраннаяКартинка;
	
	
	АдресКартинки = ПоместитьВоВременноеХранилище(ВыбраннаяКартинка,ЭтотОбъект.УникальныйИдентификатор);
	
	УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
		
	УзелЭлемента.execCommand("InsertImage",false,АдресКартинки);
	
	НоваяСтрока = ТаблицаВложений.Добавить();
	НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
	НоваяСтрока.Адрес = АдресКартинки;
	
	ЭтотОбъект.Модифицированность = Истина;
	
	//РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML,ТаблицаВложений);
	
	ТекстЗаявкиHTML = РаботаСЗаявками.ПодготовитьHTMLСтраницу(Строка(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML),ТаблицаВложений);
	
	РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстЗаявкиHTML,ТаблицаВложений);
	
	ПоказатьРежимыКнопок();

КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзФайла(ПолеHTMLДокумента)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл с фотографией";
	Диалог.ПолноеИмяФайла = "";
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.Фильтр = 
	"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	+ "Формат TIFF (*.tif)|*.tif|"
	+ "Формат GIF (*.gif)|*.gif|"
	+ "Формат PNG (*.png)|*.png|"
	+ "Формат icon (*.ico)|*.ico|"
	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; // картинки
	
	Диалог.Показать(Новый ОписаниеОповещения("ВставитьКартинкуИзФайлаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		//Вставляем картинку на форму
		Попытка						
			ВыбраннаяКартинка = Новый Картинка(Диалог.ПолноеИмяФайла,Ложь);
			АдресКартинки = ПоместитьВоВременноеХранилище(ВыбраннаяКартинка,ЭтотОбъект.УникальныйИдентификатор);
			
			УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
				
			УзелЭлемента.execCommand("InsertImage",false,АдресКартинки);
			
			НоваяСтрока = ТаблицаВложений.Добавить();
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
			НоваяСтрока.Адрес = АдресКартинки;
		Исключение КонецПопытки;
		ЭтотОбъект.Модифицированность = Истина;
		
		//РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML,ТаблицаВложений);
		
		ТекстЗаявкиHTML = РаботаСЗаявками.ПодготовитьHTMLСтраницу(Строка(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML),ТаблицаВложений);
		РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстЗаявкиHTML,ТаблицаВложений);
		
		ПоказатьРежимыКнопок();
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Получим ссылку и представление
	УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
		
	ТекЭлемент = УзелЭлемента.activeElement;
		
	ФормаГиперСсылки = ПолучитьФорму("ОбщаяФорма.ВыборГиперссылки");
	ГиперСсылка = "";
	ВыделенныйТекстHTML = ТекЭлемент.innerHTML;
	СимволНачала = СтрНайти(ВыделенныйТекстHTML,"href=");
	Если СимволНачала <> 0 Тогда
		Для Инд = СимволНачала+5 По СтрДлина(ВыделенныйТекстHTML) Цикл
			ТекСимвол = Сред(ВыделенныйТекстHTML,Инд,1);
			Если ТекСимвол <> ">" Тогда
				ГиперСсылка = ГиперСсылка+ТекСимвол;
			Иначе
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	ГиперСсылка = СтрЗаменить(ГиперСсылка,"""","");
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ГиперСсылка",ГиперСсылка);
	ПараметрыФормы.Вставить("Представление",ТекЭлемент.innerText);
	ПараметрыФормы.Вставить("ДоступностьПредставления",Истина);
	ПараметрыФормы.Вставить("СсылкаНаОбъект",Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьГиперссылкуЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборГиперссылки",ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылкуЗавершение(СтруктураВозврата,ДополнительныеПараметры) экспорт
	УзелЭлемента = Элементы.ПолеHTMLДокумента.Документ;
		
	ТекЭлемент = УзелЭлемента.activeElement;

	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		
		Представление  = СтруктураВозврата.Представление;
		Гиперссылка = НРег(СтруктураВозврата.Гиперссылка);
		
		УзелЭлемента.execCommand("CreateLink", Ложь, Гиперссылка);
		
		//после установки ссылки у нас остается выделенный текст представления
		//В него поместим новое представление
		Попытка
			ТекЭлемент = УзелЭлемента.activeElement;
			ВыделенныйТекстHTML = ТекЭлемент.innerHTML;
			СимволНачала = СтрНайти(ВыделенныйТекстHTML,"href=");
			НомерНачалаПредставления = 0;
			НомерОкончанияПредставления = 0;
			Если СимволНачала <> 0 Тогда
				Для Инд = СимволНачала+5 По СтрДлина(ВыделенныйТекстHTML) Цикл
					ТекСимвол = Сред(ВыделенныйТекстHTML,Инд,1);
					Если ТекСимвол = ">" Тогда
						НомерНачалаПредставления = Инд;
					ИначеЕсли ТекСимвол = "<" Тогда
						НомерОкончанияПредставления = Инд;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			ТекЭлемент.innerText = Представление;
			ТекЭлемент.innerHTML = Сред(ВыделенныйТекстHTML,1,НомерНачалаПредставления)+Представление+Сред(ВыделенныйТекстHTML,НомерОкончанияПредставления);	
		Исключение
			
		КонецПопытки;
		
		ЭтотОбъект.Модифицированность = ИСтина;
		
	КонецЕсли;
	ПоказатьРежимыКнопок();
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ИсточникВызова", Команда.Имя);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЦветаЗавершение", ЭтотОбъект, Команда);
	ОткрытьФорму("ОбщаяФорма.ВыборЦвета", , ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаЗавершение(Цвет, Команда)  Экспорт
	
	Если Цвет <> Неопределено Тогда
		Кнопка = Сред(Команда.Имя, 8);
		Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Кнопка) Тогда
			Элементы.ПолеHTMLДокумента.Документ.execCommand(Кнопка, Ложь, "" + БазаЗнанийКлиентСервер.ПеревестиИз10(Цвет.Красный) + БазаЗнанийКлиентСервер.ПеревестиИз10(Цвет.Зеленый) + БазаЗнанийКлиентСервер.ПеревестиИз10(Цвет.Синий));
		КонецЕсли;
		ЭтотОбъект.Модифицированность = ИСтина;
		
	КонецЕсли;
	ПоказатьРежимыКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьHTML(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПропарситьСсылкиИзHTML(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Процедуры модуля формы сервер
// 
&НаСервере
Процедура ПропарситьСсылкиИзHTML(Текст)
	РаботаСЗаявками.ПропарситьСсылкиИзHTML(Текст,ТаблицаВложений);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = ТекущаяДата();
				
		ВводНаОсновании =  Параметры.Свойство("основание") И ЗначениеЗаполнено(Параметры.основание);
		Если НЕ ВводНаОсновании	Тогда
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям") Тогда
				Объект.Организация =ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиПрограммы", 
				"ОрганизацияПоУмолчанию",
				Справочники.Организации.ОрганизацияПоУмолчанию);
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоКонтрагентам") Тогда
				Объект.Контрагент = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиПрограммы", 
				"ОсновнойКонтрагент",
				Справочники.Контрагенты.НашаОрганизация);
				ИспользоватьУчетПоКонтрагентам = Истина;
			КонецЕсли;

			Объект.ТекущийИсполнитель = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы", 
			"ОсновнойИсполнитель",
			Справочники.Пользователи.РаспределительЗаявок);
						
			Объект.Постановщик = ПараметрыСеанса.ТекущийПользователь;
			
			ПроектПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиРаботыСПроектами",
			"ПроектПоУмолчанию",Справочники.Проекты.ПустаяСсылка());
			
			Если ПроектПоУмолчанию.Заказчик <> Объект.Контрагент Тогда
				Объект.Проект = Справочники.Проекты.ПустаяСсылка();
			Иначе
				Объект.Проект = ПроектПоУмолчанию;
			КонецЕсли;	
		Иначе			
			Если Не ЗначениеЗаполнено(Объект.ТекущийИсполнитель) Тогда
				Объект.ТекущийИсполнитель = Справочники.Пользователи.РаспределительЗаявок;
			КонецЕсли;	
		КонецЕсли;
		
		Объект.ТипЗаявки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ОсновнойТипЗаявки",
		Справочники.ТипыЗаявок.ПустаяСсылка());
		
		Объект.Статус = Справочники.СостоянияЗаявок.Зарегистрирована;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям") Тогда
		ИспользоватьУчетПоОрганизациям = Истина;
	Иначе
		ИспользоватьУчетПоОрганизациям = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоКонтрагентам") Тогда
		ИспользоватьУчетПоКонтрагентам = Истина;
	Иначе
		ИспользоватьУчетПоКонтрагентам = Ложь;
	КонецЕсли;

	ОбновитьПараметрыТаблицыФайлов();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,,"СтраницаДополнительныеРеквизиты");
	// Конец СтандартныеПодсистемы.Свойства
	
	ИдКартинкиДополнения = Новый УникальныйИдентификатор();
	ИдКартинкиРешения = Новый УникальныйИдентификатор();
	ИдКартинкиПередачи = Новый УникальныйИдентификатор();
	ИдКартинкиУдаления = Новый УникальныйИдентификатор();
	ИдКартинкиРедактирования = Новый УникальныйИдентификатор();
	ИдКартинкиСостояния = Новый УникальныйИдентификатор();
	ИдКартинкиОбъединения = Новый УникальныйИдентификатор(); 

	АдресКартинкиДополнения = Строка(ИдКартинкиДополнения);
	АдресКартинкиРешения = Строка(ИдКартинкиРешения);
	АдресКартинкиПередачи = Строка(ИдКартинкиПередачи);
	АдресКартинкиУдаления = Строка(ИдКартинкиУдаления);
	АдресКартинкиРедактирования = Строка(ИдКартинкиРедактирования);
	АдресКартинкиСостояния = Строка(ИдКартинкиСостояния);
	АдресКартинкиОбъединения = Строка(ИдКартинкиОбъединения);
	
	ОбновитьТаблицуРаботПоЗаявке();
	
	ПрочитатьТаблицуВложений();
	ПрочитатьТекстЗаявкиИзОбъекта();
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ОпцияВестиУчетТрудозатрат,
	Объект.Ссылка,
	ВидыРабот,
	СпособУказанияВремени,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.УказатьТрудозатраты);
	
	НастройкиУчета = УчетВремени.ПолучитьПерсональныеНастройкиУчетаВремениСервер();
	УказыватьТрудозатратыПриЗаписи = НастройкиУчета.УказыватьТрудозатратыПриЗаписи;
	
	Если ПолучитьФункциональнуюОпцию("ВключитьРежимОтладкиРедактораHTML") Тогда
		ВключитьРежимОтладкиРедактораHTML = Истина;
	Иначе
		ВключитьРежимОтладкиРедактораHTML = Ложь;
	КонецЕсли;
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ТаблицаПодписчиков.Параметры.УстановитьЗначениеПараметра("Заявка", Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыТаблицыФайлов()
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.ТекущийПользователь());
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	//Очистим таблицу вложений переданных из модуля объекта
	Для Каждого Стр Из ТекущийОбъект.ТаблицаВложенийОбъекта Цикл
		Если Не ЭтоАдресВременногоХранилища(Стр.Адрес) Тогда
			Продолжить;
		КонецЕсли;

		УдалитьИзВременногоХранилища(Стр.Адрес);
	КонецЦикла;	
	ТекущийОбъект.ТаблицаВложенийОбъекта.Очистить();
	
	ТекущийОбъект.МодульОбъектаПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекстHTML = ТекущийОбъект.ОписаниеЗаявкиHTML;
	Для Каждого Стр Из ТекущийОбъект.ТекстыДополнений Цикл
		ТекстHTML = ТекстHTML + Символы.ПС + Стр.ОписаниеДополненияHTML;
	КонецЦикла;
	
	ТекущийОбъект.СохранитьОбъектыHTML(ТекстHTML,ТаблицаВложений,ТекущийОбъект.Ссылка);
	
	ТекущийОбъект.ЗаписатьДанныеОПлановомВремени(ЭтотОбъект.ТаблицаОценки.Выгрузить());
			
КонецПроцедуры

&НаСервере
Функция ОбъединитьЗаявкуСервер(ГлЗаявка)
	Объект.Статус = Справочники.СостоянияЗаявок.Объединена;
	Объект.ГлавнаяЗаявка = ГлЗаявка;
	Попытка
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		ТекОбъект.Записать();;
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Возврат истина;
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// Процедуры модуля формы клиент
// 

&НаКлиенте
Процедура ТаблицаПодписчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекстВопроса = "Перед созданием подписчика документ нужно записать.Продолжить?";
	Если ЭтаФорма.Модифицированность или ЭтоНовыйДокумент() Тогда
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
		Попытка
			Записать();
		Исключение 
			Возврат;
		КонецПопытки;	
	КонецЕсли;		
	Если ЭтоНовыйДокумент() Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("РегистрСведений.ПодписчикиЗаявок.ФормаЗаписи");
	Форма.Запись.Заявка = Объект.Ссылка;
	Форма.Открыть();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗаявку(Команда)
	ТекстВопроса = "Перед объединением заявок документ нужно записать.Продолжить?";
	Если ЭтаФорма.Модифицированность или ЭтоНовыйДокумент() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбъединитьЗаявкуЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
        Возврат;	
	КонецЕсли;		
	
	ОбъединитьЗаявкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗаявкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
		Оповестить("ЗаписаноИзменениеЗаявки",,Объект.Ссылка);
	Исключение 
		Возврат;
	КонецПопытки;	
	
	ОбъединитьЗаявкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗаявкуФрагмент()
	
	Перем ГлЗаявка;
	
	ГлЗаявка = Неопределено;
	
	
	ОткрытьФорму("Документ.Заявка.ФормаВыбора",,ЭтаФорма,,,, Новый ОписаниеОповещения("ОбъединитьЗаявкуФрагментЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗаявкуФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Выберем заявку для объеинения
	ГлЗаявка = Результат;
	
	Если Не ЗначениеЗаполнено(ГлЗаявка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ГлЗаявка = Объект.Ссылка Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Заявка не может быть объединена с собой!";
		Сообщение.Поле = "ГлавнаяЗаявка";
		Сообщение.УстановитьДанные(Объект);
		
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	ОписаниеОшибки = "";	
	Если НЕ ПроверитьВозможностьОбъединенияСервер(ГлЗаявка,ОписаниеОшибки) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОписаниеОшибки;
		Сообщение.Поле = "ГлавнаяЗаявка";
		Сообщение.УстановитьДанные(Объект);
		
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	ТекСтатусЗаявки = Объект.Статус;
	
	СтатусОбъединения = ОбъединитьЗаявкуСервер(ГлЗаявка);
	
	Если СтатусОбъединения = Ложь Тогда
		Объект.Статус = ТекСтатусЗаявки;
		Объект.ГлавнаяЗаявка = ПредопределенноеЗначение("Документ.Заявка.ПустаяСсылка");
		УстановитьВидимость();
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	
	Оповестить("ЗаписаноИзменениеЗаявки",,Объект.Ссылка);
	
	ЭтаФорма.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуОценки(Команда)
	ЗаполнитьТаблицуОценок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиПередНачаломИзменения(Элемент, Отказ)
	СтруктураСтрокиОценки = Новый Структура();
	СтруктураСтрокиОценки.Вставить("Период");
	СтруктураСтрокиОценки.Вставить("Исполнитель");
	СтруктураСтрокиОценки.Вставить("Оценка");
	ЗаполнитьЗначенияСвойств(СтруктураСтрокиОценки,Элемент.Текущиеданные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		ТекСтрока.Период = ТекущаяДата();
		ТекСтрока.ПричинаИзменения  = "";
		ТекСтрока.Ответственный  = неопределено;
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока Тогда
		
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Период");
		СтруктураСтроки.Вставить("Исполнитель");
		СтруктураСтроки.Вставить("Оценка");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,Элемент.Текущиеданные);
		СтрокаИзменена = Ложь;
		Для каждого КлючИЗначение из СтруктураСтрокиОценки Цикл
			
			Если КлючИЗначение.Значение <> СтруктураСтроки[КлючИЗначение.Ключ] Тогда
				СтрокаИзменена = истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаИзменена Тогда
			ТекСтрока.Период = ТекущаяДата();
			ТекСтрока.ПричинаИзменения  = "";
			ТекСтрока.Ответственный  = неопределено;

			Если НачалоДня(ТекСтрока.Период) <> НачалоДня(СтруктураСтрокиОценки.Период)  Тогда
				ТекСтрока.СтрокаИзменена = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	//РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	//Если НЕ РасширениеПодключено Тогда
	//	ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для работы с заявками необходимо установить расширение работы с файлами.'"));
	//	Отказ = Истина;
	//КонецЕсли;
	
	РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстЗаявкиHTML,ТаблицаВложений);
	
	//Готовим список заголовков
	Список = Элементы.КомандаformatBlock.СписокВыбора;
	Список.Добавить("<p>", "Обычный");
	Список.Добавить("<h1>", "Заголовок 1");
	Список.Добавить("<h2>", "Заголовок 2");
	Список.Добавить("<h3>", "Заголовок 3");
	Список.Добавить("<h4>", "Заголовок 4");
	Список.Добавить("<h5>", "Заголовок 5");
	Список.Добавить("<h6>", "Заголовок 6");
	Список.Добавить("<pre>", "Форматированный");
	Список.Добавить("<address>", "Адрес");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	СтилиТекста = ТекЭлемент.Значение;
	
	// Заполнение списка шрифтов
	Список = Элементы.КомандаFontName.СписокВыбора;
	Список.Добавить("Arial");
	Список.Добавить("Arial Black");
	Список.Добавить("Arial Narrow");
	Список.Добавить("Comic Sans MS");
	Список.Добавить("Courier New");
	Список.Добавить("System");
	Список.Добавить("Tahoma");
	Список.Добавить("Times New Roman");
	Список.Добавить("Verdana");
	Список.Добавить("Wingdings");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	ИмяШрифта = ТекЭлемент.Значение;
	
	// Заполнение списка размеров
	Список = Элементы.КомандаFontSize.СписокВыбора;
	Для Ном = 1 По 14 Цикл
		Список.Добавить(Ном);
	КонецЦикла;
	ТекЭлемент = Список.НайтиПоИдентификатору(2);
	РазмерыШрифта = ТекЭлемент.Значение;
	
	ЗаполнитьТаблицуОценок();
	
	УстановитьВидимость();
	
	СписокСтатусов = ПолучитьСписокСтатусовСервер(Объект.Постановщик,Объект.ТекущийИсполнитель,Объект.Статус);
	
	ВыполняетсяЗакрытие = Ложь;
	
	Элементы.ГруппаФайлы.Заголовок = ПолучитьЗаголовок("Файлы",Элементы.ГруппаФайлы.Заголовок);
	Элементы.ГруппаПодписчики.Заголовок = ПолучитьЗаголовок("Подписчики",Элементы.ГруппаПодписчики.Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПроверитьЗаполнениеТЧОценки(Отказ);
	
	Если не Отказ Тогда
		Если ЭтоНовыйДокумент() И Элементы.ПолеHTMLДокумента.Документ <> Неопределено Тогда
			ТекстHTML = Элементы.ПолеHTMLДокумента.Документ.body.InnerHTML;
			
			ПропарситьСсылкиИзHTML(ТекстHTML);
			
			#Если НЕ ВебКлиент Тогда
				//На случай если текст скопировали из другого источника, скачаем картинки из этого источника и поменяем ссылки на них
				ПропарситьКартинкиИзHTML(ТекстHTML);
			#КонецЕсли
		
			Объект.ОписаниеЗаявкиHTML = ТекстHTML;		
		КонецЕсли;
		
		ТребоватьУказанияФактВремени = ЭтотОбъект.Модифицированность и Не ЭтоНовыйДокумент();
	КонецЕслИ;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если (Не ДобавленВОтчетТрудозатрат И УказыватьТрудозатратыПриЗаписи 
		И ОпцияВестиУчетТрудозатрат  И ТребоватьУказанияФактВремени = Истина) Тогда
		УказатьТрудозатраты(Неопределено);
	КонецЕсли;
	      
	ЗаполнитьТаблицуОценок();

	ПрочитатьТаблицуВложений();
	ПрочитатьТекстЗаявкиИзОбъекта();

	Оповестить("ЗаписаноИзменениеЗаявки",,Объект.Ссылка);
	
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы И ЭтотОбъект.Модифицированность  = Истина Тогда 
		ТекстПредупреждения = "Данные по заявке были изменены! Изменения не будут сохранены!"; 
		Отказ = Истина;
	ИначеЕсли Не ВыполняетсяЗакрытие = Истина И ЭтотОбъект.Модифицированность  = Истина Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение",ЭтотОбъект),"Данные были изменены. Сохранить изменения?",РежимДиалогаВопрос.ДаНетОтмена);
	Иначе	
		Если ВключенХронометраж Тогда
			УказатьТрудозатраты(Неопределено);
		КонецЕсли;
	
		Если ЗавершитьРаботуСистемы = Истина И ВыполняетсяЗакрытие = Истина Тогда
			ВыполняетсяЗакрытие = Ложь;
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = истина;
		Оповестить("ЗакрытаФормаЗаявки",Истина,Объект.Ссылка);
		Записать();
		Закрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Оповестить("ЗакрытаФормаЗаявки",Ложь,Объект.Ссылка);
		ЭтотОбъект.Модифицированность = Ложь;  
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ЗакрытаФормаЗаявки",Ложь,Объект.Ссылка);
	ОтключитьОбработчикОжидания("ПроверитьИзменениеТекстаЗаявки");
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Обработчики событий  формы
// 
&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекЭлем = Неопределено;

	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СтатусНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), СписокСтатусов,Элемент,?(СписокСтатусов.НайтиПоЗначению(Объект.Статус)=Неопределено,0,СписокСтатусов.Индекс(СписокСтатусов.НайтиПоЗначению(Объект.Статус))));	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	ТекЭлем = ВыбранныйЭлемент;	
	Если ТекЭлем <> Неопределено Тогда
		ЭтаФорма.Модифицированность = Истина;

		Объект.Статус = ТекЭлем.Значение;
		СтатусПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если Объект.Статус = ПредопределенноеЗначение("Справочник.СостоянияЗаявок.Выполнена") Тогда
		Объект.ЗаявкаЗакрыта = Истина;
		Объект.ДатаЗакрытия = ТекущаяДата();
		Объект.Прогресс = 100;
	Иначе
		Объект.ЗаявкаЗакрыта = Ложь;
		Объект.ДатаЗакрытия = Дата(1,1,1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	УстановитьВидимость();
	ЗаполнитьПроектПоКонтрагенту();
	ЗаполнитьПроектнуюЗадачуПоПроекту();
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ФН = Новый НастройкиКомпоновкиДанных;
	Эл = ФН.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заказчик");
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Эл.ПравоеЗначение = Объект.Контрагент;
	Эл.Использование = Истина;
	Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФН);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Проект);
 	ФормаВыбора = ПолучитьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы,Элемент);
	
	ФормаВыбора.Элементы.Список.Отображение  = ОтображениеТаблицы.Список;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура РаботыПоЗаявкеПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.РаботыПоЗаявке.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ИдДополнения = ТекСтрока.ИдДополнения;
		Элементы.РаботыПоЗаявкеУдалить.Доступность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПоЗаявкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботыПоЗаявкеИзменить("");
КонецПроцедуры

&НаКлиенте
Процедура РаботыПоЗаявкеИзменить(Команда)
	ТекСтрока = Элементы.РаботыПоЗаявке.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ИдДополнения = ТекСтрока.ИдДополнения;
		РедактироватьЧастьЗаявки(ИдДополнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботыПоЗаявкеУдалить(Команда)
	ТекСтрока = Элементы.РаботыПоЗаявке.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ИдДополнения = ТекСтрока.ИдДополнения;
		УдалитьЧастьЗаявки(ИдДополнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗаявкиПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.ТекущийИсполнитель,,,,
	//Неопределено, 
	//Неопределено,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПостановщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.Постановщик,,,,
	//Неопределено, 
	//Неопределено,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаЗакрытаПриИзменении(Элемент)
	
	//АбисСофт-Кострицын Олег-Старт  7 сентября 2014 г.
	Если Объект.ЗаявкаЗакрыта = Истина Тогда   //Заявку пытаемся закрыть
		Статус = ПроверитьВозможностьЗакрытияЗаявки();
		Если Статус = Ложь Тогда
			Объект.ЗаявкаЗакрыта = Ложь;
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаявкаЗакрытаПриИзмененииЗавершение", ЭтотОбъект), "Закрытие заявки не возможно!");
            Возврат;
		КонецЕсли;	
	КонецЕсли;	
	//АбисСофт-Кострицын Олег-финиш  7 сентября 2014 г.
	
	ЗаявкаЗакрытаПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаЗакрытаПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ЗаявкаЗакрытаПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаЗакрытаПриИзмененииФрагмент()
	
	УстановитьВидимость();
	Если Объект.ЗаявкаЗакрыта = Истина Тогда
		Объект.ДатаЗакрытия = ТекущаяДата();
	Иначе
		Объект.ДатаЗакрытия = Дата(1,1,1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗаявку(Команда)
	Если Объект.Статус = ПредопределенноеЗначение("Справочник.СостоянияЗаявок.Отменена") ИЛИ
		Объект.Статус = ПредопределенноеЗначение("Справочник.СостоянияЗаявок.Выполнена") Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПередатьЗаявкуПредупреждение", ЭтотОбъект), "Нельзя передавать заявки со статусом ""Закрыта"" и ""Отменена"" !");
		Возврат;
	КонецЕсли;
	
	СписокПользователей = РаботаСЗаявками.СформироватьДанныеВыбораИсполнителя(Объект.Проект,Объект.ПроектнаяЗадача);
	
	//Дополним данными по постановщику
	Если ВестиУчетПоПроектам = Истина Тогда
		СписокПользователей.Добавить(Неопределено,"---------------------------------");
	КонецЕсли;
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Роль","");
	СтруктураДанных.Вставить("Пользователь",Объект.Постановщик);
	СписокПользователей.Добавить(СтруктураДанных,"Постановщик ("+Строка(Объект.Постановщик)+")");
	
	
	ПоследнийИсполнитель = ПолучитьПоследнегоИсполнителяСервер(Объект.Ссылка);

	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Роль","");
	СтруктураДанных.Вставить("Пользователь",ПоследнийИсполнитель);
	Если Значениезаполнено(ПоследнийИсполнитель) Тогда
		СписокПользователей.Добавить(СтруктураДанных,"Пред. исполнитель ("+Строка(ПоследнийИсполнитель)+")");
	КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Роль","");
	СтруктураДанных.Вставить("Пользователь",ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	СписокПользователей.Добавить(СтруктураДанных,"<Выбрать из справочника>");
	
	ВыбранноеЗначение = Неопределено;

	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ПередатьЗаявкуЗавершение", ЭтотОбъект), СписокПользователей,Элементы.ПередатьЗаявку);	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗаявкуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ВыбранныйЭлемент;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если ВыбранноеЗначение.Значение <> Неопределено И Не ЗначениеЗаполнено(ВыбранноеЗначение.Значение.Пользователь)  Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.Пользователи"));
			ОписаниеТиповПользователи = Новый ОписаниеТипов(Массив);
			ВыбранныйПользователь = Неопределено;
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьПользователяДляПередачиЗаявки", ЭтотОбъект, Новый Структура("ВыбранныйПользователь", ВыбранныйПользователь)), ВыбранныйПользователь, "Выберите пользователя", ОписаниеТиповПользователи);
		ИначеЕсли ВыбранноеЗначение.Значение = Неопределено  Тогда	
			//Пользователь нажал на разделитель
		Иначе
			ПередатьЗаявкуПользователю(ВыбранноеЗначение.Значение.Пользователь,ВыбранноеЗначение.Значение.Роль,ВыбранноеЗначение.Представление);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователяДляПередачиЗаявки(Значение, ДополнительныеПараметры) Экспорт
	
	ВыбранныйПользователь = ?(Значение = Неопределено, ДополнительныеПараметры.ВыбранныйПользователь, Значение);
	
	
	Если Не (Значение <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранныйПользователь) Тогда
		Возврат;
	КонецЕсли;	
	
	ПередатьЗаявкуПользователю(ВыбранныйПользователь,"",Строка(ВыбранныйПользователь));

КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗаявкуПредупреждение(ДополнительныеПараметры) Экспорт
	 Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьЗаявкуИзОбъекта(Команда)
	ПрочитатьТекстЗаявкиИзОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = РаботаСЗаявками.СформироватьДанныеВыбораИсполнителя(Объект.Проект,Объект.ПроектнаяЗадача,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	УстановитьВидимость();
	ЗаполнитьПроектнуюЗадачуПоПроекту();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстHTML(Команда)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстЗаявкиHTML);
	ТекстДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКЗаявке(Команда)
	ТекстВопроса = "Перед созданием дополнения заявку нужно записать.Продолжить?";
	Если ЭтотОбъект.Модифицированность или ЭтоНовыйДокумент() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьКЗаявкеЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
        Возврат;	
	КонецЕсли;		
	ДобавитьКЗаявкеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКЗаявкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	Попытка
		Записать();
	Исключение 
		Возврат;
	КонецПопытки;	
	
	ДобавитьКЗаявкеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКЗаявкеФрагмент()
	
	Перем СтруктураПараметров;
	
	Если не ЭтоНовыйДокумент() Тогда		
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстHTML","");
		СтруктураПараметров.Вставить("ТаблицаВложений",Неопределено);
		
		ОткрытьДополнениеКЗаявке(СтруктураПараметров,ПредопределенноеЗначение("Перечисление.ВидыСобытийПоЗаявке.Дополнение"));	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	//НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
	//ДатаНачалаХронометража, ВидыРабот);
	
	НуженДиалог = ВключенХронометраж;
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
		
		//На сервере дата может отличаться от клиентской, переустанавливаем дату начала хронометража на клиентское время
		ДатаНачалаХронометража = ТекущаяДата();
		
	Иначе
		
		ТекстВопроса = "Документ не записан. Записать ?";
		Если ЭтотОбъект.Модифицированность ИЛИ ЭтоНовыйДокумент() Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект), ТекстВопроса,режимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;	
		ПереключитьХронометражФрагмент();
 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьХронометражФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражФрагмент()
	
	Перем ДатаОтчета;
	
	ДатаКонцаХронометража = ТекущаяДата();
	ДатаОтчета = ТекущаяДата();
	ВключенХронометраж = Ложь;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
	ДатаОтчета,
	ВключенХронометраж, 
	ДатаНачалаХронометража, 
	ДатаКонцаХронометража, 
	ВидыРабот, 
	Объект.Ссылка,
	СпособУказанияВремени,
	ЭтотОбъект.Элементы.ПереключитьХронометраж,
	Объект.ЗаявкаЗакрыта);
	
	ОтключитьХронометражСервер();

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	ТекстВопроса = "Документ не записан. Записать ?";
	Если ЭтотОбъект.Модифицированность ИЛИ ЭтоНовыйДокумент() Тогда
		Если Вопрос(ТекстВопроса,режимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Записать();
	
	ДатаОтчета = ТекущаяДата();
	ДатаКонцаХронометража = ТекущаяДата();
	ВключенХронометраж = Ложь;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
	ДатаОтчета,
	ВключенХронометраж, 
	ДатаНачалаХронометража, 
	ДатаКонцаХронометража, 
	ВидыРабот, 
	Объект.Ссылка,
	СпособУказанияВремени,
	ЭтотОбъект.Элементы.ПереключитьХронометраж,
	Объект.ЗаявкаЗакрыта);
	
	ДобавленВОтчетТрудозатрат = Истина;	
			
	ОтключитьХронометражСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ПоказатьРежимыКнопок();
	Если ТипЗнч(ДанныеСобытия) = Тип("ФиксированнаяСтруктура") Тогда
		НажатаяСсылка = НРег(ДанныеСобытия.Href);
		СтандартнаяОбработка = Ложь;
		Если НажатаяСсылка <> Неопределено Тогда
			Если Лев(НажатаяСсылка, 3) = "e1c" И Найти(НажатаяСсылка,"e1cib/data/") <> 0 Тогда
				ПерейтиПоНавигационнойСсылке(НажатаяСсылка); 				
			ИначеЕсли Найти(НажатаяСсылка,"deleteaddition:") <> 0 Тогда 	
				Идентификатор = Сред(НажатаяСсылка, 16);
				УдалитьЧастьЗаявки(Идентификатор);	
			ИначеЕсли Найти(НажатаяСсылка,"ticket:") <> 0 Тогда
				ОткрытьЗаявкуПоСсылке(НажатаяСсылка);	
			ИначеЕсли Найти(НажатаяСсылка,"addition:") <> 0 Тогда 	
				Идентификатор = Сред(НажатаяСсылка, 10);
				РедактироватьЧастьЗаявки(Идентификатор);
			ИначеЕсли Лев(НажатаяСсылка, 8) = "article:" Тогда
				НавигационнаяСсылка_article(НажатаяСсылка);	
			ИначеЕсли Лев(НажатаяСсылка, 8) = "fileint:" Тогда
				НавигационнаяСсылка_fileint(НажатаяСсылка);	
			ИначеЕсли Лев(НажатаяСсылка, 9) = "filebase:" Тогда
				НавигационнаяСсылка_filebase(НажатаяСсылка);	
			ИначеЕсли Найти(НажатаяСсылка,"http") <> 0 Тогда
				НачатьЗапускПриложения(Новый ОписаниеОповещения("ПолеHTMLДокументаПриНажатииЗавершение", ЭтотОбъект,), НажатаяСсылка); 				
			ИначеЕсли Найти(НажатаяСсылка,"javascript:") <> 0 Тогда
				СтандартнаяОбработка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатииЗавершение(КодВозврата,ДополнительныеПараметры)  экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	Пока Элемент.Документ.readyState <> "complete" Цикл
		//Анализируем когда документ загрузится
	КонецЦикла; 
	
	ЭтоНовый = ЭтоНовыйДокумент();
	
	Элемент.Документ.Body.ContentEditable =?(ЭтоНовый,"true","false");
	Элемент.Документ.Body.scroll = "yes";
	
	мТекстЗаявки = Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML;
	
	ПодключитьОбработчикОжидания("ПроверитьИзменениеТекстаЗаявки",1,Ложь);

	Если ТипЗнч(Элемент.Документ) = Тип("ВнешнийОбъект") Тогда //При запуске в веб клиенте отключим не работающий функционал
		УстановитьВидимость();
	КонецЕсли;
	
	Wsh = Новый COMОбъект("Wscript.shell");
	Wsh.SendKeys("(^+Р)");
	Wsh.SendKeys("(^+H)");

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Служебные процедуры клиент
//

&НаКлиенте
Процедура ПропарситьКартинкиИзHTML(ТекстHTML);
	МассивСсылок = Новый Массив();
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ПостроительDOM = Новый ПостроительDOM;
	
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);		
	Для Каждого ДанныеКартинки из ДокументHTML.Картинки Цикл
		СсылкаНаКартинку = ДанныеКартинки.src;
		Если Найти(СсылкаНаКартинку,"http:") <> 0 ИЛИ Найти(СсылкаНаКартинку,"https:") <> 0 Тогда
			МассивСсылок.Добавить(СсылкаНаКартинку);
		КонецЕсли;
	КонецЦикла;	
	
	Если МассивСсылок.Количество() > 0 Тогда
		КаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		
		Если Не ЗначениеЗаполнено(КаталогПользователя) Тогда
			Сообщить("Не заполнен основной каталог пользователя для временных файлов!");
			Возврат;
		КонецЕслИ;
		
		СоответствиеВложений = ПолучитьВложенияНаКлиенте(МассивСсылок,КаталогПользователя);
		ТекстHTML = ЗаменитьСсылкиНаВложения(ТекстHTML,СоответствиеВложений)
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВложенияНаКлиенте(МассивСсылок,КаталогПользователя);
	
	СоответствиеВложений = Новый Соответствие();
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат СоответствиеВложений;
	КонецЕсли;	
	
	КаталогПользователя = КаталогВременныхФайлов();
	
	//Создадим каталог для картинок 	
	ИмяКаталога = КаталогПользователя + "ImgSite";
	
	Если НайтиФайлы(ИмяКаталога).Количество() = 0 Тогда 
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;	
	
	Инд = 0;	
	Для Каждого СсылкаНаКартинку Из  МассивСсылок Цикл
		
		ИмяФайлаКартинки = БазаЗнанийКлиентСервер.СохранитьКартинкуСайта(ИмяКаталога,СсылкаНаКартинку,Инд);
		Если ИмяФайлаКартинки = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбраннаяКартинка = Новый Картинка(ИмяФайлаКартинки,Ложь);
		АдресКартинки = ПоместитьВоВременноеХранилище(ВыбраннаяКартинка,ЭтотОбъект.УникальныйИдентификатор);
		
		//Пытаемся прочитать картинку. Если не получится - значит картинка "битая"
		Попытка 
			ВыбраннаяКартинка.Преобразовать(ФорматКартинки.PNG);
		Исключение
			Продолжить;
		КонецПопытки;	
		
		СоответствиеВложений.Вставить(АдресКартинки,СсылкаНаКартинку);		
		Инд = Инд + 1;
	КонецЦикла;
	УдалитьФайлы(ИмяКаталога);
	Возврат СоответствиеВложений;
КонецФункции

&НаКлиенте
Функция ЗаменитьСсылкиНаВложения(ТекстHTMLВход,СоответствиеВложений)
	ТекстHTML = ТекстHTMLВход;
	Для Каждого КлючИЗначение Из СоответствиеВложений Цикл
		СсылкаНаКартинку = КлючИЗначение.Значение;
		АдресКартинки = КлючИЗначение.Ключ;
		
		НоваяСтрока = ТаблицаВложений.Добавить();
		НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
		НоваяСтрока.Адрес = АдресКартинки;
		
		ТекстHTML =СтрЗаменить(ТекстHTML,СсылкаНаКартинку,АдресКартинки);
	КонецЦикла;
	
	Возврат ТекстHTML;
КонецФункции

&НаКлиенте
Процедура ПроверитьИзменениеТекстаЗаявки()
	Если ЭтаФорма.Модифицированность = Истина Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийТекстЗаявки = Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML;
	Если мТекстЗаявки <> ТекущийТекстЗаявки Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеТЧОценки(Отказ)
	Отказ = ПроверитьДублиТЧОценокСервер();
	Если Отказ Тогда
		ПоказатьПредупреждение(Неопределено,"В таблице оценок работ присутствуют дубли строк!");
		Возврат;
	КонецЕсли;
	
	//Проверим реквизиты
	Инд = 1;
	Для Каждого Стр Из ЭтотОбъект.ТаблицаОценки Цикл
		Если не Отказ И Не ЗначениеЗаполнено(Стр.Исполнитель) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнен исполнитель в строке "+Инд+" !";
			Сообщение.Поле = "ТаблицаОценки["+(Инд-1)+"].Исполнитель";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;	
		
		//Проверим причину
		Если не Отказ И Стр.СтрокаИзменена И не ЗначениеЗаполнено(Стр.ПричинаИзменения) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнена причина изменения в строке "+Инд+" !";
			Сообщение.Поле = "ТаблицаОценки["+(Инд-1)+"].ПричинаИзменения";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Функция ОткрытьДополнениеКЗаявке(СтруктураПараметров,ТипДополнения)  		
	Если ТипДополнения = ПредопределенноеЗначение("Перечисление.ВидыСобытийПоЗаявке.Передача") Тогда
		ОткрыватьФорму = СтруктураПараметров.ОткрыватьФормуДополнения;
	Иначе
		ОткрыватьФорму = истина;
	КонецЕслИ;
	
	ПараметрыПередачи = Новый Структура();
	ПараметрыПередачи.Вставить("СтруктураПараметров",СтруктураПараметров);
	ПараметрыПередачи.Вставить("ТипДополнения",ТипДополнения);
	
	Если ОткрыватьФорму Тогда	
		//АдресПередачи = ПоместитьВоВременноеХранилище(СтруктураПараметров,ЭтотОбъект.УникальныйИдентификатор);
		//ФормаДополнения = ПолучитьФорму("ОбщаяФорма.ФормаДополненияКЗаявке",,ЭтаФорма,"Передача");
		//ФормаДополнения.АдресВходящихДанных = АдресПередачи;
		//ФормаДополнения.ИдФормыРодителя = ЭтотОбъект.УникальныйИдентификатор;
		//ФормаДополнения.СсылкаНаОбъект = Объект.Ссылка;
		//АдресВозврата = ФормаДополнения.ОткрытьМодально();
		ЭтотОбъект.Модифицированность = Истина;
		
		АдресПередачи = ПоместитьВоВременноеХранилище(СтруктураПараметров,ЭтотОбъект.УникальныйИдентификатор);

		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Заголовок",?(ТипДополнения=ПредопределенноеЗначение("Перечисление.ВидыСобытийПоЗаявке.Дополнение"),?(СтруктураПараметров.Свойство("ИдентификаторСтроки"),"Редактирование ответа к заявке №","Новый ответ к заявке №"),?(СтруктураПараметров.Свойство("ИдентификаторСтроки"),"Редактирование комментария к передаче по заявке №","Новый комментарий к передаче по заявке №"))+Объект.Номер+" от "+Объект.Дата);
		ПараметрыФормы.Вставить("АдресВходящихДанных",АдресПередачи);
		ПараметрыФормы.Вставить("ИдФормыРодителя",ЭтотОбъект.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("СсылкаНаОбъект",Объект.Ссылка);

		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыДополнения", ЭтотОбъект,ПараметрыПередачи);
		ОткрытьФорму("ОбщаяФорма.ФормаДополненияКЗаявке",ПараметрыФормы,ЭтаФорма,?(СтруктураПараметров.Свойство("ИдентификаторСтроки"),СтруктураПараметров.ИдентификаторСтроки,Строка(ТипДополнения)),,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.Независимый);
	Иначе
		СтруктураДополнения = Новый Структура();
		ПустаяТаблВложений = Неопределено;
		
		СтруктураДополнения.Вставить("ТекстHTML","");
		СтруктураДополнения.Вставить("ТаблицаВложений",ПустаяТаблВложений);	
		АдресВозврата = ПоместитьВоВременноеХранилище (СтруктураДополнения,ЭтотОбъект.УникальныйИдентификатор);
		ОбработатьЗакрытиеФормыДополнения(АдресВозврата,ПараметрыПередачи);
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыДополнения(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
	ТипДополнения = ДополнительныеПараметры.ТипДополнения;
	АдресВозврата = РезультатЗакрытия;
	
	Если Не ЭтоАдресВременногоХранилища(АдресВозврата) Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		Возврат;
	Иначе	
		СтатусОткрытияФормы = ОбработатьДополнениеКЗаявке(СтруктураПараметров,ТипДополнения,АдресВозврата);
	КонецЕсли;
	
	Если СтатусОткрытияФормы = Истина Тогда
		РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстЗаявкиHTML,ТаблицаВложений);			
		УстановитьВидимость();
		ЭтотОбъект.Модифицированность = Истина;
	Иначе
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
	Если ТипДополнения = ПредопределенноеЗначение("Перечисление.ВидыСобытийПоЗаявке.Передача") Тогда
		НовыйИсполнитель =  ДополнительныеПараметры.СтруктураПараметров.НовыйИсполнитель;
		Роль =  ДополнительныеПараметры.СтруктураПараметров.Роль;
		
		Если СтатусОткрытияФормы = Истина Тогда		
			СтатусПередачи = ПередатьЗаявкуПользователюСервер(НовыйИсполнитель);
			
			Если ЗначениеЗаполнено(Роль) Тогда
				СостояниеЗаявки = ОпределитьСостояниеЗаявкиСервер(Роль);
				Если ЗначениеЗаполнено(СостояниеЗаявки) Тогда
					Объект.Статус = СостояниеЗаявки;
				КонецЕслИ;				
			КонецЕсли;
			
			Попытка
				Записать();
			Исключение
				СтатусПередачи = Ложь;
			КонецПопытки;
		Иначе
			СтатусПередачи = Ложь;
		КонецЕсли;
	
		Если СтатусПередачи И Не ДобавленВОтчетТрудозатрат И УказыватьТрудозатратыПриЗаписи И ОпцияВестиУчетТрудозатрат Тогда
			УказатьТрудозатраты(Неопределено)
		КонецЕсли;
		
		Если СтатусПередачи = Истина Тогда	
			ЭтотОбъект.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполняетсяЗакрытие = Истина Тогда
		Записать();
	КонецЕсли;
	
	ОбновитьТаблицуРаботПоЗаявке();	

КонецПроцедуры

&НаКлиенте
Функция ЭтоНовыйДокумент() 
	Возврат не ЗначениеЗаполнено(Объект.Ссылка);
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Если Не ЭтаФорма.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = ЭтоНовыйДокумент();	
	ЭтоПисьмо = типЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВходящееПисьмо");
	ЗаявкаЗакрыта = Объект.ЗаявкаЗакрыта;
	ЭтоПостановщик = Объект.Постановщик = Пользователи.ТекущийПользователь();
	ЕстьПроект = ЗначениеЗаполнено(Объект.Проект);
	ЕстьДокОснование = ЗначениеЗаполнено(Объект.ДокументОснование);
	ЗаявкаОбъединена = (Объект.Статус = ПредопределенноеЗначение("Справочник.СостоянияЗаявок.Объединена"));	
	
	ЭтаФорма.Элементы.Дата.ТолькоПросмотр = Не ЭтоНовый;
	
	Если ИспользоватьУчетПоОрганизациям Тогда
		Элементы.Организация.Видимость = Истина;
	Иначе
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;	
	
	Если ИспользоватьУчетПоКонтрагентам Тогда
		Элементы.Контрагент.Видимость = Истина;
	Иначе
		Элементы.Контрагент.Видимость = Ложь;
	КонецЕсли;	
	
	Элементы.ДобавитьКЗаявке.Доступность = Не ЗаявкаЗакрыта;
	Элементы.ДатаЗакрытия.Доступность = ЗаявкаЗакрыта;
	Элементы.ПередатьЗаявку.Доступность = Не ЗаявкаЗакрыта;
	Элементы.Прогресс.Доступность = Не ЗаявкаЗакрыта;

	//Элементы.ЗаявкаЗакрыта.Доступность = ЭтоПостановщик;
	
	Элементы.ДокументОснование.Видимость = ЕстьДокОснование;
	
	Если Элементы.ПолеHTMLДокумента.Документ <> Неопределено Тогда
		Элементы.ПолеHTMLДокумента.Документ.Body.ContentEditable =?(ЭтоНовый,"true","false");
	КонецЕсли;
		
	Элементы.КоманднаяПанельКнопок.Видимость = ЭтоНовый;
	Элементы.ГруппаВыпадающихСписков.Видимость = ЭтоНовый;

	Элементы.Служебная.Видимость = ВключитьРежимОтладкиРедактораHTML;
	
	Элементы.ТекущийИсполнитель.Доступность = ЭтоНовый; //Если не новый то только через передать заявку
	Элементы.Постановщик.Доступность = ЭтоНовый; //Даем поменять если создаем заявку

	ЭтаФорма.ТолькоПросмотр = ?(ЗаявкаОбъединена,Истина,ЭтаФорма.ТолькоПросмотр);
	Элементы.ДобавитьКЗаявке.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ПередатьЗаявку.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ОбъединитьЗаявку.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	
	Если РольДоступнаНаСервере("ОграниченныйИнтерфейсПользователя") Тогда
		Элементы.Служебная.Видимость = Ложь;
		//Элементы.ГруппаПодписчики.Видимость = Ложь;
		Элементы.ОбъединитьЗаявку.Видимость = Ложь;
		Элементы.ПереключитьХронометраж.Видимость = Ложь;
		Элементы.УказатьТрудозатраты.Видимость = Ложь;
		Элементы.ПередатьЗаявку.Доступность = ЗначениеЗаполнено(Объект.ТекущийИсполнитель);
	КонецЕсли;

	Если Не РольДоступнаНаСервере("ПолныеПрава") Тогда 
		 Элементы.Постановщик.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПроекта.Видимость = ВестиУчетПоПроектамКонтрагент(Объект.Контрагент);
	
	Элементы.ГруппаСостоянияИОснования.Видимость = Не ЭтоНовый;
КонецПроцедуры	

&НаКлиенте
Функция ПередатьЗаявкуПользователю(НовыйИсполнитель,Роль,Представление)
	Если НовыйИсполнитель = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса = "Перед передачей заявки ее нужно записать.Продолжить?";
	Если ЭтотОбъект.Модифицированность или ЭтоНовыйДокумент() Тогда
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;	
		Попытка
			Записать();
		Исключение 
			Возврат Ложь;
		КонецПопытки;	
	КонецЕсли;
	//В случае если запись не удалась	
	Если ЭтотОбъект.Модифицированность или ЭтоНовыйДокумент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//КодВозврата = Вопрос("Передача заявки пользователю "+НовыйИсполнитель+Символы.ПС+"Добавить комментарий к заявке при передаче?",РежимДиалогаВопрос.ДаНетОтмена);
	//Если КодВозврата = КодВозвратаДиалога.Да Тогда			
	//	ОткрыватьФормуДополнения = Истина;
	//ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
	//	ОткрыватьФормуДополнения = Ложь;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	ОткрыватьФормуДополнения = Ложь;

	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ТекстHTML","");
	СтруктураПараметров.Вставить("ТаблицаВложений",Неопределено);
	СтруктураПараметров.Вставить("Получатель",НовыйИсполнитель);
	СтруктураПараметров.Вставить("ОткрыватьФормуДополнения",ОткрыватьФормуДополнения);
	СтруктураПараметров.Вставить("НовыйИсполнитель",НовыйИсполнитель);
	СтруктураПараметров.Вставить("Роль",Роль);
	
	ОткрытьДополнениеКЗаявке(СтруктураПараметров,ПредопределенноеЗначение("Перечисление.ВидыСобытийПоЗаявке.Передача"));
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоПроекту(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоПроектуЗавершение", ЭтотОбъект), "Перезаполнить таблицу?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоПроектуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ЭтотОбъект.ТаблицаОценки.Количество() > 0 И РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СписокРолей = РаботаСЗаявками.СформироватьДанныеВыбораИсполнителя(Объект.Проект,Объект.ПроектнаяЗадача,Истина,Ложь);
	
	ЗаполнитьТаблицуОценок();
	СтруктураПоиска = Новый Структура();
	Для Каждого Участник Из СписокРолей Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Исполнитель",Участник.Значение);
		МассивСтрок = ЭтотОбъект.ТаблицаОценки.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() = 0 Тогда
			НовыйУчастник = ЭтотОбъект.ТаблицаОценки.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;	
		НовыйУчастник.Исполнитель = Участник.Значение;
		НовыйУчастник.Период = ТекущаяДата(); 
	КонецЦикла;

	Элементы.ГруппаОценки.Заголовок = ПолучитьЗаголовок("Оценка",Элементы.ГруппаОценки.Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЧастьЗаявки(Идентификатор)
	ИдДокумента = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Если Не ПроверитьВозможностьРедактированияДополнения(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдДокумента = Идентификатор Тогда //У нас это исходная заявка
		Если Объект.ТекстыДополнений.Количество()>0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекстHTML = Объект.ОписаниеЗаявкиHTML;
		ЗаменитьИдентификаторыОбъектовНаАдресаВHTML(ТекстHTML);
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстHTML",ТекстHTML);
		СтруктураПараметров.Вставить("ТаблицаВложений",ТаблицаВложений);
		
		ОткрытьДополнениеКЗаявке(СтруктураПараметров,ПредопределенноеЗначение("Перечисление.ВидыСобытийПоЗаявке.ПустаяСсылка"));
	Иначе
		ТаблТекстов = Объект.ТекстыДополнений;
		МассивСтрок = ТаблТекстов.НайтиСтроки(Новый Структура("ИдДополнения",Идентификатор));
		
		Если МассивСтрок.Количество() > 0 тогда
			ТекСтрока = МассивСтрок.Получить(0);
			
			Если ПроверитьТипДополнения(ТекСтрока.НомерСтроки,"Передача") Тогда
				Возврат;
			КонецЕсли;
			
			ТекстHTML = ТекСтрока.ОписаниеДополненияHTML;
			ЗаменитьИдентификаторыОбъектовНаАдресаВHTML(ТекстHTML);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ТекстHTML",ТекстHTML);
			СтруктураПараметров.Вставить("ТаблицаВложений",ТаблицаВложений);
			СтруктураПараметров.Вставить("ИдентификаторСтроки",Идентификатор);
			СтруктураПараметров.Вставить("ОткрыватьФормуДополнения",Истина);

			ОткрытьДополнениеКЗаявке(СтруктураПараметров,ТекСтрока.ТипДополнения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧастьЗаявки(Идентификатор)	
	//Проверим а если у нас права на удаление
	Если ПроверитьВозможностьРедактированияДополнения(Идентификатор) Тогда
		ТаблТекстов = Объект.ТекстыДополнений;
		МассивСтрок = ТаблТекстов.НайтиСтроки(Новый Структура("ИдДополнения",Идентификатор));
		Для Каждого Эл Из МассивСтрок Цикл
			Если ПроверитьТипДополнения(Эл.НомерСтроки,"Передача") Тогда
				ТекстВопроса = "Вернуть заявку исполнителю "+Эл.Пользователь+" ?";
				Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					ПередатьЗаявкуПользователюСервер(Эл.Пользователь);
				Иначе
					Возврат;
				КонецЕсли;	
			Иначе
				ТекстВопроса = "Удалить выбранный ответ к заявке?";
				Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕслИ;
			Объект.ТекстыДополнений.Удалить(Эл);
		КонецЦикла;
	КонецЕсли;
	ПрочитатьТекстЗаявкиИзОбъекта();
	ОбновитьТаблицуРаботПоЗаявке();
	РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстЗаявкиHTML,ТаблицаВложений);			
	УстановитьВидимость();
	ЭтотОбъект.Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_article(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 9);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
	
	//Проверим существует ли ссылка на статью
	Если БазаЗнанийСервер.ОбъектБДСуществует(ЭлементСсылка) Тогда
		ФормаБазыЗнаний = ПолучитьФорму("Обработка.БазаЗнаний.Форма");
		ФормаБазыЗнаний.НачальнаяСтатья = ЭлементСсылка;
		ФормаБазыЗнаний.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_fileint(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 9);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("Файлы", Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат;
	КонецЕслИ;
	
	//Проверим существует ли ссылка на статью
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ЭлементСсылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_filebase(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 10);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("Файлы", Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат;
	КонецЕслИ;
	
	//Проверим существует ли ссылка на статью
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ЭлементСсылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявкуПоСсылке(ПараметрСсылки)
	Идентификатор = Сред(ПараметрСсылки, 8);
	Попытка
		ЭлементСсылка = ПолучитьСсылкуНаЗаявку(Идентификатор);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	ПараметрыФормы = Новый Структура("Ключ", ЭлементСсылка);
	ОткрытьФорму("Документ.Заявка.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОценок()
	ЗаполнитьТаблицуОценокСервер();
	Элементы.ГруппаОценки.Заголовок = ПолучитьЗаголовок("Оценка",Элементы.ГруппаОценки.Заголовок);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Служебные процедуры сервер
//

&НаСервере
Процедура  ЗаменитьИдентификаторыОбъектовНаАдресаВHTML(ТекстHTML)
	РаботаСЗаявками.ЗаменитьИдентификаторыОбъектовНаАдресаВHTML(ТекстHTML,ДанныеФормыВЗначение(ТаблицаВложений,Тип("ТаблицаЗначений")));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВестиУчетПоПроектамКонтрагент(КонтрагентСсылка)
	Возврат КонтрагентСсылка.ВестиУчетЗаявокПоПроектам;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

&НаСервереБезКонтекста
Функция РольДоступнаНаСервере(ИмяРоли)
	Возврат РольДоступна(ИмяРоли); 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнегоИсполнителяСервер(ТекЗаявка)
	ПоследИсполнитель = Справочники.Пользователи.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаТекстыДополнений.Пользователь
		|ИЗ
		|	Документ.Заявка.ТекстыДополнений КАК ЗаявкаТекстыДополнений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка КАК Заявка
		|		ПО ЗаявкаТекстыДополнений.Ссылка = Заявка.Ссылка
		|ГДЕ
		|	Заявка.Ссылка = &Ссылка
		|	И ЗаявкаТекстыДополнений.ТипДополнения = &ТипДополнения
		|	И ЗаявкаТекстыДополнений.Пользователь <> &ТекПользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаТекстыДополнений.ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЗаявка);
	Запрос.УстановитьПараметр("ТекПользователь", ТекЗаявка.ТекущийИсполнитель);
	Запрос.УстановитьПараметр("ТипДополнения",Перечисления.ВидыСобытийПоЗаявке.Передача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПоследИсполнитель = ВыборкаДетальныеЗаписи.Пользователь;
	КонецЕсли;	
	Возврат ПоследИсполнитель;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовСервер(ТекПостановщик,ТекИсполнитель,ТекСтатус)
	СписокВозврата = Новый СписокЗначений();
	
	СписокСтатусовНеОтображать = Новый СписокЗначений();
	Если ЗначениеЗаполнено(ТекСтатус) Тогда
		СписокСтатусовНеОтображать.Добавить(Справочники.СостоянияЗаявок.Зарегистрирована);
	КонецЕсли;
	СписокСтатусовНеОтображать.Добавить(Справочники.СостоянияЗаявок.Объединена);
	
	Если ТекПостановщик <> ПараметрыСеанса.ТекущийПользователь И Не РольДоступна("РазрешитьЗакрытиеНеСвоихЗаявок") И Не РольДоступна("ПолныеПрава")  Тогда
		СписокСтатусовНеОтображать.Добавить(Справочники.СостоянияЗаявок.Выполнена);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЗаявок.Ссылка
		|ИЗ
		|	Справочник.СостоянияЗаявок КАК СостоянияЗаявок
		|ГДЕ
		|	СостоянияЗаявок.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияЗаявок.Ссылка В (&СписокСтатусов)";
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусовНеОтображать);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВозврата.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

	Возврат СписокВозврата;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуОценокСервер()
	ДатаСреза = ТекущаяДата();	
	
	ТаблицаОценки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Период,
	|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Исполнитель,
	|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Длительность/3600 КАК Оценка,
	|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Ответственный,
	|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.ПричинаИзменения
	|ИЗ
	|	РегистрСведений.ПлановыеТрудозатратыПоЗаявкам.СрезПоследних(&ДатаСреза, Источник = &ДокументЗаявка) КАК ПлановыеТрудозатратыПоЗаявкамСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("ДокументЗаявка", объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТаблицаОценки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьОбъединенияСервер(ГлЗаявка,ОписаниеОшибки)
	Если ГлЗаявка = Объект.Ссылка Тогда
		ОписаниеОшибки = "Заявка не может быть объединена сама с собой!";
		Возврат Ложь;
	КонецЕсли;
	
	Если глЗаявка.Статус = Справочники.СостоянияЗаявок.Объединена Тогда
		ОписаниеОшибки = "Заявка не может быть объединена с заявкой в статусе ""Объединена""!";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция  ПолучитьСсылкуНаЗаявку (Идентификатор)
	УникИд = Новый УникальныйИдентификатор(Идентификатор);
	СсылкаНаЗаявку = Документы.Заявка.ПолучитьСсылку(УникИд);
	Возврат СсылкаНаЗаявку;
КонецФункции

&НаСервере
Процедура ЗаполнитьПроектПоКонтрагенту() Экспорт	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Проект = РаботаСЗаявками.ПолучитьПроектПоКонтрагенту(Объект.Контрагент);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроектнуюЗадачуПоПроекту()  Экспорт
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) И Объект.ПроектнаяЗадача.Владелец = Объект.Проект Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПроектнаяЗадача = РаботаСЗаявками.ПолучитьПроектнуюЗадачуПоПроекту(Объект.Проект);	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗакрытияЗаявки()
	
	Если Объект.ТипЗаявки.ОценкаНеОбязательна Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Проект,
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.ПроектнаяЗадача,
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Длительность,
		|	ПлановыеТрудозатратыПоЗаявкамСрезПоследних.Исполнитель
		|ИЗ
		|	РегистрСведений.ПлановыеТрудозатратыПоЗаявкам.СрезПоследних(
		|			,
		|			Источник = &Заявка
		|				И Проект = &Проект
		|				И ПроектнаяЗадача = &ПроектнаяЗадача) КАК ПлановыеТрудозатратыПоЗаявкамСрезПоследних";

	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("ПроектнаяЗадача", Объект.ПроектнаяЗадача);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		//Проверим возможно оценка еще не записана
		Если ЭтотОбъект.ТаблицаОценки.Количество() = 0 Тогда
			Сообщить("По заявке не заполнена плановая оценка работ!");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПроверитьТипДополнения(НомерСтроки,ИмяТипа)
	Если Не ЗначениеЗаполнено(НомерСтроки) ИЛИ не ЗначениеЗаполнено(ИмяТипа) Тогда
		Возврат Ложь;
	КонецЕслИ;
		
	СтрокаДополнения = Объект.ТекстыДополнений.Получить(НомерСтроки-1);
		
	Если СтрокаДополнения.ТипДополнения = Перечисления.ВидыСобытийПоЗаявке[ИмяТипа] Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПроверитьДублиТЧОценокСервер()
	Отказ = Ложь;
	
	ТЧОценок = ЭтотОбъект.ТаблицаОценки.Выгрузить();
	ТЧОценок.Свернуть("Исполнитель");
	Если ТЧОценок.Количество() <> ЭтотОбъект.ТаблицаОценки.Количество() Тогда
		Отказ = истина;
	КонецЕслИ;
	
	Возврат Отказ;
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуРаботПоЗаявке()
	РаботыПоЗаявке.Загрузить(Объект.ТекстыДополнений.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТаблицуВложений()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыHTMLСтраниц.Идентификатор,
	|	ОбъектыHTMLСтраниц.Вложение
	|ИЗ
	|	РегистрСведений.ОбъектыHTMLСтраниц КАК ОбъектыHTMLСтраниц
	|ГДЕ
	|	ОбъектыHTMLСтраниц.Владелец = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЭтотОбъект.ТаблицаВложений.Очистить();
	ТекстHTML = Объект.ОписаниеЗаявкиHTML;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ЭтотОбъект.ТаблицаВложений.Добавить();
		НоваяСтрока.Ключ = ВыборкаДетальныеЗаписи.Идентификатор;
		НоваяСтрока.Адрес = ПоместитьВоВременноеХранилище(ВыборкаДетальныеЗаписи.Вложение.Получить(),ЭтотОбъект.УникальныйИдентификатор);
	КонецЦикла;
	
	//Проверим не пришло ли нам ничего из модуля объекта
	СтруктураПоиска = Новый Структура();
	Для Каждого Стр Из Объект.ТаблицаВложенийОбъекта Цикл
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Ключ",Стр.Ключ);
		МассивСтрок = ТаблицаВложений.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЭтоАдресВременногоХранилища(Стр.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаВложений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ОбработатьДополнениеКЗаявке(СтруктураПараметров,ТипДополнения,АдресВозврата)
	Если Не ЭтоАдресВременногоХранилища(АдресВозврата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураДополнения = ПолучитьИзВременногоХранилища(АдресВозврата);
	Если Не ТипЗнч(СтруктураДополнения) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ТекстHTML = СтруктураДополнения.ТекстHTML;
	ТаблДополнВложений = СтруктураДополнения.ТаблицаВложений;
	Если ТаблДополнВложений = Неопределено Тогда
		ТаблДополнВложений = новый ТаблицаЗначений();
	КонецЕслИ;
	
	Если ЗначениеЗаполнено(ТипДополнения) Тогда
		//Добавляем текст
		ИдСтроки = "";
		Если Не СтруктураПараметров.Свойство("ИдентификаторСтроки",ИдСтроки) Тогда
			ИдСтроки = "";
		КонецЕсли;	
		ДобавитьСтроку = Ложь;
		Если ИдСтроки <> "" Тогда
			МассивСтрок = Объект.ТекстыДополнений.НайтиСтроки(Новый Структура("ИдДополнения",ИдСтроки));
			Если МассивСтрок.Количество() > 0 Тогда
				ТекСтрока = МассивСтрок.Получить(0);
				ТекСтрока.ОписаниеДополненияHTML = ТекстHTML;
				ФдДополнения = Новый ФорматированныйДокумент;
				ФдДополнения.УстановитьHTML(ТекстHTML,Новый Структура());
				ТекСтрока.ОписаниеДополнения = СокрЛП(ФдДополнения.ПолучитьТекст());
			Иначе
				ДобавитьСтроку = Истина;
			КонецЕсли;
		Иначе
			ДобавитьСтроку = Истина;
		КонецЕсли;
		
		Если ДобавитьСтроку = Истина Тогда	
			НоваяСтрока = Объект.ТекстыДополнений.Добавить();
			НоваяСтрока.ТипДополнения = ТипДополнения;
			НоваяСтрока.ОписаниеДополненияHTML = ТекстHTML;
			
			ФдДополнения = Новый ФорматированныйДокумент;
			ФдДополнения.УстановитьHTML(ТекстHTML,Новый Структура());
			НоваяСтрока.ОписаниеДополнения = ФдДополнения.ПолучитьТекст();
			НоваяСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			НоваяСтрока.ИдДополнения = ?(ИдСтроки <> "",Новый УникальныйИдентификатор(ИдСтроки),Новый УникальныйИдентификатор());
			НоваяСтрока.ДатаСоздания = ТекущаяДата();
			Если ТипДополнения = Перечисления.ВидыСобытийПоЗаявке.Передача Тогда
				НоваяСтрока.Получатель = СтруктураПараметров.Получатель;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.ОписаниеЗаявкиHTML = ТекстHTML;
	КонецЕсли;
	
	ТаблицаВложенийДляОбработки = ТаблицаВложений.Выгрузить();	
	//Дополняем таблицу вложений
	Для Каждого Стр Из ТаблДополнВложений Цикл
		Если ТаблицаВложенийДляОбработки.Найти(Стр.Ключ,"Ключ") = Неопределено Тогда
			НовСтр = ТаблицаВложений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		КонецЕсли;	
	КонецЦикла;
	
	ПрочитатьТекстЗаявкиИзОбъекта();
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
	ПараметрыОтчета, 
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекстЗаявкиИзОбъекта()	
	СтруктураАдресовКартинок = Новый Структура();
	СтруктураАдресовКартинок.Вставить("АдресКартинкиДополнения",АдресКартинкиДополнения);
	СтруктураАдресовКартинок.Вставить("АдресКартинкиОбъединения",АдресКартинкиОбъединения);
	СтруктураАдресовКартинок.Вставить("АдресКартинкиПередачи",АдресКартинкиПередачи);
	СтруктураАдресовКартинок.Вставить("АдресКартинкиРедактирования",АдресКартинкиРедактирования);
	СтруктураАдресовКартинок.Вставить("АдресКартинкиРешения",АдресКартинкиРешения);
	СтруктураАдресовКартинок.Вставить("АдресКартинкиСостояния",АдресКартинкиСостояния);
	СтруктураАдресовКартинок.Вставить("АдресКартинкиУдаления",АдресКартинкиУдаления);

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ОписаниеЗаявкиHTML",Объект.ОписаниеЗаявкиHTML);
	СтруктураПараметров.Вставить("Ссылка",Объект.Ссылка);
	СтруктураПараметров.Вставить("ТекстыДополнений",Объект.ТекстыДополнений);
	СтруктураПараметров.Вставить("ТаблицаВложений",ТаблицаВложений);
	СтруктураПараметров.Вставить("УникальныйИдентификатор",ЭтаФорма.УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ГлавнаяЗаявка",Объект.ГлавнаяЗаявка);
	СтруктураПараметров.Вставить("ЗапретитьРедактированиеЗаявки",Объект.ЗаявкаЗакрыта);
	СтруктураПараметров.Вставить("НеВставлятьСлужебныеСсылкиВТекст",Ложь);
	СтруктураПараметров.Вставить("ЗаменятьИдентификаторыКартинок",Истина);	
		
	ТекстHTML = РаботаСЗаявками.ПолучитьТекстЗаявкиИзОбъекта(СтруктураПараметров,СтруктураАдресовКартинок);
	
	ТекстЗаявкиHTML = ТекстHTML;
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьРедактированияДополнения(Идентификатор)
	
	Отказ = Ложь;
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;	
	
	ИдДокумента = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Если Идентификатор = ИдДокумента Тогда
		Если Объект.Постановщик <> ТекПользователь Тогда
			Сообщить("Исходный текст заявки может редактировать только "+Объект.Постановщик+"!");
			Отказ = Истина;
		КонецЕсли;
	Иначе	
		ТаблТекстов = Объект.ТекстыДополнений;
		МассивСтрок = ТаблТекстов.НайтиСтроки(Новый Структура("ИдДополнения",Идентификатор));
		ИндексПоследСтроки = Объект.ТекстыДополнений.Количество();
		ЭтоПередача = Ложь;
		Для Каждого Эл Из МассивСтрок Цикл
			Если ПроверитьТипДополнения(Эл.НомерСтроки,"Передача") Тогда
				ЭтоПередача = Истина;
			КонецЕсли;
			
			Если ИндексПоследСтроки <> Эл.НомерСтроки Тогда
				Сообщить("Разрешено редактировать только последнюю запись!");
				Отказ = Истина;
				Прервать;
			КонецЕсли;	
			
			//Проверим есть ли у нас права
			Если Эл.Пользователь <> ТекПользователь Тогда
				Сообщить(?(ЭтоПередача,"Выбранную передачу заявки может редактировать только пользователь "+Эл.Пользователь+"!","Выбранный ответ может редактировать только пользователь "+Эл.Пользователь+"!"));
				Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат Не Отказ;
КонецФункции

&НаСервере
Функция ПередатьЗаявкуПользователюСервер(НовыйИсполнитель)
	
	Если ЗначениеЗаполнено(НовыйИсполнитель) Тогда
		Объект.ТекущийИсполнитель = НовыйИсполнитель;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(НовыйИсполнитель);
КонецФункции

&НаСервере
Функция ОпределитьСостояниеЗаявкиСервер(Роль)
	Состояние = Справочники.СостоянияЗаявок.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектыПроектнаяКоманда.СостояниеЗаявки КАК СостояниеЗаявки
		|ИЗ
		|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектыПроектнаяКоманда
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектыПроектнаяКоманда.Ссылка = Проекты.Ссылка
		|ГДЕ
		|	ПроектыПроектнаяКоманда.Ссылка = &Проект
		|	И ПроектыПроектнаяКоманда.Исполнитель = &Роль";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Состояние = ВыборкаДетальныеЗаписи.СостояниеЗаявки;
	КонецЕсли;
	
	Возврат Состояние;
Конецфункции

//////////////////////////////////////////////////////////////////////////////// 
// Работа с файлами
// 

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
	ВыбраннаяСтрока, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	
	ВыбранныйРежим = ВыбратьРежимИРедактироватьФайл(ДанныеФайла);
	Если ВыбранныйРежим = "Редактировать" Тогда
		ОбновитьДоступностьКомандСпискаФайлов();
		Возврат;
	ИначеЕсли ВыбранныйРежим = "Отмена" Тогда
		Возврат;
	КонецЕсли;	
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		"Создание:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			РаботаСФайламиКлиент.СоздатьФайл(РежимСоздания, ВладелецФайла, ЭтотОбъект, Истина);
		Исключение
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ФайлыПередНачаломДобавленияЗавершение", ЭтотОбъект, Новый Структура("ВладелецФайла, ФайлОснование", ВладелецФайла, ФайлОснование)), ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
			ИнформацияОбОшибке()));
            Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	ФайлыПередНачаломДобавленияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияЗавершение(ДополнительныеПараметры) Экспорт
	
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	ФайлОснование = ДополнительныеПараметры.ФайлОснование;
	
	
	ФайлыПередНачаломДобавленияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияФрагмент()
	
	Элементы.Файлы.Обновить();
	Элементы.ГруппаФайлы.Заголовок = ПолучитьЗаголовок("Файлы",Элементы.ГруппаФайлы.Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		"Создание:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
	Элементы.ГруппаФайлы.Заголовок = ПолучитьЗаголовок("Файлы",Элементы.ГруппаФайлы.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.ГруппаОценки.Заголовок =ПолучитьЗаголовок("Оценка",Элементы.ГруппаОценки.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценкиПослеУдаления(Элемент)
	Элементы.ГруппаОценки.Заголовок =ПолучитьЗаголовок("Оценка",Элементы.ГруппаОценки.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписчиковПослеУдаления(Элемент)
	Элементы.ГруппаПодписчики.Заголовок =ПолучитьЗаголовок("Подписчики",Элементы.ГруппаПодписчики.Заголовок);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд, связанных с таблицей формы Файлы


&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе
			НачатьЗапускПриложения(Неопределено, Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(Элементы.Файлы.ТекущаяСтрока);
		
		ОбновитьДоступностьКомандСпискаФайлов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
	Элементы.Файлы.ТекущаяСтрока,
	ЭтотОбъект.УникальныйИдентификатор,
	Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
	Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
	Элементы.Файлы.ТекущиеДанные.Редактирует);
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.Занять(Элементы.Файлы.ТекущаяСтрока);
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОсвободитьФайл(
	Элементы.Файлы.ТекущаяСтрока,
	Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
	Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
	Элементы.Файлы.ТекущиеДанные.Редактирует);
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОпубликоватьФайл(
	Элементы.Файлы.ТекущаяСтрока, 
	ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	КомандыРаботыСФайламиКлиент.ОбновитьИзФайлаНаДиске(ДанныеФайла, ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = Неопределено;

	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ИмпортФайловЗавершение", ЭтотОбъект));		
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	
	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для импорта файлов необходимо установить расширение работы с файлами.'"));
	Иначе	
		
		Если Объект.Ссылка.Пустая() Тогда 
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
		ВыполнитьИмпортФайлов(Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Выполнить импорт файлов
Процедура ВыполнитьИмпортФайлов(ВладелецИмпортированныхФайлов)
	
	// заранее выбираем файлы (до открытия диалога импорта)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ВыполнитьИмпортФайловЗавершение", ЭтотОбъект, Новый Структура("ВладелецИмпортированныхФайлов, ДиалогОткрытияФайла", ВладелецИмпортированныхФайлов, ДиалогОткрытияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИмпортФайловЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВладелецИмпортированныхФайлов = ДополнительныеПараметры.ВладелецИмпортированныхФайлов;
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		МассивИменФайлов = Новый Массив;
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			МассивИменФайлов.Добавить(ИмяФайла);
		КонецЦикла;
		
		ПараметрыИмпорта = Новый Структура("ПапкаДляДобавления, МассивИменФайлов", 
		ВладелецИмпортированныхФайлов, МассивИменФайлов);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИмпортФайловЗавершен" И Источник = Объект.Ссылка Тогда
		Элементы.Файлы.Обновить();
		Элементы.ГруппаФайлы.Заголовок = ПолучитьЗаголовок("Файлы",Элементы.ГруппаФайлы.Заголовок);
	ИначеЕсли ИмяСобытия = "ЗаписаноИзменениеПодписчиков" И Источник = Объект.Ссылка Тогда 
		Элементы.ГруппаПодписчики.Заголовок = ПолучитьЗаголовок("Подписчики",Элементы.ГруппаПодписчики.Заголовок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов()
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	Команда.Доступность = Доступность;
КонецПроцедуры

// Выбрать режим открытия файла и начать редактирование
&НаКлиенте
Функция ВыбратьРежимИРедактироватьФайл(ДанныеФайла) 
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		
		СпрашиватьРежимРедактированияПриОткрытииФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СпрашиватьРежимРедактированияПриОткрытииФайла;
		Если СпрашиватьРежимРедактированияПриОткрытииФайла = Истина Тогда
			
			КакОткрывать = Неопределено;
			
			Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия");
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат "Отмена";
			КонецЕсли;
			
			БольшеНеСпрашивать = Результат.БольшеНеСпрашивать;
			Если БольшеНеСпрашивать = Истина Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Ложь);
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
			
			КакОткрывать = Результат.КакОткрывать;
			
			Если КакОткрывать = 1 Тогда
				РаботаСФайламиКлиент.РедактироватьФайл(ДанныеФайла);
				ОповеститьОбИзменении(ДанныеФайла.Ссылка);
				Возврат "Редактировать";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "Открыть";
	
КонецФункции	

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
		
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать,Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, Истина);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Не Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПараметрыТаблицыФайлов();
КонецПроцедуры


// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ПосчитатьКоличествоВСпискеНаСервере(ИмяСписка)
	Если ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("ДинамическийСписок") Тогда
		Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = МакетКомпоновки.НаборыДанных.НаборДанныхДинамическогоСписка.Запрос;
		СтрокаВЫБРАТЬ = Лев(Запрос.Текст, Найти(Запрос.Текст, Символы.ПС));
		
		Запрос.Текст = СтрокаВЫБРАТЬ + "Количество(*) КАК Кол" + Сред(Запрос.Текст, Найти(Запрос.Текст, Символы.ПС + "ИЗ" + Символы.ПС));
		Для Каждого парам из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(парам.Имя, парам.Значение);
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Кол;
		Иначе
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("ДанныеФормыКоллекция") Тогда
		Возврат ЭтаФорма[ИмяСписка].Количество();	
	ИначеЕсли ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("ТаблицаЗначений") Тогда
		Возврат ЭтаФорма[ИмяСписка].Количество();	
	ИначеЕсли ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("СписокЗначений") Тогда
		Возврат ЭтаФорма[ИмяСписка].Количество();
	Иначе
		Возврат 0;
	КонецЕслИ;	
КонецФункции

&НаКлиенте
Функция ПолучитьЗаголовок(ИмяПоля,ТекущийЗаголовок)
	//Возврат "";
	Если ИмяПоля = "Файлы" тогда
		КолЗаписей = ПосчитатьКоличествоВСпискеНаСервере("Файлы");
		Возврат ?(КолЗаписей = 0,"","("+Формат(КолЗаписей,"ЧН=0; ЧГ=0")+")");
	ИначеЕсли ИмяПоля = "Подписчики" Тогда
		КолЗаписей = ПосчитатьКоличествоВСпискеНаСервере("ТаблицаПодписчиков");
		Возврат ?(КолЗаписей = 0,"","("+Формат(КолЗаписей,"ЧН=0; ЧГ=0")+")");
	ИначеЕсли ИмяПоля = "Оценка" Тогда
		КолЗаписей = ПосчитатьКоличествоВСпискеНаСервере("ТаблицаОценки");
		Возврат ?(КолЗаписей = 0,"","("+Формат(КолЗаписей,"ЧН=0; ЧГ=0")+")");
	Иначе
		Возврат ТекущийЗаголовок;
	КонецЕсли;
КонецФункции


