////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьПараметрыНовогоДокумента(Параметры);
		ОтобразитьСвязиПисьма();
	КонецЕсли;
	
	Получатели.Очистить();
	ДобавитьПолучателейИзТаблЧасти(Объект.ПолучателиПисьма, НСтр("ru = 'Кому:'"));
	ДобавитьПолучателейИзТаблЧасти(Объект.ПолучателиКопий, НСтр("ru = 'Копия:'"));
	ДобавитьПолучателейИзТаблЧасти(Объект.ПолучателиСкрытыхКопий, НСтр("ru = 'Скрытая копия:'"));
	
	// Обработка свойства письма "Прочтено"
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвойствоПрочтено(Объект.Ссылка);
	КонецЕсли;
	
	// Установка заголовка формы
	Автозаголовок = Ложь;
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
	СписокВыбораКому = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеКому");
	СписокВыбораКопия = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеКопия");
	СписокВыбораСкрытаяКопия = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ПолучателиПредставлениеСкрытаяКопия'");
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Параметры.Основание) Тогда
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.Основание);
		ДобавитьВложениеФайлы(МассивФайлов);
	КонецЕсли;
	
	Если РаботаСЗаявками.Этозаявка(Параметры.Основание) Тогда
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.Основание);
		ДобавитьВложениеФайлы(МассивФайлов);
		
		Кодировка = КодировкаТекста.UTF8;
		ТекстПисьма = РаботаСЗаявками.ПолучитьТекстHTMLЗаявки(Параметры.Основание,Кодировка,ЭтаФорма.УникальныйИдентификатор);
		
		Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
	КонецЕсли;

	//Если Не РольДоступна("РаботаСПротоколомРаботыПользователей") Тогда
	//	Элементы.ПротоколРаботы.Видимость = Ложь;
	//КонецЕсли;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.УказатьТрудозатраты);
	
	ОпределитьВидимостьДоступностьЭлементовФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0 Тогда
		Элементы.Получатели.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Элементы.Тема.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.ТекстПисьма.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязиПисьма()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
		ПересылкаПисьма = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПересылкаПисьма);
		ПолученОтвет.ЗагрузитьЗначения(
			СвязиДокументов.ПолучитьСвязанныеДокументы(
				Объект.Ссылка, Справочники.ТипыСвязей.ПолученОтвет));
		ПересланоПисьмом.ЗагрузитьЗначения(
			СвязиДокументов.ПолучитьСвязанныеДокументы(
				Объект.Ссылка, Справочники.ТипыСвязей.ПересланоПисьмом));
	КонецЕсли;
	
	// Обработка связи ПисьмоОтправленоВОтветНа
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ПисьмоОтправленоВОтветНаСтрока = "";
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ПисьмоОтправленоВОтветНа) Тогда
			ПисьмоОтправленоВОтветНаСтрока = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПисьмоОтправленоВОтветНа, "Тема");
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ПисьмоОтправленоВОтветНа) Тогда
			ПисьмоОтправленоВОтветНаСтрока = Строка(ПисьмоОтправленоВОтветНа);
		КонецЕсли;
		Элементы.ПисьмоОтправленоВОтветНаСтрока.Гиперссылка = Истина;
	Иначе
		ОтправленоВОтветНаСтрока = НСтр("ru = 'Нет'");
		Элементы.ПисьмоОтправленоВОтветНаСтрока.Гиперссылка = Ложь;
		Элементы.ПисьмоОтправленоВОтветНаСтрока.Доступность = Ложь;
	КонецЕсли;
	
	// Обработка связи ПолученОтвет
	Если ПолученОтвет.Количество() = 0 Тогда
		ПолученОтветСтрока = НСтр("ru = 'Нет'");
		Элементы.ПолученОтветСтрока.Гиперссылка = Ложь;
		Элементы.ПолученОтветСтрока.Доступность = Ложь;
	ИначеЕсли ПолученОтвет.Количество() = 1 Тогда
		ПолученОтветТема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ПолученОтвет[0].Значение,
			"Тема");
		ПолученОтветСтрока = ПолученОтветТема;
		Элементы.ПолученОтветСтрока.Гиперссылка = Истина;
	Иначе
		ПолученОтветСтрока = Строка(ПолученОтвет.Количество()); 
		Элементы.ПолученОтветСтрока.Гиперссылка = Истина;
	КонецЕсли;
	
	// Обработка связи ПересланоПисьмом
	Если ПересланоПисьмом.Количество() = 0 Тогда
		ПересланоПисьмомСтрока = НСтр("ru = 'Нет'");
		Элементы.ПересланоПисьмомСтрока.Гиперссылка = Ложь;
		Элементы.ПересланоПисьмомСтрока.Доступность = Ложь;
	Иначе
		ПересланоПисьмомТема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ПересланоПисьмом[0].Значение,
			"Тема");
		ПересланоПисьмомСтрока = ПересланоПисьмомТема;
		Элементы.ПересланоПисьмомСтрока.Гиперссылка = Истина;
	КонецЕсли;
	
	ЧислоПисемВПереписке = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ПисьмоОтправленоВОтветНа);
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(ПересылкаПисьма);
	КонецЕсли;
	Если ЧислоПисемВПереписке > 1 Тогда
		Элементы.ПисемВПереписке.Гиперссылка = Истина;
		ПисемВПереписке = Формат(ЧислоПисемВПереписке, "ЧН=0") + " " + ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(ЧислоПисемВПереписке);
	Иначе
		ПисемВПереписке = НСтр("ru = 'Писем нет'");
		Элементы.ПисемВПереписке.Гиперссылка = Ложь;
		Элементы.ПисемВПереписке.Доступность = Ложь;
	КонецЕсли;
	
	АктивныеЗадачиПоПисьму.ЗагрузитьЗначения(ПолучитьАктивныеЗадачиПоПисьму(Объект.Ссылка));
	КоличествоАктивныхЗадач = АктивныеЗадачиПоПисьму.Количество();
	Если КоличествоАктивныхЗадач > 1 Тогда
		Элементы.Задачи.Гиперссылка = Истина;
		Элементы.Задачи.Доступность = Истина;
		Задачи = Формат(КоличествоАктивныхЗадач, "ЧН=0") +
			" " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуЗадачСтрокой(КоличествоАктивныхЗадач);
		
	ИначеЕсли КоличествоАктивныхЗадач = 1 Тогда
		Элементы.Задачи.Гиперссылка = Истина;
		Элементы.Задачи.Доступность = Истина;
		Задачи = АктивныеЗадачиПоПисьму[0];
		
	Иначе
		Задачи = НСтр("ru='Нет задач'");
		Элементы.Задачи.Гиперссылка = Ложь;
		Элементы.Задачи.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктивныеЗадачиПоПисьму(Письмо)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Отменена
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)");
	Запрос.УстановитьПараметр("Предмет", Письмо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Обрабатывает переданные параметры при создании письма
//
&НаСервере
Процедура ОбработатьПараметрыНовогоДокумента(Параметры)
	
	Если Параметры.Свойство("Вложения") Тогда
		Для каждого Вложение Из Параметры.Вложения Цикл
			ДобавитьВложение(Вложение);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Тема") Тогда
		Объект.Тема = Параметры.Тема;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("Команда") Тогда
		Команда = Параметры.ЗначенияЗаполнения.Команда;
		Если Не Параметры.ЗначенияЗаполнения.Свойство("Письмо") Тогда
			ВызватьИсключение НСтр("ru = 'Некорректное значение заполнения'");
		КонецЕсли;
		Письмо = Параметры.ЗначенияЗаполнения.Письмо;
		УстановитьСвойствоПрочтено(Письмо);
		Если Команда = "Переслать" Тогда
			ПересылкаПисьма = Письмо;
			ТаблицаВложений = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
				Письмо,
				Истина, // ФормироватьПредставлениеРазмера
				Ложь); // ВключатьПомеченныеНаУдаление
			Для каждого ТаблицаВложенийСтрока Из ТаблицаВложений Цикл
				ВложенияСтрока = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(
					ВложенияСтрока,
					ТаблицаВложенийСтрока,
					"Ссылка, ИмяФайла, ИндексКартинки, Размер, РазмерПредставление");
				ВложенияСтрока.Расположение = "СсылкаНаФайл";
			КонецЦикла;
			ОтобразитьКоличествоФайловСервер();
			
		ИначеЕсли Команда = "ОтветитьВсем" Или Команда = "Ответить" Тогда
			ПисьмоОтправленоВОтветНа = Письмо;
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректная команда работы с письмом'");
			
		КонецЕсли;
		
		ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
		СтруктураРеквизитов = ПисьмоОбъект.СформироватьСтруктуруРеквизитовПисьма(Параметры.ЗначенияЗаполнения);
		Если СтруктураРеквизитов.Свойство("ТекстПисьма") Тогда
			ТекстПисьма = СтруктураРеквизитов.ТекстПисьма;
		КонецЕсли;
		
		// Формирование вложения - тела исходного письма в формате HTML
		ПисьмоОснованиеОбъект = Письмо.ПолучитьОбъект();
		СтруктураТекстаПисьмаОснования = ПисьмоОснованиеОбъект.ПолучитьСтруктуруТекстаПисьма();
		Если СтруктураТекстаПисьмаОснования.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			ПисьмоТекстHTML = СтруктураТекстаПисьмаОснования.Текст;
			ПисьмоРазмер = СтрДлина(ПисьмоТекстHTML);
			ПисьмоРазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ПисьмоРазмер);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
			ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, СтруктураТекстаПисьмаОснования.Кодировка);
			ЗаписьТекста.Записать(ПисьмоТекстHTML);
			ЗаписьТекста.Закрыть();
			Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Адрес = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
			
			ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ИмяВременногоФайла);
			ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
			
			ВложенияСтрока = Вложения.Добавить();
			ВложенияСтрока.Ссылка = Неопределено;
			ВложенияСтрока.Адрес = Адрес;
			ВложенияСтрока.Представление = "Original";
			ВложенияСтрока.ИмяФайла = "Original.html";
			ВложенияСтрока.ИндексКартинки = ИндексКартинки;
			ВложенияСтрока.Размер = ПисьмоРазмер;
			ВложенияСтрока.РазмерПредставление = ПисьмоРазмерПредставление;
			ВложенияСтрока.ПометкаУдаления = Ложь;
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
			ВложенияСтрока.Расположение = "ВременноеХранилище";
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Основание")
		И ЗначениеЗаполнено(Параметры.Основание) Тогда
		ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
		СтруктураРеквизитов = ПисьмоОбъект.СформироватьСтруктуруРеквизитовПисьма(Параметры.Основание);
		Если СтруктураРеквизитов.Свойство("ТекстПисьма") Тогда
			ТекстПисьма = СтруктураРеквизитов.ТекстПисьма;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(Параметры.Основание) Тогда
			
			ФайлИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				Параметры.Основание,
				"Наименование, ИндексКартинки, ТекущаяВерсияРазмер");
			
			ВложенияСтрока = Вложения.Добавить();
			
			ВложенияСтрока.Ссылка = Параметры.Основание;
			ВложенияСтрока.ИмяФайла = ФайлИнфо.Наименование;
			ВложенияСтрока.ИндексКартинки = ФайлИнфо.ИндексКартинки;
			ВложенияСтрока.Размер = ФайлИнфо.ТекущаяВерсияРазмер;
			ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
			ВложенияСтрока.Расположение = "СсылкаНаФайл";
			
			ОтобразитьКоличествоФайловСервер();
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Параметры.Основание) Тогда
			ПисьмоОтправленоВОтветНа = Параметры.Основание;
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ПредметПереписки);
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				Объект.Предмет = ПредметПереписки;
			КонецЕсли;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Параметры.Основание) Тогда
			ПисьмоОтправленоВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ОтправленВОтветНа);
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(Параметры.Основание, Справочники.ТипыСвязей.ПредметПереписки);
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				Объект.Предмет = ПредметПереписки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
		СтруктураРеквизитов = ПисьмоОбъект.СформироватьСтруктуруРеквизитовПисьма(Неопределено);
		Если СтруктураРеквизитов.Свойство("ТекстПисьма") Тогда
			ТекстПисьма = СтруктураРеквизитов.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СписокПочтовыхАдресов")
		И ТипЗнч(Параметры.СписокПочтовыхАдресов) = Тип("СписокЗначений") Тогда
		Для каждого Элемент Из Параметры.СписокПочтовыхАдресов Цикл
			НовыйПолучатель = Объект.ПолучателиПисьма.Добавить();
			НовыйПолучатель.Контакт = Элемент.Значение.Контакт;
			НовыйПолучатель.Адрес = Элемент.Значение.Адрес;
			НовыйПолучатель.ОтображаемоеИмя = Элемент.Значение.ОтображаемоеИмя;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОтобразитьСвязиПисьма();
	
	ОтобразитьФлаг();
	
	ЗагрузитьВложения();
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
	// Формирования текста письма
	ПисьмоОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ИсходящееПисьмо"));
	СтруктураТекстаПисьма = ПисьмоОбъект.ПолучитьСтруктуруТекстаПисьма();
	ТекстПисьма = СтруктураТекстаПисьма.Текст;
	ЗначениеВДанныеФормы(ПисьмоОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если Не ПоместитьФайлыСДискаВоВременноеХранилище() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ТекстПисьма);
	
	ТекущийОбъект.ЕстьВложения = Ложь;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			ТекущийОбъект.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПолучателиПисьма.Очистить();
	ТекущийОбъект.ПолучателиКопий.Очистить();
	ТекущийОбъект.ПолучателиСкрытыхКопий.Очистить();
	
	Для каждого Строка Из Получатели Цикл
		Если Не ЗначениеЗаполнено(Строка.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru='Кому:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиПисьма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru='Копия:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru='Скрытая копия:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиСкрытыхКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПолучателиПисьмаСтрокой = ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиПисьма, Объект.УчетнаяЗапись);
	ТекущийОбъект.ПолучателиКопийСтрокой = ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиКопий, Объект.УчетнаяЗапись);
	ТекущийОбъект.ПолучателиСкрытыхКопийСтрокой = ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиСкрытыхКопий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ЗаписатьВложения(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда
		Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
			СвязиДокументов.УстановитьСвязь(
				ТекущийОбъект.Ссылка,
				Неопределено,
				ПисьмоОтправленоВОтветНа,
				Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа);
		ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
			СвязиДокументов.УстановитьСвязь(
				ТекущийОбъект.Ссылка,
				Неопределено,
				ПересылкаПисьма,
				Справочники.ТипыСвязей.ПересылкаПисьма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	СохранитьФлаг();
	
	// Замена предмета переписки
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		Если НачальноеЗначениеПредмет <> Объект.Предмет Тогда
			ВстроеннаяПочтаСервер.ЗаменитьПредметПереписки(
				Объект.Ссылка,
				Объект.Предмет,
				НачальноеЗначениеПредмет,
				УникальныйИдентификатор);
			НачальноеЗначениеПредмет = Объект.Предмет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Если НачальноеЗначениеПроект <> Объект.Проект Тогда
			ВстроеннаяПочтаСервер.ЗаменитьПроектПереписки(
				Объект.Ссылка,
				Объект.Проект,
				НачальноеЗначениеПроект,
				УникальныйИдентификатор);
			НачальноеЗначениеПроект = Объект.Проект;
		КонецЕсли;
	КонецЕсли;
	
	Вложения.Очистить();
	ЗагрузитьВложения();
	
	УстановитьСвойствоПрочтено(ТекущийОбъект.Ссылка);
	
	// Установка заголовка формы
	Автозаголовок = Ложь;
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	ОпределитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОповеститьПрочтеноПисьмо Тогда
		Оповестить("ПрочтеноПисьмо",, ЭтотОбъект);
	КонецЕсли;
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.1, Истина);
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТема", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТекст", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
	
	СписокВыбора = ПолучитьСписокВыбора(НСтр("ru ='Кому:'"));
	ЗаполнитьСписокВыбора(СписокВыбора);
	
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТема()
	
	ТекущийЭлемент = Элементы.Тема;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТекст()
	
	ТекущийЭлемент = Элементы.ТекстПисьма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ПисьмоИзменено", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указана учетная запись. Рекомендуется в настройках почты установить учетную запись по умолчанию.'"),,
			"Объект.УчетнаяЗапись",,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр.ПараметрСобытия = Объект.Ссылка Тогда
		Объект.Предмет = Параметр.Ссылка;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессИзменен"
		Или ИмяСобытия = "ЗадачаВыполнена")
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтобразитьСвязиПисьма();
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_Корреспондент" 
		Или ИмяСобытия = "Запись_ЛичныйАдресат" 
		Или ИмяСобытия = "Запись_КонтактноеЛицо") Тогда
		
		Контакт = Источник;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
		// Заменить адрес на контакт
		ВстроеннаяПочтаСервер.ЗаменитьАдресаНаКонтакт(АдресДляЗамены, Контакт, УникальныйИдентификатор);
		АдресДляЗамены = "";
		ОповеститьОбИзменении(Объект.Ссылка);
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДанныеФайлаИзменены"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр.Владелец = Объект.Ссылка Тогда
		ОбновитьВложения();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Добавляет строку в таблицу Вложения
// Параметр:
// ВложениеИнфо (Структура, Элемент списка значений)
// - Значение (Строка) полное имя файла
// - Представление (Строка) имя файла
//
&НаСервере
Процедура ДобавитьВложение(ВложениеИнфо)
	
	ИмяФайлаИнфо = РаботаСоСтроками.РазложитьПолноеИмяФайла(ВложениеИнфо.ИмяФайла);
	ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
	
	ВложенияСтрока = Вложения.Добавить();
	ЗаполнитьЗначенияСвойств(ВложенияСтрока, ВложениеИнфо);
	ВложенияСтрока.ИндексКартинки = ИндексКартинки;
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ДОСТУПНОСТЬЮ ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовФормы()
	
	ПисьмоОтправлено = ЗначениеЗаполнено(Объект.ДатаОтправки);
	ЕстьВложения = (Вложения.Количество() > 0);
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если ПисьмоОтправлено Тогда
		Элементы.ПолучателиПредставление.РедактированиеТекста = Ложь;
		Элементы.ПолучателиТипАдреса.РедактированиеТекста = Ложь;
		Элементы.ПолучателиТипАдреса.ТолькоПросмотр = Истина;
		Элементы.Отправить.Видимость = Ложь;
		Элементы.Отправить.Доступность = Ложь;
		Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
		Элементы.ЗаписатьИЗакрыть.Доступность = Истина;
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
		
		Элементы.Важность.ТолькоПросмотр = Истина;
		Элементы.УчетнаяЗапись.ТолькоПросмотр = Истина;
		Элементы.Тема.ТолькоПросмотр = Истина;
		Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		Элементы.ВложенияКонтекстноеМенюДобавить.Доступность = Ложь;
		
	Иначе
		Элементы.ПолучателиПредставление.РедактированиеТекста = Истина;
		Элементы.Отправить.Видимость = Истина;
		Элементы.Отправить.Доступность = Истина;
		Элементы.Отправить.КнопкаПоУмолчанию = Истина;
		Элементы.ЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ЗаписатьИЗакрыть.Доступность = Ложь;
		
		Элементы.Важность.ТолькоПросмотр = Ложь;
		Элементы.УчетнаяЗапись.ТолькоПросмотр = Ложь;
		Элементы.Тема.ТолькоПросмотр = Ложь;
		Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Элементы.ВложенияКонтекстноеМенюДобавить.Доступность = Истина;
		
	КонецЕсли;
	
	Элементы.Переслать.Доступность = Не ЭтоНовый;
	Элементы.СвязиОбъекта.Доступность = Не ЭтоНовый;
	Элементы.ЗадачиПоПредмету.Доступность = Не ЭтоНовый;
	Элементы.ПереместитьВКорзину.Доступность = Не ЭтоНовый;
	
	Если (ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа)
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПисьмоОтправленоВОтветНа))
		Или ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Элементы.ВставитьТекстИсходногоПисьма.Видимость = Истина;
	Иначе
		Элементы.ВставитьТекстИсходногоПисьма.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Элементы.ПолучателиПредставление.КнопкаВыбора = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоммандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.РедактироватьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = (ТекущиеДанные.Расположение = "Файл");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ИзменитьКодировку(Команда)
	
	ПараметрыОткрытия = Новый Структура("ТекущаяКодировка", Объект.Кодировка);
	Результат = Неопределено;

	ОткрытьФорму("Справочник.Файлы.Форма.ВыборКодировки", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ИзменитьКодировкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировкуЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	Результат = Результат1;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыбраннаяКодировка = Результат.Значение;
		Если ВыбраннаяКодировка <> Неопределено Тогда
			ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка)
	
	СтроковыеДанные = Новый Структура;
	СтроковыеДанные.Вставить("ТекстПисьма", ТекстПисьма);
	СтроковыеДанные.Вставить("Тема", Объект.Тема);
	Для каждого ПолучателиСтрока Из Получатели Цикл
		СтроковыеДанные.Вставить(
			"ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0"),
			ПолучателиСтрока.Представление);
	КонецЦикла;
	
	СтрокиВКодировке = РаботаСоСтроками.ПолучитьСтрокиВКодировке(СтроковыеДанные, ВыбраннаяКодировка);
	
	ТекстПисьма = СтрокиВКодировке.ТекстПисьма;
	Объект.Тема = СтрокиВКодировке.Тема;
	Для каждого ПолучателиСтрока Из Получатели Цикл
		ПолучателиСтрока.Представление = СтрокиВКодировке["ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0")];
	КонецЦикла;
	
	Объект.Кодировка = ВыбраннаяКодировка;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПоместитьФайлыСДискаВоВременноеХранилище() Тогда
		Возврат;
	КонецЕсли;
	
	КодВозврата = ПодготовитьПисьмоКОтправке();
	Если ЗначениеЗаполнено(КодВозврата) Тогда
		ПодготовленоКОтправке = Дата(1, 1, 1);
		Если КодВозврата = "ПисьмоСодержитЗанятыеФайлы" Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Некоторые файлы заняты другими пользователями для редактирования. Нельзя отправить письмо.'"));
		ИначеЕсли КодВозврата = "ПисьмоСодержитЗанятыеТекущимПользователемФайлы" Тогда
			ТекстВопроса = НСтр("ru = 'Некоторые файлы заняты Вами для редактирования. Закончить редактирование файлов и отправить письмо?'");
			Режим = Новый СписокЗначений;
			Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, отправить письмо'"));
			Режим.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет, не отправлять'"));
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьЗавершение", ЭтотОбъект), ТекстВопроса, Режим, 0);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Оповестить("ОтправленоПисьмо", Объект.Ссылка, ЭтотОбъект);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакончитьРедактированиеВсехЗанятыхФайлов();
		Отправить(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗакончитьРедактированиеВсехЗанятыхФайлов()
	
	ЗанятыеФайлы = РаботаСФайламиВызовСервера.ПолучитьПриложенныеФайлы(
		Объект.Ссылка,
		ТекущийПользователь);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
		ЗанятыеФайлы,
		УникальныйИдентификатор); 
	
КонецФункции

&НаСервере
Функция ПодготовитьПисьмоКОтправке()
	
	Объект.ПолучателиПисьма.Очистить();
	Объект.ПолучателиКопий.Очистить();
	Объект.ПолучателиСкрытыхКопий.Очистить();
	
	СписокУникальныхАдресов = Новый Массив;
	Для каждого ПолучателиСтрока Из Получатели Цикл
		
		Если Не ЗначениеЗаполнено(ПолучателиСтрока.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокУникальныхАдресов.Найти(ПолучателиСтрока.Адрес) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя отправить письмо, т.к. адресат ""%1"" указан дважды.'"),
				ПолучателиСтрока.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Получатели[" + ПолучателиСтрока.ПолучитьИдентификатор() + "].Представление");
			Возврат "НайденДублирующийсяАдресЭлектроннойПочты";
		КонецЕсли;
		Если Не РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(ПолучателиСтрока.Адрес) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя отправить письмо, т.к. для получателя указан некорректный почтовый адрес ""%1""'"),
				ПолучателиСтрока.Адрес);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"Получатели[" + ПолучателиСтрока.ПолучитьИдентификатор() + "].Представление");
			Возврат "ПисьмоНеЗаполнено";
		КонецЕсли;
		
		СписокУникальныхАдресов.Добавить(ПолучателиСтрока.Адрес);
		
		Если ПолучателиСтрока.ТипАдреса = НСтр("ru='Кому:'") Тогда
			ЗаполнитьЗначенияСвойств(Объект.ПолучателиПисьма.Добавить(), ПолучателиСтрока);
		КонецЕсли;
		
		Если ПолучателиСтрока.ТипАдреса = НСтр("ru='Копия:'") Тогда
			ЗаполнитьЗначенияСвойств(Объект.ПолучателиКопий.Добавить(), ПолучателиСтрока);
		КонецЕсли;
		
		Если ПолучателиСтрока.ТипАдреса = НСтр("ru='Скрытая копия:'") Тогда
			ЗаполнитьЗначенияСвойств(Объект.ПолучателиСкрытыхКопий.Добавить(), ПолучателиСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ПолучателиПисьмаСтрокой = ТаблицаПолучателейВСтроку(Объект.ПолучателиПисьма, Объект.УчетнаяЗапись);
	Объект.ПолучателиКопийСтрокой = ТаблицаПолучателейВСтроку(Объект.ПолучателиКопий, Объект.УчетнаяЗапись);
	Объект.ПолучателиСкрытыхКопийСтрокой = ТаблицаПолучателейВСтроку(Объект.ПолучателиСкрытыхКопий, Объект.УчетнаяЗапись);
	
	Если Объект.ПолучателиПисьма.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо указать хотя бы одного получателя письма.'"),,
				"Получатели");
		Возврат "ПисьмоНеЗаполнено";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ПисьмоСодержитЗанятыеФайлы(Объект.Ссылка) Тогда
		Если ПисьмоСодержитЗанятыеФайлы(Объект.Ссылка, ТекущийПользователь) Тогда
			Возврат "ПисьмоСодержитЗанятыеФайлы";
		Иначе
			Возврат "ПисьмоСодержитЗанятыеТекущимПользователемФайлы";
		КонецЕсли;
	КонецЕсли;
	
	Объект.ПодготовленоКОтправке = ТекущаяДатаСеанса();
	ПараметрыЗаписи = Новый Структура;
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат "НеУдалосьЗаписатьПисьмо";
	Иначе
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
		ВстроеннаяПочтаСервер.ПолучениеИОтправкаПисем();
	КонецЕсли;

	Возврат "";
	
КонецФункции

// Возвращает признак наличия занятых вложений в письме.
// Если задан параметр Пользователь, то возвращает признак
// наличия занятых вложений НЕ этим пользователем.
//
&НаСервере
Функция ПисьмоСодержитЗанятыеФайлы(Письмо, Пользователь = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|		ПО Файлы.ВладелецФайла = ИсходящееПисьмо.Ссылка
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Письмо
		|	И НЕ Файлы.ПометкаУдаления
		|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И (&Пользователь = НЕОПРЕДЕЛЕНО
		|			ИЛИ Файлы.Редактирует <> &Пользователь)");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Письмо еще не записано. Для пересылки сохраните письмо.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ПереслатьПисьмо(Объект.Ссылка);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", Объект.Комментарий);
	РезультатФормы = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, Новый ОписаниеОповещения("РедактироватьКомментарийЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатФормы = Результат;
	Если ТипЗнч(РезультатФормы) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Комментарий = РезультатФормы;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПоПредмету(Команда)
	
	ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязиОбъекта(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму(
		"РегистрСведений.СвязиДокументов.Форма.ФормаСвязейОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколРаботы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектДанных", Объект.Ссылка);
		//ОткрытьФорму("РегистрСведений.ПротоколРаботыПользователей.Форма.ПротоколРаботы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПереместитьВКорзинуСервер();
	
	Оповестить("ПисьмоИзменено", Объект.Ссылка, ЭтотОбъект);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВКорзинуСервер()
	
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	Попытка
		ВстроеннаяПочтаСервер.ПоместитьПисьмоВКорзину(Объект.Ссылка);
	Исключение
		Прочитать();
		ВызватьИсключение;
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	ТекстИдентификаторы = Новый ТекстовыйДокумент;
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор сообщения:  " + Объект.ИдентификаторСообщения);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Дата", Объект.Дата);
	СтруктураПараметры.Вставить("Отправлено", Объект.ДатаОтправки);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстИдентификаторы);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПараметрыПисьма", СтруктураПараметры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если АктивныеЗадачиПоПисьму.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, АктивныеЗадачиПоПисьму[0].Значение);
	Иначе
		ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", Объект.Ссылка);
	ПараметрыФормы.Вставить(
		"Заголовок",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процессы и задачи по предмету: ""%1""'"),
			Заголовок));
	ОткрытьФорму(
		"ОбщаяФорма.БизнесПроцессыИЗадачиПоПредмету",
		ПараметрыФормы);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТЕКСТОМ ПИСЬМА

&НаКлиенте
Процедура ВставитьПодпись(Команда)
	
	СписокВыбора = ВстроеннаяПочтаСервер.ПолучитьСписокПодписейПользователя();
	Если СписокВыбора.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не найдено ни одной подписи. Указать и настроить подписи можно в настройках почты.'"));
		Возврат;
	КонецЕсли;
	
	Выбор = СписокВыбора.ВыбратьЭлемент(НСтр("ru = 'Выбор подписи'"));
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Подпись = Выбор.Значение;
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ТекстПисьма,
		Символы.ПС,
		Подпись);
		
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстИсходногоПисьма(Команда)
	
	Если ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		Письмо = ПисьмоОтправленоВОтветНа;
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		Письмо = ПересылкаПисьма;
	Иначе
		Возврат;
	КонецЕсли;
	
	ШапкаИсходногоПисьма = ВстроеннаяПочтаСервер.СформироватьШапкуПисьмаПростойТекст(Письмо);
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ТекстПисьма,
		Символы.ПС,
		ШапкаИсходногоПисьма);
	
	ТекстИсходногоПисьма = ВстроеннаяПочтаСервер.СформироватьПростойТекстДляПисьма(Письмо);
	РаботаСоСтроками.ДобавитьКвотирование(ТекстИсходногоПисьма, ">");
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ТекстПисьма,
		Символы.ПС,
		ТекстИсходногоПисьма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

&НаСервере
Процедура ЗагрузитьВложения()
	
	ТаблицаВложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Объект.Ссылка, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Истина); // ВключатьПомеченныеНаУдаление
		
	Вложения.Очистить();
	Для каждого Вложение Из ТаблицаВложения Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, Вложение);
		Если ВложенияСтрока.ПометкаУдаления Тогда
			ВложенияСтрока.ИндексКартинки = ВложенияСтрока.ИндексКартинки + 1;
		КонецЕсли;
		ВложенияСтрока.Расположение = "Файл";
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВложения()
	
	ТаблицаВложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Объект.Ссылка, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Истина); // ВключатьПомеченныеНаУдаление
	
	Для каждого ТаблицаВложенияСтрока Из ТаблицаВложения Цикл
		Для каждого ВложенияСтрока Из Вложения Цикл
			Если ТаблицаВложенияСтрока.Ссылка = ВложенияСтрока.Ссылка Тогда
				ЗаполнитьЗначенияСвойств(ВложенияСтрока, ТаблицаВложенияСтрока);
				Если ВложенияСтрока.ПометкаУдаления Тогда
					ВложенияСтрока.ИндексКартинки = ВложенияСтрока.ИндексКартинки + 1;
				КонецЕсли;
				ВложенияСтрока.Расположение = "Файл";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоФайловСервер()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияИмяФайла.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияИмяФайла.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоличествоФайловКлиент()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияИмяФайла.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияИмяФайла.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоместитьФайлыСДискаВоВременноеХранилище()
	
	#Если Не ВебКлиент Тогда
		Для каждого ВложенияСтрока Из Вложения Цикл
			Если ВложенияСтрока.Расположение = "НаДиске" Тогда
				
				Пока Истина Цикл
					Попытка
						Данные = Новый ДвоичныеДанные(ВложенияСтрока.ИмяФайлаНаДиске);
						Прервать;
					Исключение
						СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось загрузить файл ""%1"" по причине:
								|""%2""
								|Повторить операцию?'"),
							ВложенияСтрока.ИмяФайла,
							СообщениеОбОшибке);
						КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
						Если КодВозврата <> КодВозвратаДиалога.Повторить Тогда
							Возврат Ложь;
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
				
				ВложенияСтрока.Адрес = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				Если Не ФайловыеФункцииСлужебныйКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере Тогда
					ВложенияСтрока.АдресИзвлеченногоТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ВложенияСтрока.ИмяФайлаНаДиске,
						УникальныйИдентификатор,
						Ложь); // Отказ
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
		ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.Расположение <> "Файл" Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайлов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ОтключитьОбработчикОжидания("ДобавитьФайлСДиска");
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		МассивФайлов = Новый Массив;
		МассивФайловНаДиске = Новый Массив;
		Для каждого ПеретаскиваемыйЭлемент Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("СправочникСсылка.Файлы") Тогда
				МассивФайлов.Добавить(ПеретаскиваемыйЭлемент);
			ИначеЕсли ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("Файл") Тогда
				МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(ПеретаскиваемыйЭлемент));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			ДобавитьВложениеФайлы(МассивФайлов);
		КонецЕсли;
		
		Если МассивФайловНаДиске.Количество() > 0 Тогда
			ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		ДобавитьВложениеФайлы(МассивФайлов);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		Файл = ПараметрыПеретаскивания.Значение;
		МассивФайловНаДиске = Новый Массив;
		МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(Файл));
		ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнформациюОФайлеНаДиске(Файл)
	
	ФайлИнфо = Новый Структура;
	ФайлИнфо.Вставить("Имя", Файл.Имя);
	ФайлИнфо.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ФайлИнфо.Вставить("ПолноеИмя", Файл.ПолноеИмя);
	ФайлИнфо.Вставить("Путь", Файл.Путь);
	ФайлИнфо.Вставить("Размер", Файл.Размер());
	
	Возврат ФайлИнфо;
	
КонецФункции

&НаСервере
Процедура ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске)
	
	Для каждого ФайлНаДиске Из МассивФайловНаДиске Цикл
		ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(ФайлНаДиске.Имя);
		
		ВложенияСтрока = Вложения.Добавить();
		ВложенияСтрока.Ссылка = Неопределено;
		ВложенияСтрока.Представление = ИмяФайлаИнфо.Имя;
		ВложенияСтрока.ИмяФайла = ФайлНаДиске.Имя;
		ВложенияСтрока.ИмяФайлаНаДиске = ФайлНаДиске.ПолноеИмя;
		ВложенияСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
		ВложенияСтрока.Размер = ФайлНаДиске.Размер;
		ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ФайлНаДиске.Размер);
		ВложенияСтрока.ПометкаУдаления = Ложь;
		ВложенияСтрока.Редактирует = Неопределено;
		ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
		ВложенияСтрока.Расположение = "НаДиске";
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеФайлы(МассивФайлов)
	
	ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
	Для каждого ФайлИнфо Из ФайлыИнфо Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
	КонецЦикла;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоммандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПодключитьОбработчикОжидания("ДобавитьФайлСДиска", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСДиска()
	
	ВладелецФайла = Объект.Ссылка;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();

	// Создание из файла
	ПолноеИмяФайла = "";
	
	РасширениеПодключено = Неопределено;

	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ДобавитьФайлСДискаЗавершение1", ЭтотОбъект, Новый Структура("ВладелецФайла", ВладелецФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСДискаЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
	
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	
	
	РасширениеПодключено = Подключено;
	Если РасширениеПодключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		РабочийКаталог = РаботаСФайламиВызовСервера.ПолучитьРабочийКаталог(ВладелецФайла);
		ВыборФайла.Каталог = РабочийКаталог;
		
		ВыборФайла.Показать(Новый ОписаниеОповещения("ДобавитьФайлСДискаЗавершение", ЭтотОбъект, Новый Структура("ВыборФайла", ВыборФайла)));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСДискаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
	
	
	Результат = (ВыбранныеФайлы <> Неопределено);
	ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	МассивФайловНаДиске = Новый Массив;
	МассивФайловНаДиске.Добавить(ПолучитьИнформациюОФайлеНаДиске(Файл));
	ДобавитьВложениеФайлыНаДиске(МассивФайловНаДиске);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ВывестиПредупреждениеВложениеНеЗаписано();
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.Вложения.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные.Расположение <> "Файл" Тогда
		ВывестиПредупреждениеВложениеНеЗаписано();
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(ФайлСсылка)
	
	// Открытие файла для просмотра
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	Для каждого ВложениеСтрока Из Вложения Цикл
		Если ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				ВложениеСтрока.АдресИзвлеченногоТекста, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			ВложениеСтрока.Расположение = "Файл";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВложений()
	
	МассивФайлов = Новый Массив;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если ВложенияСтрока.Расположение = "Файл" Тогда
			МассивФайлов.Добавить(ВложенияСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
		Для каждого ВложенияСтрока Из Вложения Цикл
			Для каждого ФайлИнфо Из ФайлыИнфо Цикл
				Если ВложенияСтрока.Расположение = "Файл" И ВложенияСтрока.Ссылка = ФайлИнфо.Ссылка Тогда
					ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ВывестиПредупреждениеВложениеНеЗаписано();
		Возврат;
	КонецЕсли;
	
	ЗакончитьРедактированиеФайла(Элементы.Вложения.ТекущиеДанные.Ссылка);
	
	ОбновитьСписокВложений();
	УстановитьДоступностьКоммандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение <> "Файл" Тогда
		ВывестиПредупреждениеВложениеНеЗаписано();
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если ТекущиеДанные.Расположение <> "Файл" Тогда
		ВывестиПредупреждениеВложениеНеЗаписано();
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтотОбъект.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляРедактирования(ФайлСсылка)
	
	// Открытие файла для редактирования
	КомандыРаботыСФайламиКлиент.Редактировать(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайла(ФайлСсылка)

	КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
		ФайлСсылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "НаДиске"
		Или ТекущиеДанные.Расположение = "СсылкаНаФайл" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "ВременноеХранилище" Тогда
		Если ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "Файл" Тогда
		Отказ = Истина;
		ВложениеПометитьНаУдаление(ТекущиеДанные.Ссылка);
		ОбновитьСписокВложений();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдаление(ФайлСсылка)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ВывестиПредупреждениеВложениеНеЗаписано();
		Возврат;
	КонецЕсли;
	
	ОткрытьФайлДляРедактирования(Элементы.Вложения.ТекущиеДанные.Ссылка);
	
	ОбновитьСписокВложений();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛУЧАТЕЛЯМИ

&НаСервере
Процедура ДобавитьПолучателейИзТаблЧасти(ПолучателиПисьма, ТипАдреса)
	
	Для Каждого Строка Из ПолучателиПисьма Цикл
		ДобавитьПолучателя(ТипАдреса, Строка.Контакт, Строка.ОтображаемоеИмя, Строка.Адрес);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателя(ТипАдреса, Контакт, ОтображаемоеИмя, Адрес)
	
	НоваяСтрока = Получатели.Добавить();
	
	НоваяСтрока.Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
		Контакт,
		ОтображаемоеИмя,
		Адрес,
		Объект.УчетнаяЗапись);
		
	НоваяСтрока.Адрес = Адрес;
	НоваяСтрока.Контакт = Контакт;
	НоваяСтрока.ТипАдреса = ТипАдреса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СВОЙСТВОМ ПРОЧТЕНО

&НаСервере
Процедура УстановитьСвойствоПрочтено(Письмо)
	
	Прочтено = РегистрыСведений.СведенияОПисьмах.ПолучитьСвойствоПрочтено(Письмо);
	Если Не Прочтено Тогда
		РегистрыСведений.СведенияОПисьмах.УстановитьСвойствоПрочтено(Письмо, Истина);
		ОповеститьПрочтеноПисьмо = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ИСТОРИЕЙ В СПИСКАХ ВЫБОРА

&НаКлиенте
Процедура ОчиститьИсториюПолучателиПисьмаСтрокой(Команда)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	ОчиститьСписокВыбора(ИмяНастройкиПоТипуАдреса(СтрокаДанных.ТипАдреса));
	
	СписокВыбора = ПолучитьСписокВыбора();
	СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПисемВПерепискеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(ПисьмоОтправленоВОтветНа) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ПисьмоОтправленоВОтветНа);
	ИначеЕсли ЗначениеЗаполнено(ПересылкаПисьма) Тогда
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ПересылкаПисьма);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// УЧЕТ ВРЕМЕНИ

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Составление письма ""%1""'"),
			Объект.Тема);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ПараметрыОтчета = Неопределено;

		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект, Новый Структура("ПараметрыОповещения", ПараметрыОповещения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
	
	
	ПараметрыОтчета = Результат;
	Если ПараметрыОтчета <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтотОбъект.Элементы.ПереключитьХронометраж,
		Ложь); // Выполнена
		
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РежимДобавленияАдресата = Истина;
	
	Если Элементы.ПолучателиПредставление.ТолькоПросмотр Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	НовыйТекст = Текст;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		РезультатВыбора = Неопределено;
		СписокВыбора = ПолучитьСписокВыбора();
		ДанныеВыбора = ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, СписокВыбора);
		Если ДанныеВыбора.Количество() = 1 Тогда
			РезультатВыбора = ДанныеВыбора[0];
		ИначеЕсли ДанныеВыбора.Количество() > 1 Тогда
			РезультатВыбора = ВыбратьИзСписка(ДанныеВыбора, Элементы.Получатели);
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			
			СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
			НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
				СтрокаДанных.Контакт,
				"",
				РезультатВыбора.Значение.Адрес,
				Объект.УчетнаяЗапись);
			СтрокаДанных.Представление = НовыйТекст;
			СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
			
			ОбновитьСписокВыбора(СтрокаДанных.ТипАдреса);
			СписокВыбора = ПолучитьСписокВыбора();
			ЗаполнитьСписокВыбора(СписокВыбора);
			
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаДанных.Адрес = НовыйТекст;
	СтрокаДанных.Представление = НовыйТекст;
	СтрокаДанных.Контакт = Неопределено;
		
	ОбновитьСписокВыбора(СтрокаДанных.ТипАдреса);
	СписокВыбора = ПолучитьСписокВыбора();
	ЗаполнитьСписокВыбора(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		
		СтрокаДанных.Адрес = ВыбранноеЗначение.Адрес;
		СтрокаДанных.Контакт = ВыбранноеЗначение.Контакт;
		Представление = ВыбранноеЗначение.Представление;
			
		Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
			СтрокаДанных.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 <%2>",
				Строка(СтрокаДанных.Контакт),
				СтрокаДанных.Адрес);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Представление) И СтрокаДанных.Представление <> СтрокаДанных.Адрес Тогда
				
			Если Найти(Представление, "@") <> 0 Тогда
				СтрокаДанных.Представление = Представление;
			Иначе	
				СтрокаДанных.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1 <%2>",
					Представление,
					СтрокаДанных.Адрес);
			КонецЕсли;		
				
		Иначе
			СтрокаДанных.Представление = СтрокаДанных.Адрес;
		КонецЕсли;	
			
		Модифицированность = Истина;
		ОбновитьСписокВыбора(СтрокаДанных.ТипАдреса);
		СписокВыбора = ПолучитьСписокВыбора();
		ЗаполнитьСписокВыбора(СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	ТекстДляПолученияДанныхВыбора = "";
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ";");
	ПодстрокиДанныхОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных.Представление, ";");
	
	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1)
			Или ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	СписокВыбора = ПолучитьСписокВыбора();
	ДанныеВыбора = ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, СписокВыбора);
	
	Если ДанныеВыбора.Количество() <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, СписокВыбора)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	
	Для Каждого СтрокаСписка Из СписокВыбора Цикл
		
		ЕстьДубликат = Ложь;
		
		Значение = СтрокаСписка.Значение;
		
		Если Не ЗначениеЗаполнено(Значение.Контакт)
			И (Найти(Значение.Адрес, Текст) <> 0 Или Найти(Значение.Представление, Текст) <> 0) Тогда
		
			Для Каждого Строка Из ВозвращаемыйСписок Цикл
				
				Если Строка.Значение.Контакт = Значение.Контакт И Строка.Значение.Адрес = Значение.Адрес Тогда
					ЕстьДубликат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьДубликат Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеВыбора = Новый Структура;
			ЗначениеВыбора.Вставить("Контакт", Значение.Контакт);
			ЗначениеВыбора.Вставить("Адрес", Значение.Адрес);
			ЗначениеВыбора.Вставить("Представление", Значение.Представление);
			
			Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
				Значение.Контакт,
				Значение.Представление,
				Значение.Адрес);
							
			ВозвращаемыйСписок.Добавить(ЗначениеВыбора, Представление);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КонтактыПользователей.Контакт КАК Контакт,
		|	ПРЕДСТАВЛЕНИЕ(КонтактыПользователей.Контакт) КАК Представление,
		|	КонтактыПользователей.КонтактнаяИнформация КАК АдресЭП,
		|	0 КАК ПорядокВСписке,
		|	КонтактыПользователей.Вид КАК Вид
		|ИЗ
		|	РегистрСведений.КонтактыПользователей КАК КонтактыПользователей
		|ГДЕ
		|	КонтактыПользователей.Пользователь = &Пользователь
		|	И КонтактыПользователей.Тип = &Тип
		|	И (КонтактыПользователей.Представление ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ КонтактыПользователей.КонтактнаяИнформация ПОДОБНО &ВведеннаяСтрока)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка),
		|	ТаблицаКонтактнаяИнформация.АдресЭП,
		|	1,
		|	ТаблицаКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.Пользователи КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
		|			И (Таблица.Недействителен = ЛОЖЬ)
		|ГДЕ
		|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка),
		|	ТаблицаКонтактнаяИнформация.АдресЭП,
		|	1,
		|	ТаблицаКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.Контрагенты КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
		|ГДЕ
		|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка),
		|	ТаблицаКонтактнаяИнформация.АдресЭП,
		|	1,
		|	ТаблицаКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
		|ГДЕ
		|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка),
		|	ТаблицаКонтактнаяИнформация.АдресЭП,
		|	1,
		|	ТаблицаКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.ФизическиеЛица КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
		|ГДЕ
		|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка),
		|	ТаблицаКонтактнаяИнформация.АдресЭП,
		|	1,
		|	ТаблицаКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.ЛичныеАдресаты КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ТаблицаКонтактнаяИнформация.АдресЭП <> """")
		|			И (Таблица.Пользователь = &Пользователь)
		|ГДЕ
		|	(Таблица.Наименование ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
		|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокВСписке";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", Текст + "%");
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() И ВозвращаемыйСписок.Количество() = 0 Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЕстьДубликат = Ложь;
		
		Для Каждого Строка Из ВозвращаемыйСписок Цикл
			
			Если Строка.Значение.Контакт = Выборка.Контакт И Строка.Значение.Адрес = Выборка.АдресЭП Тогда
				ЕстьДубликат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьДубликат Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Контакт", Выборка.Контакт);
		ЗначениеВыбора.Вставить("Адрес", Выборка.АдресЭП);
		ЗначениеВыбора.Вставить("Представление", Выборка.Представление);
		
		Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
			Выборка.Контакт,
			Выборка.Представление,
			Выборка.АдресЭП);
						
		Если Выборка.Вид <> Справочники.ВидыКонтактнойИнформации.EmailАдресата
			И Выборка.Вид <> Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица
			И Выборка.Вид <> Справочники.ВидыКонтактнойИнформации.EmailКорреспондента
			И Выборка.Вид <> Справочники.ВидыКонтактнойИнформации.EmailОрганизации
			И Выборка.Вид <> Справочники.ВидыКонтактнойИнформации.EmailПользователя
			И Выборка.Вид <> Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица Тогда
			
			Представление = Представление + " - " + Строка(Выборка.Вид);
			
		КонецЕсли;
			
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора, Представление);
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
		ПоказатьЗначение(Неопределено, СтрокаДанных.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзАдреснойКниги()
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Возврат;
	КонецЕсли;	
	
	ОчиститьСообщения();
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	МножественныйВыбор = Не ЗначениеЗаполнено(СтрокаДанных.Представление);
	
	СписокВыбранных = Новый СписокЗначений;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", СтрокаДанных.ТипАдреса);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыОткрытия.Вставить("ТекущийКонтакт", СтрокаДанных.Контакт);
	
	// Открытие формы для редактирования списка адресатов
	ИмяОбщейФормы = "ОбщаяФорма.АдреснаяКнига";
	Результат = ОткрытьФормуМодально(ИмяОбщейФормы, ПараметрыОткрытия);
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	// Заполнение адресатов
	Если Не МножественныйВыбор Тогда
		
		Если Результат.Количество() > 0 Тогда
			
			СтрокаДанных.Адрес = Результат[0].Адрес;
			СтрокаДанных.Контакт = Результат[0].Контакт;
			СтрокаДанных.Представление = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Строка(СтрокаДанных.Контакт),
				СтрокаДанных.Адрес);
				
			ОбновитьСписокВыбора(СтрокаДанных.ТипАдреса);
			СписокВыбора = ПолучитьСписокВыбора();
			ЗаполнитьСписокВыбора(СписокВыбора);
			
		КонецЕсли;
		
	Иначе
		
		Индекс = 0;
		Для Индекс = 0 По Результат.Количество() - 1 Цикл
			Строка = Результат[Индекс];
			
			НоваяСтрока = Неопределено;
			Если Индекс = 0 Тогда
				НоваяСтрока = СтрокаДанных;
			Иначе
				НоваяСтрока = Получатели.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Представление = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Строка(Строка.Контакт),
				Строка.Адрес);
			
			НоваяСтрока.Адрес = Строка.Адрес;
			НоваяСтрока.Контакт = Строка.Контакт;
			НоваяСтрока.ТипАдреса = Строка.Группа;
			
			ОбновитьСписокВыбора(ИмяНастройкиПоТипуАдреса(НоваяСтрока.ТипАдреса));
			СписокВыбора = ПолучитьСписокВыбора();
			ЗаполнитьСписокВыбора(СписокВыбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресатов(Команда)
	
	Элементы.Получатели.ДобавитьСтроку();
	ВыбратьИзАдреснойКниги();
	ОтменаРедактирования = Ложь;
	Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИзАдреснойКниги();
	
КонецПроцедуры

&НаКлиенте
Функция ИмяНастройкиПоТипуАдреса(ТипАдреса)
	
	Если ТипАдреса = НСтр("ru='Кому:'") Тогда
		Возврат "ПолучателиПредставлениеКому";
	ИначеЕсли ТипАдреса = НСтр("ru='Копия:'") Тогда
		Возврат "ПолучателиПредставлениеКопия";
	ИначеЕсли ТипАдреса = НСтр("ru='Скрытая копия:'") Тогда
		Возврат "ПолучателиПредставлениеСкрытаяКопия";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПолучателиПредставлениеПриИзменении(Элемент)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	ОбновитьСписокВыбора(СтрокаДанных.ТипАдреса);
	
	СписокВыбора = ПолучитьСписокВыбора();
	ЗаполнитьСписокВыбора(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	АвтоматическиНачатоРедактированиеАдреса = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		Возврат;
	КонецЕсли;	
	
	СписокВыбора = ПолучитьСписокВыбора();
	ЗаполнитьСписокВыбора(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора(СписокВыбора)
	
	Элементы.ПолучателиПредставление.СписокВыбора.Очистить();
	Для каждого Строка Из СписокВыбора Цикл
		
		Если ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
			Элементы.ПолучателиПредставление.СписокВыбора.Добавить(Строка.Значение, Строка.Значение.Представление);
		Иначе
			Элементы.ПолучателиПредставление.СписокВыбора.Добавить(Строка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПолучателиПредставление.КнопкаСпискаВыбора = (Элементы.ПолучателиПредставление.СписокВыбора.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВыбора(ТипАдреса = "")
	
	Если ТипАдреса = "" Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		ТипАдреса = СтрокаДанных.ТипАдреса;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	Если ТипАдреса = НСтр("ru='Кому:'") Тогда
		СписокВыбора = СписокВыбораКому;
	ИначеЕсли ТипАдреса = НСтр("ru='Копия:'") Тогда
		СписокВыбора = СписокВыбораКопия;
 	ИначеЕсли ТипАдреса = НСтр("ru='Скрытая копия:'") Тогда
		СписокВыбора = СписокВыбораСкрытаяКопия;
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции


&НаКлиенте
// Обновляет список выбора элемента формы и сохраняет его в хранилище системных настроек
//
Процедура ОбновитьСписокВыбора(ТипАдреса = "")
	
	ХранитьЭлементов = 20;
	
	СтрокаДанных = Неопределено;
	Если Элементы.Получатели.ТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		ТипАдреса = СтрокаДанных.ТипАдреса;
	КонецЕсли;
	
	СписокВыбора = ПолучитьСписокВыбора(ТипАдреса);
	
	ТекстРедактирования = Элементы.ПолучателиПредставление.ТекстРедактирования;
	Если Не ЗначениеЗаполнено(ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	Контакт = Неопределено;
	Адрес = "";
	Если СтрокаДанных <> Неопределено Тогда
		
		Контакт = СтрокаДанных.Контакт;
		Адрес = СтрокаДанных.Адрес;
		
	КонецЕсли;
	
	Значение = Новый Структура;
	Значение.Вставить("Контакт", Контакт);
	Значение.Вставить("Адрес", Адрес);
	Значение.Вставить("Представление", ТекстРедактирования);
	
	Для Индекс = 0 По СписокВыбора.Количество() - 1 Цикл
		
		ЭлементСпискаЗначений = СписокВыбора[Индекс];
		Если ЭлементСпискаЗначений.Значение.Контакт = Значение.Контакт
			И ЭлементСпискаЗначений.Значение.Адрес = Значение.Адрес Тогда
			СписокВыбора.Удалить(Индекс);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВыбора.Вставить(0, Значение);
	
	КоличествоСтрок = СписокВыбора.Количество();
	Пока КоличествоСтрок > ХранитьЭлементов Цикл
		СписокВыбора.Удалить(КоличествоСтрок - 1);
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	ИмяНастройкиСпискаВыбора = ИмяНастройкиПоТипуАдреса(СтрокаДанных.ТипАдреса);
	СохранитьСписокВыбора(СписокВыбора, ИмяНастройкиСпискаВыбора);
	Элементы.ПолучателиПредставление.КнопкаСпискаВыбора = (Элементы.ПолучателиПредставление.СписокВыбора.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
// Очищает список выбора элемента формы и сохраняет его в хранилище системных настроек
//
Процедура ОчиститьСписокВыбора(ИмяНастройкиСпискаВыбора = "")
	
	СписокВыбора = Элементы.ПолучателиПредставление.СписокВыбора;
	СписокВыбора.Очистить();
	СохранитьСписокВыбора(СписокВыбора, ИмяНастройкиСпискаВыбора);
	Элементы.ПолучателиПредставление.КнопкаСпискаВыбора = (Элементы.ПолучателиПредставление.СписокВыбора.Количество() > 0);
	
КонецПроцедуры

&НаСервере
// Созраняет список выбора элемента формы в хранилище системных настроек
//
Процедура СохранитьСписокВыбора(СписокВыбора, ИмяНастройкиСпискаВыбора = "")
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, ИмяНастройкиСпискаВыбора, СписокВыбора);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаПолучателейВСтроку(Знач ТаблицаПолучателей, УчетнаяЗапись = Неопределено)
	
	Если ТаблицаПолучателей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаКВозврату = "";
	Для Каждого Получатель Из ТаблицаПолучателей Цикл
		
		Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
			Получатель.Контакт,
			Получатель.ОтображаемоеИмя,
			Получатель.Адрес,
			УчетнаяЗапись);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			СтрокаКВозврату,
			", ",
			Представление);
			
	КонецЦикла;
	
	Возврат СтрокаКВозврату;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СВЯЗИ

&НаКлиенте
Процедура ПересланоПисьмомСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПересланоПисьмом.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ПересланоПисьмом[0].Значение);
	Иначе
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмоОтправленоВОтветНаСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ПисьмоОтправленоВОтветНа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученОтветСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПолученОтвет.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ПолученОтвет[0].Значение);
	Иначе
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	КоличествоАдресатовДоДобавления = Получатели.Количество();
	Если Не ЗначениеЗаполнено(СтрокаДанных.ТипАдреса) Тогда
		Если КоличествоАдресатовДоДобавления = 1 Тогда
			СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");
		Иначе
			СтрокаДанных.ТипАдреса = НСтр("ru='Копия:'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если АвтоматическиНачатоРедактированиеАдреса И ОтменаРедактирования Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаКлиенте
Процедура ВывестиПредупреждениеВложениеНеЗаписано()
	
	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для просмотра или редактирования файла необходимо записать письмо.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОтобразитьКоличествоФайловКлиент();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГОМ

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Красный");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Синий");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.СинийФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Желтый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Зеленый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Оранжевый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Лиловый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.ПустаяСсылка");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ПустойФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьФлаг()
	
	ИнформацияОФлагеПисьма = ВстроеннаяПочтаСервер.ПолучитьИнформациюОФлагеПисьма(Объект.Ссылка);
	
	Флаг = ИнформацияОФлагеПисьма.Флаг;
	Элементы.ПодменюФлаги.Картинка = ИнформацияОФлагеПисьма.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФлаг()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Флаг = Перечисления.ФлагиПисем.ПустаяСсылка() Тогда
			РегистрыСведений.ФлагиПисем.ОчиститьФлаг(Объект.Ссылка, Пользователи.ТекущийПользователь());
		Иначе
			РегистрыСведений.ФлагиПисем.УстановитьФлаг(Объект.Ссылка, Пользователи.ТекущийПользователь(), Флаг);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичногоАдресата(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Элементы.Получатели.ТекущиеДанные.Адрес,
			Представление);
			
		АдресДляЗамены = Элементы.Получатели.ТекущиеДанные.Адрес;	
		
		КодВозврата = Неопределено;
	
		
		ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорреспондента(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
			
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Элементы.Получатели.ТекущиеДанные.Адрес,
			Представление);
			
		АдресДляЗамены = Элементы.Получатели.ТекущиеДанные.Адрес;
		
		КодВозврата = Неопределено;

		
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Корреспондент = Неопределено;

		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,,,,, Новый ОписаниеОповещения("СоздатьКонтактноеЛицоЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Корреспондент = Результат;
	
	Если ЗначениеЗаполнено(Корреспондент) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		
		ПараметрыФормы = Новый Структура("Адрес, Представление, Корреспондент", 
		Элементы.Получатели.ТекущиеДанные.Адрес,
		Представление,
		Корреспондент);
		
		АдресДляЗамены = Элементы.Получатели.ТекущиеДанные.Адрес;
		
		КодВозврата = Неопределено;
		
		
		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		УстановитьДоступностьКомандСохраненияКонтакта(Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт));
	Иначе	
		УстановитьДоступностьКомандСохраненияКонтакта(Ложь);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСохраненияКонтакта(Доступность)
	
	 Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьЛичногоАдресата.Доступность = Доступность;
	 Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьКорреспондента.Доступность = Доступность;
	 Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьКонтактноеЛицо.Доступность = Доступность;
	 Элементы.ФормаСоздатьЛичногоАдресата.Доступность = Доступность;
	 Элементы.ФормаСоздатьКорреспондента.Доступность = Доступность;
	 Элементы.ФормаСоздатьКонтактноеЛицо.Доступность = Доступность;
		
КонецПроцедуры
