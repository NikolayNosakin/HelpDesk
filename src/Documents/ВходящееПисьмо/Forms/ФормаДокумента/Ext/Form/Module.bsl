////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Запрет создания новых
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПолученоВОтветНаДокумент = СвязиДокументов.ПолучитьСвязанныйДокумент(
		Объект.Ссылка,
		Справочники.ТипыСвязей.ПолученоВОтветНаДокумент);
	Если ЗначениеЗаполнено(ПолученоВОтветНаДокумент) Тогда
		ПолученоВОтветНа = ПолученоВОтветНаДокумент;
	Иначе
		ПолученоВОтветНаПисьмо = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо);
		Если ЗначениеЗаполнено(ПолученоВОтветНаПисьмо) Тогда
			ПолученоВОтветНа = ПолученоВОтветНаПисьмо
		КонецЕсли;
	КонецЕсли;
	
	ОтправленОтвет.Очистить();
	Для каждого СвязанноеПисьмо Из СвязиДокументов.ПолучитьСвязанныеДокументы(
		Объект.Ссылка,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо) Цикл
		ОтправленОтвет.Добавить(СвязанноеПисьмо);
	КонецЦикла;
	Для каждого СвязанныйДокумент Из СвязиДокументов.ПолучитьСвязанныеДокументы(
		Объект.Ссылка,
		Справочники.ТипыСвязей.ОтправленОтветныйДокумент) Цикл
		ОтправленОтвет.Добавить(СвязанныйДокумент);
	КонецЦикла;
	
	ПересланоПисьмом.ЗагрузитьЗначения(
		СвязиДокументов.ПолучитьСвязанныеДокументы(
			Объект.Ссылка, Справочники.ТипыСвязей.ПересланоПисьмом));
	
	ОтобразитьСвязиПисьма();
	
	// Cвойство письма "Прочтено"
	УстановитьСвойствоПрочтено();
	
	// Установка заголовка формы
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
	// Установка надписи для важности письма
	ВажностьНадпись = Объект.Важность;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.УказатьТрудозатраты);
			
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не УправлениеДоступом.ЕстьПраво(Объект.Ссылка, "Изменение") Тогда
			ЭтотОбъект.ТолькоПросмотр = Истина;
		Иначе
			ЭтотОбъект.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязиПисьма()
	
	// Обработка связи письма ПолученоВОтветНа
	Если ЗначениеЗаполнено(ПолученоВОтветНа) Тогда
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПолученоВОтветНа) Тогда
			ПолученоВОтветНаСтрока = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПолученоВОтветНа, "Тема");
			Элементы.ПолученоВОтветНаСтрока.Гиперссылка = Истина;
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ПолученоВОтветНа) ТОгда
			ПолученоВОтветНаСтрока = Строка(ПолученоВОтветНа);
			Элементы.ПолученоВОтветНаСтрока.Гиперссылка = Истина;
		Иначе
			ПолученоВОтветНаСтрока = НСтр("ru = 'Нет'");
			Элементы.ПолученоВОтветНаСтрока.Гиперссылка = Ложь;
			Элементы.ПолученоВОтветНаСтрока.Доступность = Ложь;
		КонецЕсли;
	Иначе
		ПолученоВОтветНаСтрока = НСтр("ru = 'Нет'");
		Элементы.ПолученоВОтветНаСтрока.Гиперссылка = Ложь;
		Элементы.ПолученоВОтветНаСтрока.Доступность = Ложь;
	КонецЕсли;
	
	// Обработка связи письма ОтправленОтвет
	Если ОтправленОтвет.Количество() = 0 Тогда
		ОтправленОтветСтрока = НСтр("ru = 'Нет'");
		Элементы.ОтправленОтветСтрока.Гиперссылка = Ложь;
		Элементы.ОтправленОтветСтрока.Доступность = Ложь;
	Иначе
		ОтправленОтветСтрока = "";
		Для каждого Ответ Из ОтправленОтвет Цикл
			Если ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Ответ.Значение) Тогда
				ОтправленОтветСтрока = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
					Ответ.Значение,
					"Заголовок");
				Если Не ЗначениеЗаполнено(ОтправленОтветСтрока) Тогда
					ОтправленОтветСтрока = НСтр("ru = 'Документ без заголовка'");
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ОтправленОтветСтрока) Тогда
			Для каждого Ответ Из ОтправленОтвет Цикл
				Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Ответ.Значение) Тогда
					ОтправленОтветСтрока = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
						Ответ.Значение,
						"Тема");
					Если Не ЗначениеЗаполнено(ОтправленОтветСтрока) Тогда
						ОтправленОтветСтрока = НСтр("ru = 'Письмо без темы'");
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Элементы.ОтправленОтветСтрока.Гиперссылка = Истина;
	КонецЕсли;
	
	// Обработка связи письма ПересланоПисьмом
	Если ПересланоПисьмом.Количество() = 0 Тогда
		ПересланоПисьмомСтрока = НСтр("ru = 'Нет'");
		Элементы.ПересланоПисьмомСтрока.Гиперссылка = Ложь;
		Элементы.ПересланоПисьмомСтрока.Доступность = Ложь;
	Иначе
		ПересланоПисьмомТема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ПересланоПисьмом[0].Значение,
			"Тема");
		ПересланоПисьмомСтрока = ПересланоПисьмомТема;
		Элементы.ПересланоПисьмомСтрока.Гиперссылка = Истина;
	КонецЕсли;
	
	ЧислоПисемВПереписке = ВстроеннаяПочтаСервер.ПолучитьКоличествоПисемВПереписке(Объект.Ссылка);
	Если ЧислоПисемВПереписке > 1 Тогда
		Элементы.ПисемВПереписке.Гиперссылка = Истина;
		ПисемВПереписке = Формат(ЧислоПисемВПереписке, "ЧН=0") +
			" " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуПисемСтрокой(ЧислоПисемВПереписке);
	Иначе
		ПисемВПереписке = НСтр("ru='Писем нет'");
		Элементы.ПисемВПереписке.Гиперссылка = Ложь;
		Элементы.ПисемВПереписке.Доступность = Ложь;
	КонецЕсли;
	
	АктивныеЗадачиПоПисьму.ЗагрузитьЗначения(ПолучитьАктивныеЗадачиПоПисьму(Объект.Ссылка));
	КоличествоАктивныхЗадач = АктивныеЗадачиПоПисьму.Количество();
	Если КоличествоАктивныхЗадач > 1 Тогда
		Элементы.Задачи.Гиперссылка = Истина;
		Элементы.Задачи.Доступность = Истина;
		Задачи = Формат(КоличествоАктивныхЗадач, "ЧН=0") +
			" " +
			ВстроеннаяПочтаКлиентСервер.ПодписьКЧислуЗадачСтрокой(КоличествоАктивныхЗадач);
		
	ИначеЕсли КоличествоАктивныхЗадач = 1 Тогда
		Элементы.Задачи.Гиперссылка = Истина;
		Элементы.Задачи.Доступность = Истина;
		Задачи = АктивныеЗадачиПоПисьму[0];
		
	Иначе
		Задачи = НСтр("ru='Нет задач'");
		Элементы.Задачи.Гиперссылка = Ложь;
		Элементы.Задачи.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктивныеЗадачиПоПисьму(Письмо)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителя.Отменена
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)");
	Запрос.УстановитьПараметр("Предмет", Письмо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Получатели.Очистить();
	
	ДобавитьПолучателя(
		НСтр("ru = 'От:'"),
		Объект.ОтправительКонтакт,
		Объект.ОтправительОтображаемоеИмя,
		Объект.ОтправительАдрес);
	
	ДобавитьПолучателейИзТаблЧасти(Объект.ПолучателиПисьма, НСтр("ru = 'Кому:'"));
	ДобавитьПолучателейИзТаблЧасти(Объект.ПолучателиКопий, НСтр("ru = 'Копия:'"));
	
	// Формирование представления для поля От	
	ОтправительСтрокой = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
		Объект.ОтправительКонтакт,
		Объект.ОтправительОтображаемоеИмя,
		Объект.ОтправительАдрес,
		Объект.УчетнаяЗапись);
		
	// Формаирование HTML представления тела письма
	ТекстПисьма = ВстроеннаяПочтаСервер.СформироватьТекстHTMLДляПисьма(
		Объект.Ссылка,
		УникальныйИдентификатор,
		Ложь); // ВыводитьШапку
		
	СимвНачала = СтрНайти(ТекстПисьма,"##<");
	Если СимвНачала <> 0 Тогда
		СимвКонца = СтрНайти(ТекстПисьма,">##",НаправлениеПоиска.СНачала,СимвНачала);
		АдресТаблицыВложений = Сред(ТекстПисьма,СимвНачала+3,СимвКонца-СимвНачала-3);
		ТекстПисьма = СтрЗаменить(ТекстПисьма,"##<"+АдресТаблицыВложений+">##","");
		
		Если ЭтоАдресВременногоХранилища(АдресТаблицыВложений) Тогда
			ДанныеТаблицаВложений = ПолучитьИзВременногоХранилища(АдресТаблицыВложений);
			
			Если ТипЗнч(ДанныеТаблицаВложений) = Тип("Строка") Тогда
				ТаблицаВложенийССервера = ЗначениеИзСтрокиВнутр(ДанныеТаблицаВложений);
				Если ТипЗнч(ТаблицаВложенийССервера) = Тип("ТаблицаЗначений") Тогда
					ТаблицаВложений.Загрузить(ТаблицаВложенийССервера);
					УдалитьИзВременногоХранилища(АдресТаблицыВложений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	
	
	// Вложения
	ЗагрузитьВложения();
	
	ОтобразитьФлаг();
	
	// Инициализация начальных значений реквизитов
	НачальноеЗначениеПредмет = Объект.Предмет;
	НачальноеЗначениеПроект = Объект.Проект;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	ПоместитьФайлыСДискаВоВременноеХранилище();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ЕстьВложения = Ложь;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			ТекущийОбъект.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьВложения(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьФлаг();
	
	// Замена предмета переписки
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		Если НачальноеЗначениеПредмет <> Объект.Предмет Тогда
			ВстроеннаяПочтаСервер.ЗаменитьПредметПереписки(
				Объект.Ссылка,
				Объект.Предмет,
				НачальноеЗначениеПредмет,
				УникальныйИдентификатор);
			НачальноеЗначениеПредмет = Объект.Предмет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Если НачальноеЗначениеПроект <> Объект.Проект Тогда
			ВстроеннаяПочтаСервер.ЗаменитьПроектПереписки(
				Объект.Ссылка,
				Объект.Проект,
				НачальноеЗначениеПроект,
				УникальныйИдентификатор);
			НачальноеЗначениеПроект = Объект.Проект;
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок формы
	Автозаголовок = Ложь;
	Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Объект);
	
	ЗагрузитьВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОповеститьПрочтеноПисьмо Тогда
		Оповестить("ПрочтеноПисьмо",, ЭтотОбъект);
	КонецЕсли;
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если ТаблицаВложений.Количество()<>0 Тогда
		РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстПисьма,ТаблицаВложений);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма"
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Параметр.ПараметрСобытия = Объект.Ссылка Тогда
		Объект.Предмет = Параметр.Ссылка;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессИзменен"
		Или ИмяСобытия = "ЗадачаВыполнена")
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтобразитьСвязиПисьма();
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_Корреспондент" 
		Или ИмяСобытия = "Запись_ЛичныйАдресат" 
		Или ИмяСобытия = "Запись_КонтактноеЛицо") Тогда
		
		Контакт = Источник;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
		// Заменить адрес на контакт
		ВстроеннаяПочтаСервер.ЗаменитьАдресаНаКонтакт(АдресДляЗамены, Контакт, УникальныйИдентификатор);
		АдресДляЗамены = "";
		ОповеститьОбИзменении(Объект.Ссылка);
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьПараметрыПисьма(Команда)
	
	ТекстЗаголовкиИнтернета = Новый ТекстовыйДокумент;
	ТекстЗаголовкиИнтернета.ДобавитьСтроку(Объект.ВнутреннийЗаголовок);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Дата", Объект.Дата);
	СтруктураПараметры.Вставить("Получено", Объект.ДатаПолучения);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстЗаголовкиИнтернета);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПараметрыПисьма", СтруктураПараметры, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировку(Команда)
	
	ПараметрыОткрытия = Новый Структура("ТекущаяКодировка", Объект.Кодировка);
	Результат = Неопределено;

	ОткрытьФорму("Справочник.Файлы.Форма.ВыборКодировки", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ИзменитьКодировкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировкуЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	Результат = Результат1;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыбраннаяКодировка = Результат.Значение;
		Если ВыбраннаяКодировка <> Неопределено Тогда
			ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка)
	
	СтроковыеДанные = Новый Структура;
	СтроковыеДанные.Вставить("ТекстПисьма", ТекстПисьма);
	СтроковыеДанные.Вставить("Тема", Объект.Тема);
	Для каждого ПолучателиСтрока Из Получатели Цикл
		СтроковыеДанные.Вставить(
			"ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0"),
			ПолучателиСтрока.Представление);
	КонецЦикла;
	
	СтрокиВКодировке = РаботаСоСтроками.ПолучитьСтрокиВКодировке(СтроковыеДанные, ВыбраннаяКодировка);
	ТекстПисьма = СтрокиВКодировке.ТекстПисьма;
	Объект.Тема = СтрокиВКодировке.Тема;
	Для каждого ПолучателиСтрока Из Получатели Цикл
		ПолучателиСтрока.Представление = СтрокиВКодировке["ПолучателиПредставление" + Формат(ПолучателиСтрока.ПолучитьИдентификатор(), "ЧГ=0")];
	КонецЦикла;
	
	Объект.Кодировка = ВыбраннаяКодировка;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(Объект.Ссылка);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	Если Записать() Тогда
		ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(Объект.Ссылка);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Записать() Тогда
		ВстроеннаяПочтаКлиент.ПереслатьПисьмо(Объект.Ссылка);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", Объект.Комментарий);
	РезультатФормы = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, Новый ОписаниеОповещения("РедактироватьКомментарийЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКомментарийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатФормы = Результат;
	Если ТипЗнч(РезультатФормы) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Комментарий = РезультатФормы;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПоПредмету(Команда)
	
	
	ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", Объект.Ссылка);
	ПараметрыФормы.Вставить(
		"Заголовок",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процессы и задачи по предмету: ""%1""'"),
			Заголовок));
	ОткрытьФорму(
		"ОбщаяФорма.БизнесПроцессыИЗадачиПоПредмету",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Если Модифицированность Тогда
		Попытка
			Записать();
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПереместитьВКорзинуСервер();
	
	Оповестить("ПисьмоИзменено", Объект.Ссылка, ЭтотОбъект);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВКорзинуСервер()
	
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	Попытка
		ВстроеннаяПочтаСервер.ПоместитьПисьмоВКорзину(Объект.Ссылка);
	Исключение
		Прочитать();
		ВызватьИсключение;
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПисемВПерепискеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если АктивныеЗадачиПоПисьму.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, АктивныеЗадачиПоПисьму[0].Значение);
	Иначе
		ОткрытьОбщуюФормуБизнесПроцессыИЗадачиПоПредмету();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

&НаСервере
Процедура ЗагрузитьВложения()
	
	ТаблицаВложения = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Объект.Ссылка, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Истина); // ВключатьПомеченныеНаУдаление
		
	Вложения.Очистить();
	Для каждого Вложение Из ТаблицаВложения Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, Вложение);
		Если ВложенияСтрока.ПометкаУдаления Тогда
			ВложенияСтрока.ИндексКартинки = ВложенияСтрока.ИндексКартинки + 1;
		КонецЕсли;
		ВложенияСтрока.Расположение = "Файл";
	КонецЦикла;
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			Вложения.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВложений()
	
	МассивФайлов = Новый Массив;
	Для каждого ВложенияСтрока Из Вложения Цикл
		Если ВложенияСтрока.Расположение = "Файл" Тогда
			МассивФайлов.Добавить(ВложенияСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлыИнфо = ВстроеннаяПочтаСервер.ПолучитьИнформациюОВложениях(МассивФайлов);
		Для каждого ВложенияСтрока Из Вложения Цикл
			Для каждого ФайлИнфо Из ФайлыИнфо Цикл
				Если ВложенияСтрока.Расположение = "Файл" И ВложенияСтрока.Ссылка = ФайлИнфо.Ссылка Тогда
					ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлИнфо);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлыСДискаВоВременноеХранилище()
	#Если Не ВебКлиент Тогда
		Для Каждого ВложенияСтрока Из Вложения Цикл
			Если ВложенияСтрока.Расположение = "НаДиске" Тогда
				Данные = Новый ДвоичныеДанные(ВложенияСтрока.ИмяФайлаНаДиске);
				ВложенияСтрока.Адрес = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
				ВложенияСтрока.Расположение = "ВременноеХранилище";
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	Для каждого ВложениеСтрока Из Вложения Цикл
		Если ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				Неопределено, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
			ВложениеСтрока.Расположение = "Файл";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(ФайлСсылка)
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Вложение еще не записано. Для редактирования вложения необходимо записать письмо.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.Вложения.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Вложение еще не записано. Для редактирования вложения необходимо записать письмо.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФайлДляРедактирования(Элементы.Вложения.ТекущиеДанные.Ссылка);
	
	ОбновитьСписокВложений();
	УстановитьДоступностьКоммандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляРедактирования(ФайлСсылка)
	
	КомандыРаботыСФайламиКлиент.Редактировать(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоммандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "НаДиске"
		Или ТекущиеДанные.Расположение = "СсылкаНаФайл" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "ВременноеХранилище" Тогда
		Если ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расположение = "Файл" Тогда
		Отказ = Истина;
		ВложениеПометитьНаУдаление(ТекущиеДанные.Ссылка);
		ОбновитьСписокВложений();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдаление(ФайлСсылка)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
		ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.Расположение <> "Файл" Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайлов;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Если Элементы.Вложения.ТекущиеДанные.Расположение <> "Файл" Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Вложение еще не записано. Для редактирования вложения необходимо записать письмо.'"));
		Возврат;
	КонецЕсли;
	
	ЗакончитьРедактированиеФайла(Элементы.Вложения.ТекущиеДанные.Ссылка);
	
	ОбновитьСписокВложений();
	УстановитьДоступностьКоммандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайла(ФайлСсылка)

	КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
		ФайлСсылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтотОбъект.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоммандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.РедактироватьВложение.Доступность = (ТекущиеДанные.Расположение = "Файл");
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = (ТекущиеДанные.Расположение = "Файл");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРИЗНАКОМ ПРОЧТЕНО

&НаСервере
Процедура УстановитьСвойствоПрочтено()
	
	Прочтено = РегистрыСведений.СведенияОПисьмах.ПолучитьСвойствоПрочтено(Объект.Ссылка);
	Если Не Прочтено Тогда
		РегистрыСведений.СведенияОПисьмах.УстановитьСвойствоПрочтено(Объект.Ссылка, Истина);
		ОповеститьПрочтеноПисьмо = Истина;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// УЧЕТ ВРЕМЕНИ

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтотОбъект.Команды.ПереключитьХронометраж,
		ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтотОбъект.Команды.ПереключитьХронометраж,
	ЭтотОбъект.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка письма ""%1""'"),
			Объект.Тема);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ПараметрыОтчета = Неопределено;

		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект, Новый Структура("ПараметрыОповещения", ПараметрыОповещения)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = ДополнительныеПараметры.ПараметрыОповещения;
	
	
	ПараметрыОтчета = Результат;
	Если ПараметрыОтчета <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтотОбъект.Элементы.ПереключитьХронометраж,
		Ложь); // Выполнена
		
КонецПроцедуры

&НаКлиенте
Процедура ПротоколРаботы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//ПараметрыФормы = Новый Структура("ОбъектДанных", Объект.Ссылка);
		//ОткрытьФорму("РегистрСведений.ПротоколРаботыПользователей.Форма.ПротоколРаботы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязиОбъекта(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.СвязиДокументов.Форма.ФормаСвязейОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		НачатьЗапускПриложения(Неопределено, ДанныеСобытия.Href);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СВЯЗИ

&НаКлиенте
Процедура ПолученоВОтветНаСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ПолученоВОтветНа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправленОтветСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОтправленОтвет.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ОтправленОтвет[0].Значение);
	Иначе
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересланоПисьмомСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПересланоПисьмом.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ПересланоПисьмом[0].Значение);
	Иначе
		ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛУЧАТЕЛЯМИ

&НаСервере
Процедура ДобавитьПолучателейИзТаблЧасти(ПолучателиПисьма, ТипАдреса)
	
	Для Каждого Строка Из ПолучателиПисьма Цикл
		
		ДобавитьПолучателя(ТипАдреса, Строка.Контакт, Строка.ОтображаемоеИмя, Строка.Адрес);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателя(ТипАдреса, Контакт, ОтображаемоеИмя, Адрес)
	
	НоваяСтрока = Получатели.Добавить();
	
	НоваяСтрока.Представление = ВстроеннаяПочтаСервер.ПолучитьПредставлениеАдресата(
		Контакт,
		ОтображаемоеИмя,
		Адрес,
		Объект.УчетнаяЗапись);
	
	НоваяСтрока.Адрес = Адрес;
	НоваяСтрока.Контакт = Контакт;
	НоваяСтрока.ТипАдреса = ТипАдреса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
		ПоказатьЗначение(Неопределено, СтрокаДанных.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТипАдресаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГОМ

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Красный");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Синий");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.СинийФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Желтый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Зеленый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Оранжевый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.Лиловый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	Флаг = ПредопределенноеЗначение("Перечисление.ФлагиПисем.ПустаяСсылка");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ПустойФлаг;
	
	СохранитьФлаг();
	Оповестить("ИзменилсяФлагПисьма");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьФлаг()
	
	ИнформацияОФлагеПисьма = ВстроеннаяПочтаСервер.ПолучитьИнформациюОФлагеПисьма(Объект.Ссылка);
	
	Флаг = ИнформацияОФлагеПисьма.Флаг;
	Элементы.ПодменюФлаги.Картинка = ИнформацияОФлагеПисьма.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьФлаг()
	
	Если Флаг = Перечисления.ФлагиПисем.ПустаяСсылка() Тогда
		РегистрыСведений.ФлагиПисем.ОчиститьФлаг(Объект.Ссылка, Пользователи.ТекущийПользователь());
	Иначе
		РегистрыСведений.ФлагиПисем.УстановитьФлаг(Объект.Ссылка, Пользователи.ТекущийПользователь(), Флаг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичногоАдресата(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Элементы.Получатели.ТекущиеДанные.Адрес,
			Представление);
			
		АдресДляЗамены = Элементы.Получатели.ТекущиеДанные.Адрес;	
		
		КодВозврата = Неопределено;
	
		
		ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорреспондента(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
			
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Элементы.Получатели.ТекущиеДанные.Адрес,
			Представление);
			
		АдресДляЗамены = Элементы.Получатели.ТекущиеДанные.Адрес;
		
		КодВозврата = Неопределено;

		
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Корреспондент = Неопределено;

		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,,,,, Новый ОписаниеОповещения("СоздатьКонтактноеЛицоЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Корреспондент = Результат;
	
	Если ЗначениеЗаполнено(Корреспондент) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		
		ПараметрыФормы = Новый Структура("Адрес, Представление, Корреспондент", 
		Элементы.Получатели.ТекущиеДанные.Адрес,
		Представление,
		Корреспондент);
		
		АдресДляЗамены = Элементы.Получатели.ТекущиеДанные.Адрес;
		
		КодВозврата = Неопределено;
		
		
		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		УстановитьДоступностьКомандСохраненияКонтакта(Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт));
	Иначе	
		УстановитьДоступностьКомандСохраненияКонтакта(Ложь);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСохраненияКонтакта(Доступность)
	
	 Элементы.ПолучателиКонтекстноеМенюСоздатьЛичногоАдресата.Доступность = Доступность;
	 Элементы.ПолучателиКонтекстноеМенюСоздатьКорреспондента.Доступность = Доступность;
	 Элементы.ПолучателиКонтекстноеМенюСоздатьКонтактноеЛицо.Доступность = Доступность;
	 Элементы.ФормаСоздатьЛичногоАдресата.Доступность = Доступность;
	 Элементы.ФормаСоздатьКорреспондента.Доступность = Доступность;
	 Элементы.ФормаСоздатьКонтактноеЛицо.Доступность = Доступность;
		
КонецПроцедуры
