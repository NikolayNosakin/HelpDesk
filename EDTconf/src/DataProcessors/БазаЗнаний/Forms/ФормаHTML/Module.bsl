
&НаКлиенте
Перем НачальнаяСтатья Экспорт;

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура УстановитьДоступность()
	
	КолСтрокИстории = Объект.История.Количество();
	
	Элементы.ФормаСтраницаНазад.Доступность		= (КолСтрокИстории > 1 И ТекущаяСтраница > 1);
	Элементы.ФормаСтраницаВперед.Доступность	= (КолСтрокИстории > 1 И ТекущаяСтраница < КолСтрокИстории);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ДанныеСобытия) <> Тип("ФиксированнаяСтруктура")  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСобытия.Anchor = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрСсылки	= ДанныеСобытия.Anchor.nameProp;
	НажатаяСсылка 	= СокрЛП(Нрег(ДанныеСобытия.Href));
	
	Если НажатаяСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрСсылки) Тогда
		ПараметрСсылки =НажатаяСсылка; 
	КонецЕсли;
	
	Если Лев(ПараметрСсылки, 7) = "mailto:" Тогда
		НавигационнаяСсылка_mailto(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 9) = "category:" Тогда
		НавигационнаяСсылка_category(ПараметрСсылки);
	ИначеЕсли ПараметрСсылки = "title" Тогда
		ОткрытьСтраницу("title");
	ИначеЕсли ПараметрСсылки = "search" Тогда
		ОткрытьСтраницуПоиска(ПараметрСсылки);	
	ИначеЕсли Лев(ПараметрСсылки, 8) = "article:" Тогда
		НавигационнаяСсылка_article(ПараметрСсылки);	
	ИначеЕсли ПараметрСсылки = "home" Тогда
		ОткрытьСтраницу("home");
	ИначеЕсли Лев(ПараметрСсылки, 7) = "create:" Тогда
		НавигационнаяСсылка_create(ПараметрСсылки);
	ИначеЕсли Лев(ПараметрСсылки, 5) = "edit:" Тогда
		НавигационнаяСсылка_edit(ПараметрСсылки);
	ИначеЕсли Лев(НажатаяСсылка, 3) = "e1c" И Найти(НажатаяСсылка,"e1cib/data/") <> 0 Тогда
		НавигационнаяСсылка_e1c(НажатаяСсылка); 				
	ИначеЕсли Лев(НажатаяСсылка, 4) = "http" Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ДокументHTMLПриНажатииЗавершение", ЭтотОбъект, Новый Структура("НажатаяСсылка, ПараметрСсылки", НажатаяСсылка, ПараметрСсылки)), НажатаяСсылка);
        Возврат; 			
	ИначеЕсли Лев(НажатаяСсылка, 10) = "javascript" Тогда
		СтандартнаяОбработка = Истина;
	ИначеЕсли Лев(НажатаяСсылка, 5) = "print" Тогда
		НавигационнаяСсылка_print(НажатаяСсылка);	
	ИначеЕсли Лев(НажатаяСсылка, 6) = "rating" Тогда
		НавигационнаяСсылка_rating(НажатаяСсылка);	
	ИначеЕсли Лев(НажатаяСсылка, 8) = "fileint:" Тогда
		НавигационнаяСсылка_fileint(НажатаяСсылка);	
	ИначеЕсли Лев(НажатаяСсылка, 9) = "filebase:" Тогда
		НавигационнаяСсылка_filebase(НажатаяСсылка);		
	ИначеЕсли ПараметрСсылки = "null" Тогда 
		//ОБработка нажатия на корень содержания
	Иначе	
		//Сообщить("Неизвестная ссылка "+ПараметрСсылки);  //точка для отладки
	КонецЕсли;
	
	ДокументHTMLПриНажатииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLПриНажатииЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	НажатаяСсылка = ДополнительныеПараметры.НажатаяСсылка;
	ПараметрСсылки = ДополнительныеПараметры.ПараметрСсылки;
	
	
	ДокументHTMLПриНажатииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLПриНажатииФрагмент()
	
	УстановитьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуПоиска(ИмяСтраницы)
	//Спросим у пользователя что искать
	//Тут откроем форму поиска
	//От нее получим  html текст который выводим пользователю
	ФормаПоиска = ПолучитьФорму("Обработка.БазаЗнаний.Форма.ФормаПоиска",,ЭтотОбъект);
	СтруктураВозврата = ФормаПоиска.ОткрытьМодально();
	Если СтруктураВозврата <> Неопределено Тогда
		ОткрытьСтраницу(ИмяСтраницы,СтруктураВозврата);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLДокументСформирован(Элемент)
	Элемент.Документ.Body.ContentEditable = "false";
	Элемент.Документ.body.scroll = "yes";
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(НачальнаяСтатья) И БазаЗнанийСервер.ОбъектБДСуществует(НачальнаяСтатья) Тогда
		ОткрытьСтраницу(НачальнаяСтатья);
	Иначе
		ОткрытьСтраницу("home");
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьСтраницу(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ИмяСобытия = "РазделыБазыЗнанийЗапись" И ТекущаяСсылка = Источник Тогда
		ОбновитьСтраницу(Неопределено);
	ИначеЕсли ИмяСобытия = "СтатьиБазыЗнанийЗапись" И ТекущаяСсылка = Источник Тогда
		ОбновитьСтраницу(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

&НаКлиенте
Процедура ГлавнаяСтраница(Команда)
	
	ОткрытьСтраницу("home");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВперед(Команда)
	
	НоваяСтраница = ТекущаяСтраница + 1;
	
	Если НоваяСтраница >= 1 И НоваяСтраница <= Объект.История.Количество() Тогда
		ЭтотОбъект.ДокументHTML		= Объект.История[НоваяСтраница-1].ТекстHTML;
		ЭтотОбъект.АвтоЗаголовок	= Ложь;
		ЭтотОбъект.Заголовок		= Объект.История[НоваяСтраница-1].Представление;
		
		ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаНазад(Команда)
	
	НоваяСтраница = ТекущаяСтраница - 1;
	
	Если НоваяСтраница >= 1 И НоваяСтраница <= Объект.История.Количество() Тогда
		ЭтотОбъект.ДокументHTML		= Объект.История[НоваяСтраница-1].ТекстHTML;
		ЭтотОбъект.АвтоЗаголовок	= Ложь;
		ЭтотОбъект.Заголовок		= Объект.История[НоваяСтраница-1].Представление;
		
		ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницу(Команда)
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	ОткрытьСтраницу("refresh",ТекущаяСсылка);
		
КонецПроцедуры

&НаСервере
Функция  ПолучитьАдресаСкриптовСодержания()
	АдресаСкриптов = БазаЗнанийСервер.ПолучитьАдресаСкриптовСодержания(ЭтотОбъект);
	Возврат АдресаСкриптов;
КонецФункции
 
&НаКлиенте
Процедура Сохранить(Команда)
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = Неопределено;

	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("СохранитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для сохранения необходимо установить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	МестоСохранения = ВыбратьМестоСохранения(Истина);
	Если МестоСохранения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = МестоСохранения + "\" + Строка(ТекущаяСсылка) + ".htm";
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(ЭтотОбъект.ДокументHTML);
	ЗаписьТекста.Закрыть();
	
	НачатьЗапускПриложения(Неопределено, ПутьКФайлу);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьСКартинками(Команда)
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = Неопределено;

	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("СохранитьСКартинкамиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСКартинкамиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для сохранения необходимо установить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	МестоСохранения = ВыбратьМестоСохранения(Истина);
	Если МестоСохранения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресаКартинок = Новый Соответствие;
	
	КопияСтроки		= ДокументHTML;
	ОстатокСтроки	= ДокументHTML;
	Позиция			= СтрНайти(ОстатокСтроки, "img src='");
	Пока Позиция > 0 Цикл
		СтрокаДокумента = Сред(ОстатокСтроки, Позиция + 9);
		КонецИмени		= СтрНайти(СтрокаДокумента, "'");
		АдресФайла		= Сред(СтрокаДокумента, 1, КонецИмени - 1);
		
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			АдресаКартинок.Вставить(АдресФайла, "");
		КонецЕсли;
		
		ОстатокСтроки	= Сред(СтрокаДокумента, КонецИмени + 1);
		Позиция			= СтрНайти(ОстатокСтроки, "img src='");
	КонецЦикла;
	
	Счетчик = 0;
	Для Каждого КлючИЗначение Из АдресаКартинок Цикл
		Счетчик = Счетчик + 1;
		
		ИмяФайлаКартинки	= МестоСохранения + "\" + Формат(Счетчик, "ЧГ=");
		
		ДвоичныеДанные	= ПолучитьИзВременногоХранилища(КлючИЗначение.Ключ);
		ДвоичныеДанные.Записать(ИмяФайлаКартинки);
		
		АдресВДокументе	= "'" + КлючИЗначение.Ключ + "'";
		НовыйАдресФайла	= "'" + ИмяФайлаКартинки + "'";
		
		КопияСтроки = СтрЗаменить(КопияСтроки, АдресВДокументе, НовыйАдресФайла);
		
	КонецЦикла;
	
	ПутьКФайлу = МестоСохранения + "\" + Строка(ТекущаяСсылка) + ".htm";
	
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьКФайлу);
	ЗаписьТекста.Записать(КопияСтроки);
	ЗаписьТекста.Закрыть();
	
	НачатьЗапускПриложения(Неопределено, ПутьКФайлу);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАВИГАЦИОННЫЕ ССЫЛКИ

&НаКлиенте
Процедура НавигационнаяСсылка_mailto(ПараметрСсылки)
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_category(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 10);
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("РазделыБазыЗнаний", Идентификатор);
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОткрытьСтраницу(ЭлементСсылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_article(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 9);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);

	Если БазаЗнанийСервер.ОбъектБДСуществует(ЭлементСсылка) Тогда
		ОткрытьСтраницу(ЭлементСсылка);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_e1c(ПараметрСсылки)
	ПараметрСсылки = СтрЗаменить(ПараметрСсылки,НРег(ПолучитьНавигационнуюСсылкуИнформационнойБазы()+"/"),"");
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоНавигационнойСсылке(ПараметрСсылки);		
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);

	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОткрытьСтраницу(ЭлементСсылка);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_create(ПараметрСсылки)
	
	ТипДанных = Сред(ПараметрСсылки, 8);
	
	ТекущаяСсылка = ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если НРег(ТипДанных) = "category" Тогда
		ЗначенияЗаполнения	= Новый Структура("Родитель", ТекущаяСсылка);
		ПараметрыФормы		= Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.РазделыБазыЗнаний.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли НРег(ТипДанных) = "article" Тогда
		ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ФормаЭлемента", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_edit(ПараметрСсылки)
	
	ТипДанных = Сред(ПараметрСсылки, 6);
	
	Если Лев(ТипДанных, 9) = "category:" Тогда
		ЭлементСсылка	= БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("РазделыБазыЗнаний", Сред(ТипДанных, 10));
		ИмяФормыСсылки	= "Справочник.РазделыБазыЗнаний.ФормаОбъекта";
	ИначеЕсли Лев(ТипДанных, 8) = "article:" Тогда
		ЭлементСсылка	= БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Сред(ТипДанных, 9));
		ИмяФормыСсылки	= "Справочник.СтатьиБазыЗнаний.Форма.ФормаЭлемента";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ссылка не определена.");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЭлементСсылка);
	ОткрытьФорму(ИмяФормыСсылки, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_print(ПараметрСсылки)
	ЭлементСсылка	= БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Сред(ПараметрСсылки, 15));
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		ОткрытьСтраницу(Лев(ПараметрСсылки, 5),ЭлементСсылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_rating(ПараметрСсылки)
	ЭлементСсылка	= БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Сред(ПараметрСсылки, 18));
	ЗначениеРейтинга = Число(Сред(ПараметрСсылки, 8,1));
	
	БазаЗнанийСервер.ДобавитьОценкуСтатье(ЭлементСсылка,ЗначениеРейтинга);
	
	ОбновитьСтраницу(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_fileint(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 9);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("Файлы", Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат;
	КонецЕслИ;
	
	//Проверим существует ли ссылка на статью
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ЭлементСсылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_filebase(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 10);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("Файлы", Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат;
	КонецЕслИ;
	
	//Проверим существует ли ссылка на статью
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ЭлементСсылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ

&НаКлиенте
Функция ВыбратьМестоСохранения(Каталог)
	
	Если Каталог Тогда
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	Иначе 
		Режим = РежимДиалогаВыбораФайла.Сохранение;
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогВыбора.Выбрать() Тогда
		Возврат ДиалогВыбора.Каталог;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекущуюСсылку(ТаблицаИстория, ТекущаяСтрока)
	
	Если ТекущаяСтрока <= 0 ИЛИ ТекущаяСтрока > ТаблицаИстория.Количество() Тогда
		ТекущаяСтрока = ТаблицаИстория.Количество();
	КонецЕсли;
	
	Если ТекущаяСтрока = 0 Тогда
		Возврат "";
	Иначе 
		Возврат ТаблицаИстория[ТекущаяСтрока - 1].СсылкаСтраницы;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьПоследующиеСтрокиИстории(ТекСтраница, История)
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаИстории Из История Цикл
		Если СтрокаИстории.НомерСтроки > ТекСтраница Тогда
			МассивСтрок.Добавить(СтрокаИстории);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		История.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКорректностьИмениСтраницы(ИмяСтраницы)
	
	ИмяКорректно = Ложь;
	
	ТипИмени = ТипЗнч(ИмяСтраницы);
	Если ТипИмени = Тип("Строка") Тогда
		Если ВРег(ИмяСтраницы) = "HOME" Тогда
			ИмяКорректно = Истина;
		ИначеЕсли ВРег(ИмяСтраницы) = "TITLE" Тогда
	        ИмяКорректно = Истина;
		ИначеЕсли ВРег(ИмяСтраницы) = "SEARCH" Тогда
	        ИмяКорректно = Истина;
		ИначеЕсли ВРег(ИмяСтраницы) = "PRINT" Тогда
	        ИмяКорректно = Истина;
		ИначеЕсли ВРег(ИмяСтраницы) = "REFRESH" Тогда
	        ИмяКорректно = Истина;	
		КонецЕсли;
	ИначеЕсли ТипИмени = Тип("СправочникСсылка.РазделыБазыЗнаний") Тогда
		ИмяКорректно = Истина;
	ИначеЕсли ТипИмени = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		ИмяКорректно = Истина;
	КонецЕсли;
	
	Возврат ИмяКорректно;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСтраницу(ИмяСтраницы = "home",ДопПараметр = Неопределено)  
	Представление	= "";
	ТекстСтраницы = ПолучитьТекстСтраницы(ИмяСтраницы,ДопПараметр,Представление);
	
	//Для корректного отображения в веб клиенте скачиваем объекты на клиента
	РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстСтраницы,ТаблицаОбъектов);
	
	Если ЗначениеЗаполнено(ТекстСтраницы) Тогда
		 ОтобразитьСтраницу(ТекстСтраницы,Представление,ИмяСтраницы);	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтраницу(ТекстСтраницы,Представление,ИмяСтраницы)
	
	ТекущаяСсылка	= ПолучитьТекущуюСсылку(Объект.История, ТекущаяСтраница);
	
	Если ТекущаяСтраница > 0 Тогда
		УдалитьПоследующиеСтрокиИстории(ТекущаяСтраница, Объект.История);
	КонецЕсли;

	Если ИмяСтраницы <> "refresh" И ИмяСтраницы <> ТекущаяСсылка Тогда
		НоваяСтрока = Объект.История.Добавить();
		НоваяСтрока.ТекстHTML		= ТекстСтраницы;
		НоваяСтрока.Представление	= Представление;
		НоваяСтрока.СсылкаСтраницы	= ИмяСтраницы;
	ИначеЕсли ИмяСтраницы = "refresh" Тогда 
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("СсылкаСтраницы",ТекущаяСсылка);
		МассивСтрок = Объект.История.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() <> 0 Тогда
			ТекСтрокаИстории = МассивСтрок.Получить(0);
			ТекСтрокаИстории.ТекстHTML		= ТекстСтраницы;
			ТекСтрокаИстории.Представление	= Представление;
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.ТекущаяСтраница	= Объект.История.Количество();
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресСтраницы) Тогда
		АдресСтраницы = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТекстСтраницы, АдресСтраницы);
	
	//ТекстСтраницы = СтрЗаменить(ТекстСтраницы,"content=""IE=Edge""","content=""IE=EmulateIE7""");

	ДокументHTML = ТекстСтраницы;
	
	ЭтотОбъект.АвтоЗаголовок	= Ложь;
	ЭтотОбъект.Заголовок		= Представление;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстСтраницы(ИмяСтраницы="home",ДопПараметр = Неопределено,Представление="")
	ТекстСтраницы	= "";

	Если НЕ ПроверитьКорректностьИмениСтраницы(ИмяСтраницы) Тогда
		Возврат ТекстСтраницы;
	КонецЕсли;
				
	ТипИмени = ТипЗнч(ИмяСтраницы);
	Если ТипИмени = Тип("Строка") Тогда
		Если ВРег(ИмяСтраницы) = "HOME" Тогда
			ТекстСтраницы	= БазаЗнанийСервер.ПолучитьТитульнуюСтраницу(ЭтотОбъект);
			Представление	= "База знаний (Главная страница)";
		ИначеЕсли ВРег(ИмяСтраницы) = "TITLE" Тогда
			ТекстСтраницы	= БазаЗнанийСервер.ПолучитьСтраницуСодержания(ЭтотОбъект);
			Представление	= "База знаний (Содержание)";
		ИначеЕсли ВРег(ИмяСтраницы) = "PRINT" И ЗначениеЗаполнено(ДопПараметр) Тогда
			ТекстСтраницы	= БазаЗнанийСервер.ПолучитьСтраницуПечатиСтатьи(ЭтотОбъект, ДопПараметр);
			Представление	= "Версия для печати статьи: " + Строка(ДопПараметр);
		ИначеЕсли  ВРег(ИмяСтраницы) = "SEARCH" И ЗначениеЗаполнено(ДопПараметр) Тогда
			ТекстСтраницыПоиска = ДопПараметр.ТекстСтраницыПоиска;
			КоличествоНайденных = ДопПараметр.КоличествоНайденных;
			
			ТекстСтраницы	= БазаЗнанийСервер.ПолучитьСтраницуРезультатовПоиска(ЭтотОбъект,ТекстСтраницыПоиска);
			Представление	= "Результаты поиска, найдено элементов "+КоличествоНайденных;
			ИмяСтраницы = ИмяСтраницы + ДопПараметр.ИдентификаторПоиска;
		ИначеЕсли  ВРег(ИмяСтраницы) = "REFRESH" И ЗначениеЗаполнено(ДопПараметр) Тогда
			Если  ВРег(ДопПараметр) <> "SEARCH" Тогда
				СсылкаСтраницы = Объект.История[ТекущаяСтраница-1].СсылкаСтраницы;
				ТекстСтраницы = ПолучитьТекстСтраницы(СсылкаСтраницы,,Представление);
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ТипИмени = Тип("СправочникСсылка.РазделыБазыЗнаний") Тогда
		ТекстСтраницы	= БазаЗнанийСервер.ПолучитьСтраницуРаздела(ЭтотОбъект, ИмяСтраницы);
		Представление	= "Раздел: " + Строка(ИмяСтраницы);
	ИначеЕсли ТипИмени = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		ТекстСтраницы	= БазаЗнанийСервер.ПолучитьСтраницуСтатьи(ЭтотОбъект, ИмяСтраницы);
		Представление	= "Статья: " + Строка(ИмяСтраницы);
		
		БазаЗнанийСервер.ДобавитьПросмотрСтатьи(ИмяСтраницы);	
	КонецЕсли;
	
	Возврат ТекстСтраницы;
КонецФункции

&НаКлиенте
Процедура ОткрытьСодержание(Команда)
	ОткрытьСтраницу("title");
КонецПроцедуры

//Для отладки отображения на разных клиентах
&НаКлиенте
Процедура ПоказатьТекстHTML(Команда)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ДокументHTML);
	ТекстДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	ОткрытьСтраницуПоиска("search");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуВложений(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
