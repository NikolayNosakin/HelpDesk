// Автор: Батыркин Антон 
// http://infostart.ru/public/75313/
//Переработан под использование в конфигурации Поддержка пользователей 2.0 - Кострицын Олег
//okostritsyn@gmail.com

&НаКлиенте
Перем  ПредыдущийРежим;

&НаКлиенте
Перем ИзначальныйТекст;

&НаКлиенте
Перем ВыполняетсяЗакрытие;

//////////////////////////////////////////////////////////////////////////////// 
// Процедуры модуля формы сервер
// 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.ТекущийПользователь());
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	Если Объект.ДатаСоздания = Дата(1, 1, 1) Тогда
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПостроитьДеревоРазделовНаСервере();
	
	ПрочитатьТаблицуВложений(ТаблицаВложений);
	ПрочитатьHTMLСервер();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,,"СтраницаДополнительныеРеквизиты");
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПолучитьФункциональнуюОпцию("ВключитьРежимОтладкиРедактораHTML") Тогда
		ВключитьРежимОтладкиРедактораHTML = Истина;
	Иначе
		ВключитьРежимОтладкиРедактораHTML = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.МодульОбъектаПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СохранитьОбъектыHTML(ТекущийОбъект.ТекстСтатьиHTML,ТаблицаВложений,ТекущийОбъект.Ссылка); 
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Процедуры модуля формы клиент
// 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)	
	ПрочитатьHTMLСервер();
	
	Оповестить("СтатьиБазыЗнанийЗапись",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	//Вставляем ссылки на картинки
	БазаЗнанийКлиентСервер.ВставитьКартинкиВТекстHTML(ТекстСтатьиHTML,ТаблицаВложений,ЭтотОбъект.УникальныйИдентификатор);
	
	//Готовим список заголовков
	Список = Элементы.КомандаformatBlock.СписокВыбора;
	Список.Добавить("<p>", "Обычный");
	Список.Добавить("<h1>", "Заголовок 1");
	Список.Добавить("<h2>", "Заголовок 2");
	Список.Добавить("<h3>", "Заголовок 3");
	Список.Добавить("<h4>", "Заголовок 4");
	Список.Добавить("<h5>", "Заголовок 5");
	Список.Добавить("<h6>", "Заголовок 6");
	Список.Добавить("<pre>", "Форматированный");
	Список.Добавить("<address>", "Адрес");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	СтилиТекста = ТекЭлемент.Значение;
	
	// Заполнение списка шрифтов
	Список = Элементы.КомандаFontName.СписокВыбора;
	Список.Добавить("Arial");
	Список.Добавить("Arial Black");
	Список.Добавить("Arial Narrow");
	Список.Добавить("Comic Sans MS");
	Список.Добавить("Courier New");
	Список.Добавить("System");
	Список.Добавить("Tahoma");
	Список.Добавить("Times New Roman");
	Список.Добавить("Verdana");
	Список.Добавить("Wingdings");
	ТекЭлемент = Список.НайтиПоИдентификатору(0);
	ИмяШрифта = ТекЭлемент.Значение;
	
	// Заполнение списка размеров
	Список = Элементы.КомандаFontSize.СписокВыбора;
	Для Ном = 1 По 14 Цикл
		Список.Добавить(Ном);
	КонецЦикла;
	ТекЭлемент = Список.НайтиПоИдентификатору(2);
	РазмерыШрифта = ТекЭлемент.Значение;
		
	Элементы.ГруппаФайлы.Заголовок = "Файлы ("+Формат(ПосчитатьКоличествоВСпискеНаСервере("Файлы"),"ЧН=0; ЧГ=0")+" файл.)";

	УстановитьВидимость();
	
	ВыполняетсяЗакрытие = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	//Если Элементы.Текст.Пометка Тогда
	//	ТекстHTML = Элементы.ПолеHTMLДокумента.Документ.Body.InnerText;
	//Иначе
		ТекстHTML = Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML;
	//КонецЕсли;	
	
	ПропарситьСсылкиИзHTML(ТекстHTML);
	
	#Если НЕ ВебКлиент Тогда
		//На случай если текст скопировали из другого источника, скачаем картинки из этого источника и поменяем ссылки на них
		ПропарситьКартинкиИзHTML(ТекстHTML);
	#КонецЕсли

	Объект.ТекстСтатьиHTML = ТекстHTML;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Обработчики событий  формы
// 

&НаКлиенте
Процедура ПолеHTMLДокументаПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	Инд = 0;
	Пока Элемент.Документ.readyState <> "complete" Цикл
		//Анализируем когда документ загрузится
		Если Инд = 100 тогда //ограничение сколько ждем
			Прервать;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	Элемент.Документ.Body.ContentEditable = "true";
	Элемент.Документ.Body.scroll = "yes";
	
	ИзначальныйТекст = Элемент.Документ.Body.InnerHTML;
	
	ПодключитьОбработчикОжидания("ПроверкаИзмененияСостоянияДокумента",1,Ложь);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПоказатьРежимыКнопок();
	
	//Если Элементы.Просмотр.Пометка Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(ДанныеСобытия) = Тип("ФиксированнаяСтруктура") Тогда
			НажатаяСсылка = Нрег(ДанныеСобытия.Href);
			Если НажатаяСсылка <> Неопределено Тогда
				Если Найти(НажатаяСсылка,"e1cib") <> 0 Тогда
					ПерейтиПоНавигационнойСсылке(НажатаяСсылка); 				
				ИначеЕсли Найти(НажатаяСсылка,"http") <> 0 Тогда
					НачатьЗапускПриложения(Неопределено, НажатаяСсылка); 				
				ИначеЕсли Лев(НажатаяСсылка, 8) = "article:" Тогда
					НавигационнаяСсылка_article(НажатаяСсылка);	
				ИначеЕсли Лев(НажатаяСсылка, 8) = "fileint:" Тогда
					НавигационнаяСсылка_fileint(НажатаяСсылка);	
				ИначеЕсли Лев(НажатаяСсылка, 9) = "filebase:" Тогда
					НавигационнаяСсылка_filebase(НажатаяСсылка);	
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
	Если ТекВыделение = Неопределено Тогда
		Возврат;
	Иначе
		УзелЭлемента = ТекВыделение.createRange();
	КонецЕсли;
	
	Команда = Сред(Элемент.Имя, 8);
	Если УзелЭлемента.queryCommandSupported(Команда) Тогда
		УзелЭлемента.execCommand(Команда, Истина, ВыбранноеЗначение);
		ПоказатьРежимыКнопок();
	КонецЕсли;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеHTMLДокумента;
	ЭтотОбъект.Модифицированность = ИСтина;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Кнопка)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
	
	Если ТекВыделение = Неопределено Тогда
		Возврат;
	Иначе
		УзелЭлемента = ТекВыделение.createRange();
	КонецЕсли;	
	
	Команда = Сред(Кнопка.Имя, 8);
	Если УзелЭлемента.queryCommandSupported(Команда) Тогда
		УзелЭлемента.execCommand(Команда, Ложь);
		ПоказатьРежимыКнопок();
	КонецЕсли;
	ЭтотОбъект.Модифицированность = ИСтина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРежимыКнопок()
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
	Если ТекВыделение = Неопределено Тогда
		Возврат;
	Иначе
		УзелЭлемента = ТекВыделение.createRange();
	КонецЕсли;
	
	Для каждого Группа Из Элементы.КоманднаяПанельКнопок.ПодчиненныеЭлементы Цикл
		Для каждого Кнопка Из Группа.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Кнопка) = тип("КнопкаФормы") Тогда
				Команда = Сред(Кнопка.Имя, 8);
				Если УзелЭлемента.queryCommandSupported(Команда) Тогда
					Попытка
						Кнопка.Пометка = УзелЭлемента.queryCommandState(Команда);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Отдельно покажем кнопку гипперссылки
	Попытка
		Элементы.Гиперссылка.Доступность =ЗначениеЗаполнено(УзелЭлемента.text);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРежим(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кнопка = Элементы.Найти(Команда.Имя);
	Если Кнопка.Пометка Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступностьКнопок = НЕ ЭтаФорма.ТолькоПросмотр;
	Кнопка.Пометка = Истина;
	
	Для каждого Группа Из Элементы.КоманднаяПанельКнопок.ПодчиненныеЭлементы Цикл
		Если Группа.Имя = "ГруппаУправлениеРежимом" Тогда
			УправлятьДоступностью = Ложь;
		Иначе
			УправлятьДоступностью = Истина;
		КонецЕсли;
		
		Для каждого Кн Из Группа.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Кн) = тип("КнопкаФормы") Тогда
				Если УправлятьДоступностью Тогда
					Кн.Доступность = ДоступностьКнопок
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла; 
	
	ПредыдущийРежим = Кнопка;
	ПоказатьРежимыКнопок();
	
	ПропарситьСсылкиИзHTML(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьHTML(Команда)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстСтатьиHTML);
	ТекстДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазделы(Команда)
	ПостроитьДеревоРазделовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РазделыДеревоИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РазделыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использование Тогда
		НоваяСтрока = Объект.Разделы.Добавить();
		НоваяСтрока.Раздел = ТекущиеДанные.Раздел;
	Иначе 
		МассивСтрок = Объект.Разделы.НайтиСтроки(Новый Структура("Раздел", ТекущиеДанные.Раздел));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			Объект.Разделы.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = Неопределено;

	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение1", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для работы с картинками необходимо установить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
    		ВыбраннаяКартинка = Новый Картинка(ПутьКФайлу);
    		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершениеЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяКартинка", ВыбраннаяКартинка)), ПутьКФайлу);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыбраннаяКартинка = ДополнительныеПараметры.ВыбраннаяКартинка;
	
	
	АдресКартинки = ПоместитьВоВременноеХранилище(ВыбраннаяКартинка,ЭтотОбъект.УникальныйИдентификатор);
	
	ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
	Если ТекВыделение = Неопределено Тогда
		Возврат;
	Иначе
		УзелЭлемента = ТекВыделение.createRange();
	КонецЕсли;
	
	УзелЭлемента.execCommand("InsertImage",false,АдресКартинки);
	
	НоваяСтрока = ТаблицаВложений.Добавить();
	НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
	НоваяСтрока.Адрес = АдресКартинки;
	
	ЭтотОбъект.Модифицированность = Истина;
	
	ПодготовитьТекстHTML(Строка(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML));
	РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстСтатьиHTML,ТаблицаВложений);
	
	ПоказатьРежимыКнопок();

КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзФайла(ПолеHTMLДокумента)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = Неопределено;

	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВставитьКартинкуИзФайлаЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзФайлаЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для работы с картинками необходимо установить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл с фотографией";
	Диалог.ПолноеИмяФайла = "";
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.Фильтр = 
	"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	+ "Формат TIFF (*.tif)|*.tif|"
	+ "Формат GIF (*.gif)|*.gif|"
	+ "Формат PNG (*.png)|*.png|"
	+ "Формат icon (*.ico)|*.ico|"
	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; // картинки
	
	Диалог.Показать(Новый ОписаниеОповещения("ВставитьКартинкуИзФайлаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		//Вставляем картинку на форму
		Попытка						
			ВыбраннаяКартинка = Новый Картинка(Диалог.ПолноеИмяФайла,Ложь);
			АдресКартинки = ПоместитьВоВременноеХранилище(ВыбраннаяКартинка,ЭтотОбъект.УникальныйИдентификатор);
			
			ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
			Если ТекВыделение = Неопределено Тогда
				Возврат;
			Иначе
				УзелЭлемента = ТекВыделение.createRange();
			КонецЕсли;
			
			УзелЭлемента.execCommand("InsertImage",false,АдресКартинки);
			
			НоваяСтрока = ТаблицаВложений.Добавить();
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
			НоваяСтрока.Адрес = АдресКартинки;
		Исключение КонецПопытки;
		ЭтотОбъект.Модифицированность = Истина;
		
		ПодготовитьТекстHTML(Строка(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML));
		РаботаСHTML.ПередатьОбъектыСтраницыНаКлиента(ТекстСтатьиHTML,ТаблицаВложений);
		
		ПоказатьРежимыКнопок();
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Получим ссылку и представление
	ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
	Если ТекВыделение = Неопределено Тогда
		Возврат;
	Иначе
		УзелЭлемента = ТекВыделение.createRange();
	КонецЕсли;
	
	ТекЭлемент = УзелЭлемента.parentElement();
	
	Если Не ЗначениеЗаполнено(УзелЭлемента.text) Тогда 
		Возврат;
	КонецЕсли;	
	
	ФормаГиперСсылки = ПолучитьФорму("ОбщаяФорма.ВыборГиперссылки");
	Попытка
		ФормаГиперСсылки.ГиперСсылка = ТекЭлемент.href;
	Исключение 
		//не нашли ссылку так, попробуем по другому:
		ГиперСсылка = "";
		ВыделенныйТекстHTML = УзелЭлемента.htmlText;
		СимволНачала = СтрНайти(ВыделенныйТекстHTML,"href=");
		Если СимволНачала <> 0 Тогда
			Для Инд = СимволНачала+5 По СтрДлина(ВыделенныйТекстHTML) Цикл
				ТекСимвол = Сред(ВыделенныйТекстHTML,Инд,1);
				Если ТекСимвол <> ">" Тогда
					ГиперСсылка = ГиперСсылка+ТекСимвол;
				Иначе
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		ГиперСсылка = СтрЗаменить(ГиперСсылка,"""","");
		ФормаГиперСсылки.ГиперСсылка = ГиперСсылка;
	КонецПопытки;
	ФормаГиперСсылки.Представление =УзелЭлемента.text;
	ФормаГиперСсылки.ДоступностьПредставления =Истина;
	ФормаГиперСсылки.СсылкаНаОбъект = Объект.Ссылка;
	
	СтруктураВозврата = ФормаГиперСсылки.ОткрытьМодально();
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		Представление  = СтруктураВозврата.Представление;
		Гиперссылка = НРег(СтруктураВозврата.Гиперссылка);
		
		УзелЭлемента.execCommand("CreateLink", Ложь, Гиперссылка);
		
		//после установки ссылки у нас остается выделенный текст представления
		//В него поместим новое представление
		Попытка
			ТекВыделение = Элементы.ПолеHTMLДокумента.Документ.selection;
			Если ТекВыделение = Неопределено Тогда
				Возврат;
			Иначе
				УзелЭлемента = ТекВыделение.createRange();
			КонецЕсли;
			
			ТекЭлемент = УзелЭлемента.parentElement();
			Если ТекЭлемент.tagName <>"A" тогда
				УзелЭлемента.text = Представление;
			Иначе
				ТекЭлемент.innerHTML = Представление;
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
		ЭтотОбъект.Модифицированность = ИСтина;
		
	КонецЕсли;
	ПоказатьРежимыКнопок();
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = ПолучитьФорму("ОбщаяФорма.ВыборЦвета").ОткрытьМодально();
	
	Если Цвет <> Неопределено Тогда
		Кнопка = Сред(Команда.Имя, 8);
		Если Элементы.ПолеHTMLДокумента.Документ.queryCommandSupported(Кнопка) Тогда
			Элементы.ПолеHTMLДокумента.Документ.execCommand(Кнопка, Ложь, "" + БазаЗнанийКлиентСервер.ПеревестиИз10(Цвет.Красный) + БазаЗнанийКлиентСервер.ПеревестиИз10(Цвет.Зеленый) + БазаЗнанийКлиентСервер.ПеревестиИз10(Цвет.Синий));
		КонецЕсли;
		ЭтотОбъект.Модифицированность = ИСтина;
		
	КонецЕсли;
	ПоказатьРежимыКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьHTML(Команда)
	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПропарситьСсылкиИзHTML(Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()	
	Элементы.Служебная.Видимость = ВключитьРежимОтладкиРедактораHTML;
КонецПроцедуры	

&НаКлиенте
Процедура НавигационнаяСсылка_article(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 9);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("СтатьиБазыЗнаний", Идентификатор);
	
	//Проверим существует ли ссылка на статью
	Если БазаЗнанийСервер.ОбъектБДСуществует(ЭлементСсылка) Тогда
		ФормаБазыЗнаний = ПолучитьФорму("Обработка.БазаЗнаний.Форма");
		ФормаБазыЗнаний.НачальнаяСтатья = ЭлементСсылка;
		ФормаБазыЗнаний.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_fileint(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 9);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("Файлы", Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат;
	КонецЕслИ;
	
	//Проверим существует ли ссылка на статью
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ЭлементСсылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылка_filebase(ПараметрСсылки)
	
	Идентификатор = Сред(ПараметрСсылки, 10);
	
	Разделитель = СтрНайти(Идентификатор, "#");
	Если Разделитель > 0 Тогда
		Якорь			= Сред(Идентификатор, Разделитель + 1);
		Идентификатор	= Лев(Идентификатор, Разделитель - 1);
	Иначе 
		Якорь			= "";
	КонецЕсли;
	
	ЭлементСсылка = БазаЗнанийСервер.ПолучитьСсылкуПоИдентификатору("Файлы", Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат;
	КонецЕслИ;
	
	//Проверим существует ли ссылка на статью
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ЭлементСсылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд, связанных с таблицей формы Файлы

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе
			НачатьЗапускПриложения(Неопределено, Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(Элементы.Файлы.ТекущаяСтрока);
		
		ОбновитьДоступностьКомандСпискаФайлов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
	Элементы.Файлы.ТекущаяСтрока,
	ЭтотОбъект.УникальныйИдентификатор,
	Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
	Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
	Элементы.Файлы.ТекущиеДанные.Редактирует);
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.Занять(Элементы.Файлы.ТекущаяСтрока);
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОсвободитьФайл(
	Элементы.Файлы.ТекущаяСтрока,
	Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
	Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
	Элементы.Файлы.ТекущиеДанные.Редактирует);
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОпубликоватьФайл(
	Элементы.Файлы.ТекущаяСтрока, 
	ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	КомандыРаботыСФайламиКлиент.ОбновитьИзФайлаНаДиске(ДанныеФайла, ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = Неопределено;

	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ИмпортФайловЗавершение", ЭтотОбъект));		
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	
	Если НЕ РасширениеПодключено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для импорта файлов необходимо установить расширение работы с файлами.'"));
	Иначе	
		
		Если Объект.Ссылка.Пустая() Тогда 
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
		ВыполнитьИмпортФайлов(Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Выполнить импорт файлов
Процедура ВыполнитьИмпортФайлов(ВладелецИмпортированныхФайлов)
	
	// заранее выбираем файлы (до открытия диалога импорта)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ВыполнитьИмпортФайловЗавершение", ЭтотОбъект, Новый Структура("ВладелецИмпортированныхФайлов, ДиалогОткрытияФайла", ВладелецИмпортированныхФайлов, ДиалогОткрытияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИмпортФайловЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВладелецИмпортированныхФайлов = ДополнительныеПараметры.ВладелецИмпортированныхФайлов;
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		МассивИменФайлов = Новый Массив;
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			МассивИменФайлов.Добавить(ИмяФайла);
		КонецЦикла;
		
		ПараметрыИмпорта = Новый Структура("ПапкаДляДобавления, МассивИменФайлов", 
		ВладелецИмпортированныхФайлов, МассивИменФайлов);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИмпортФайловЗавершен" И Источник = Объект.Ссылка Тогда
		Элементы.Файлы.Обновить();
		Элементы.ГруппаФайлы.Заголовок = "Файлы ("+Формат(ПосчитатьКоличествоВСпискеНаСервере("Файлы"),"ЧН=0; ЧГ=0")+" файл.)";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов()
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	Команда.Доступность = Доступность;
КонецПроцедуры

// Выбрать режим открытия файла и начать редактирование
&НаКлиенте
Функция ВыбратьРежимИРедактироватьФайл(ДанныеФайла) 
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		
		СпрашиватьРежимРедактированияПриОткрытииФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СпрашиватьРежимРедактированияПриОткрытииФайла;
		Если СпрашиватьРежимРедактированияПриОткрытииФайла = Истина Тогда
			
			КакОткрывать = Неопределено;
			
			Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия");
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат "Отмена";
			КонецЕсли;
			
			БольшеНеСпрашивать = Результат.БольшеНеСпрашивать;
			Если БольшеНеСпрашивать = Истина Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Ложь);
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
			
			КакОткрывать = Результат.КакОткрывать;
			
			Если КакОткрывать = 1 Тогда
				РаботаСФайламиКлиент.РедактироватьФайл(ДанныеФайла);
				ОповеститьОбИзменении(ДанныеФайла.Ссылка);
				Возврат "Редактировать";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "Открыть";
	
КонецФункции	

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
		
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать,Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, Истина);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Не Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с файлами
// 

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
	ВыбраннаяСтрока, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	
	ВыбранныйРежим = ВыбратьРежимИРедактироватьФайл(ДанныеФайла);
	Если ВыбранныйРежим = "Редактировать" Тогда
		ОбновитьДоступностьКомандСпискаФайлов();
		Возврат;
	ИначеЕсли ВыбранныйРежим = "Отмена" Тогда
		Возврат;
	КонецЕсли;	
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		"Создание:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			РаботаСФайламиКлиент.СоздатьФайл(РежимСоздания, ВладелецФайла, ЭтотОбъект, Истина);
		Исключение
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ФайлыПередНачаломДобавленияЗавершение", ЭтотОбъект, Новый Структура("ВладелецФайла, ФайлОснование", ВладелецФайла, ФайлОснование)), ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
			ИнформацияОбОшибке()));
            Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	ФайлыПередНачаломДобавленияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияЗавершение(ДополнительныеПараметры) Экспорт
	
	ВладелецФайла = ДополнительныеПараметры.ВладелецФайла;
	ФайлОснование = ДополнительныеПараметры.ФайлОснование;
	
	
	ФайлыПередНачаломДобавленияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияФрагмент()
	
	Элементы.Файлы.Обновить();
	Элементы.ГруппаФайлы.Заголовок = "Файлы ("+Формат(ПосчитатьКоличествоВСпискеНаСервере("Файлы"),"ЧН=0; ЧГ=0")+" файл.)";

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		"Создание:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	Элементы.ГруппаФайлы.Заголовок = "Файлы ("+Формат(ПосчитатьКоличествоВСпискеНаСервере("Файлы"),"ЧН=0; ЧГ=0")+" файл.)";
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

//////////////////////////////////////////////////////////////////////////////// 
// Служебные процедуры клиент
//

&НаКлиенте
Процедура ПропарситьКартинкиИзHTML(ТекстHTML);
	МассивСсылок = Новый Массив();
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ПостроительDOM = Новый ПостроительDOM;
	
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);		
	Для Каждого ДанныеКартинки из ДокументHTML.Картинки Цикл
		СсылкаНаКартинку = ДанныеКартинки.src;
		Если Найти(СсылкаНаКартинку,"http:") <> 0 ИЛИ Найти(СсылкаНаКартинку,"https:") <> 0 Тогда
			МассивСсылок.Добавить(СсылкаНаКартинку);
		КонецЕсли;
	КонецЦикла;	

	Если МассивСсылок.Количество() > 0 Тогда
		КаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		
		Если Не ЗначениеЗаполнено(КаталогПользователя) Тогда
			Сообщить("Не заполнен основной каталог пользователя для временных файлов!");
			Возврат;
		КонецЕслИ;
		
		СоответствиеВложений = ПолучитьВложенияНаКлиенте(МассивСсылок,КаталогПользователя);
		ТекстHTML = ЗаменитьСсылкиНаВложения(ТекстHTML,СоответствиеВложений)
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВложенияНаКлиенте(МассивСсылок,КаталогПользователя);
	
	СоответствиеВложений = Новый Соответствие();
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат СоответствиеВложений;
	КонецЕсли;	
	
	КаталогПользователя = КаталогВременныхФайлов();
	
	//Создадим каталог для картинок 	
	ИмяКаталога = КаталогПользователя + "ImgSite";
	
	Если НайтиФайлы(ИмяКаталога).Количество() = 0 Тогда 
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;	
	
	Инд = 0;	
	Для Каждого СсылкаНаКартинку Из  МассивСсылок Цикл
		
		ИмяФайлаКартинки = БазаЗнанийКлиентСервер.СохранитьКартинкуСайта(ИмяКаталога,СсылкаНаКартинку,Инд);
		Если ИмяФайлаКартинки = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбраннаяКартинка = Новый Картинка(ИмяФайлаКартинки,Ложь);
		АдресКартинки = ПоместитьВоВременноеХранилище(ВыбраннаяКартинка,ЭтотОбъект.УникальныйИдентификатор);
		
		//Пытаемся прочитать картинку. Если не получится - значит картинка "битая"
		Попытка 
			ВыбраннаяКартинка.Преобразовать(ФорматКартинки.PNG);
		Исключение
			Продолжить;
		КонецПопытки;	
		
		СоответствиеВложений.Вставить(АдресКартинки,СсылкаНаКартинку);		
		Инд = Инд + 1;
	КонецЦикла;
	УдалитьФайлы(ИмяКаталога);
	Возврат СоответствиеВложений;
КонецФункции

&НаКлиенте
Функция ЗаменитьСсылкиНаВложения(ТекстHTMLВход,СоответствиеВложений)
	ТекстHTML = ТекстHTMLВход;
	Для Каждого КлючИЗначение Из СоответствиеВложений Цикл
		СсылкаНаКартинку = КлючИЗначение.Значение;
		АдресКартинки = КлючИЗначение.Ключ;
		
		НоваяСтрока = ТаблицаВложений.Добавить();
		НоваяСтрока.Ключ = Новый УникальныйИдентификатор();
		НоваяСтрока.Адрес = АдресКартинки;
		
		ТекстHTML =СтрЗаменить(ТекстHTML,СсылкаНаКартинку,АдресКартинки);
	КонецЦикла;
	
	Возврат ТекстHTML;
КонецФункции

&НаКлиенте
Процедура ПроверкаИзмененияСостоянияДокумента()
	Если ЭтаФорма.Модифицированность = Истина Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ПолеHTMLДокумента.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийТекст = Элементы.ПолеHTMLДокумента.Документ.Body.InnerHTML;
	Если ТекущийТекст <> ИзначальныйТекст Тогда
		 ЭтаФорма.Модифицированность = Истина; 
	КонецЕсли;	 
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Служебные процедуры сервер
//
	
&НаСервере
Процедура ПостроитьДеревоРазделовНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("РазделыДерево");
	ДеревоЗначений.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазделыБазыЗнаний.Родитель КАК Родитель,
	|	РазделыБазыЗнаний.Ссылка
	|ИЗ
	|	Справочник.РазделыБазыЗнаний КАК РазделыБазыЗнаний
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	РазделыБазыЗнаний.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
			СтрокиРодитель = ДеревоЗначений.Строки;
		Иначе 
			СтрокаРодитель =  НайтиСтрокуДерева(ДеревоЗначений,Выборка.Родитель);
			Если СтрокаРодитель = Неопределено Тогда
				СтрокаРодитель = ДеревоЗначений;
			КонецЕсли;
			
			СтрокиРодитель = СтрокаРодитель.Строки;
		КонецЕсли;
		
		МассивСтрок = Объект.Разделы.НайтиСтроки(Новый Структура("Раздел", Выборка.Ссылка));
		
		НоваяСтрока = СтрокиРодитель.Добавить();
		НоваяСтрока.Использование	= (МассивСтрок.Количество() > 0);
		НоваяСтрока.Раздел		= Выборка.Ссылка;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "РазделыДерево");
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуДерева(Дерево,ИскомоеЗначение)
	СтрокаРодитель = Дерево.Строки.Найти(ИскомоеЗначение);
	Если СтрокаРодитель = Неопределено Тогда
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			
			Если СтрокаРодитель <> неопределено Тогда
				Прервать;
			КонецЕсли;	
			
			СтрокаРодитель = НайтиСтрокуДерева(СтрокаДерева,ИскомоеЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СтрокаРодитель;
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВДеревоРазделов(Выборка,Дерево)
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТекстHTML(ТекстHTML)
	//Добавим тег HTML если он отсутствует. 
	//Необходимо для корректного отображения в элементе формы.
	Если СтрЧислоВхождений(ТекстHTML,"<body") = 0 Тогда
		ЗаголовокHTML = "<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		//|<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|</head>
		|<body>";
		
		ПодвалHTML = "</body>
		|</html>";
		
		ТекстHTML = ЗаголовокHTML + ТекстHTML + ПодвалHTML;
	КонецЕсли;	
	
	ЗаменитьИдентификаторыОбъектовНаАдресаВHTML(ТекстHTML);	
	ПропарситьСсылкиИзHTML(ТекстHTML);	
	
	ЭтотОбъект.ТекстСтатьиHTML = ТекстHTML;
КонецПроцедуры	

&НаСервере
Процедура ПропарситьСсылкиИзHTML(ТекстДляПарсинга)
	//В процессе работы с текстом HTML (если переколючались в режим просмотра HTML к примеру) ослик и платформа периодически добавляет мусор в пути
	//отучаем его от этого плохого занятия
	Для Каждого Стр из ЭтотОбъект.ТаблицаВложений Цикл
		Адрес = ?(ЗначениеЗаполнено(Стр.ИмяЛокальногоФайла),Стр.ИмяЛокальногоФайла,Стр.Адрес);
		
		//убираем за осликом about: в ссылках без HTTP://
		ТекстДляПарсинга = СтрЗаменить(ТекстДляПарсинга,"about:"+Адрес,Адрес);
		
		//Также платформа может для ссылок добавить ссылку на базу
		ТекстДляПарсинга = СтрЗаменить(ТекстДляПарсинга, ПолучитьНавигационнуюСсылкуИнформационнойБазы()+"/"+Адрес,Адрес);
		
		//Или ослик может добавить file там где его не надо. При этом слеши он поменяет на обратные
		ТекстДляПарсинга = СтрЗаменить(ТекстДляПарсинга, "file:///"+СтрЗаменить(Адрес,"\","/"),Адрес);
		
		//Или платформа дописать к идентификатору лишнего
		ТекстДляПарсинга = СтрЗаменить(ТекстДляПарсинга, ПолучитьНавигационнуюСсылкуИнформационнойБазы()+"/"+Стр.Ключ,Стр.Ключ);
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьHTMLСервер()
	ТекстHTML = Объект.ТекстСтатьиHTML;
	ПодготовитьТекстHTML(ТекстHTML);
КонецПроцедуры	

&НаСервере
Процедура ЗаменитьИдентификаторыОбъектовНаАдресаВHTML(ТекстHTML)
	//Получим вложения и поместим их во временное хранилище
	Для Каждого Стр Из ТаблицаВложений Цикл
		АдресКартинки = Стр.Адрес;
		Если Не ЗначениеЗаполнено(Стр.Адрес) Тогда
			ТекКартинка = Стр.Значение;
			АдресКартинки = ПоместитьВоВременноеХранилище(ТекКартинка,ЭтотОбъект.УникальныйИдентификатор);
			Стр.Адрес = АдресКартинки;
		КонецЕсли;	
		//Если у нас прописано через cid
		ТекстHTML = СтрЗаменить(ТекстHTML,"cid:"+Стр.Ключ,АдресКартинки);
		//Если прописано через img src='
		ТекстHTML = СтрЗаменить(ТекстHTML,"src='"+Стр.Ключ,"src='"+АдресКартинки);
		//Если прописано через img src=
		ТекстHTML = СтрЗаменить(ТекстHTML,"src="""+Стр.Ключ,"src="""+АдресКартинки);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТаблицуВложений(ТаблицаВложений)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыHTMLСтраниц.Идентификатор,
	|	ОбъектыHTMLСтраниц.Вложение
	|ИЗ
	|	РегистрСведений.ОбъектыHTMLСтраниц КАК ОбъектыHTMLСтраниц
	|ГДЕ
	|	ОбъектыHTMLСтраниц.Владелец = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаВложений.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТаблицаВложений.Добавить();
		НоваяСтрока.Ключ = ВыборкаДетальныеЗаписи.Идентификатор;
		НоваяСтрока.Адрес = ПоместитьВоВременноеХранилище(ВыборкаДетальныеЗаписи.Вложение.Получить(),ЭтотОбъект.УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОтключитьОбработчикОжидания("ПроверкаИзмененияСостоянияДокумента");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда 
		ТекстПредупреждения = "Данные по статье не были сохранены! Изменения могут быть не сохранены!"; 
		Отказ = Истина;
	ИначеЕсли Не ВыполняетсяЗакрытие = Истина И ЭтотОбъект.Модифицированность  = Истина Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение",ЭтотОбъект),"Данные были изменены. Сохранить изменения?",РежимДиалогаВопрос.ДаНетОтмена);
	Иначе	
		Если ЗавершитьРаботуСистемы = Истина И ВыполняетсяЗакрытие = Истина Тогда
			ВыполняетсяЗакрытие = Ложь;
			ЗавершитьРаботуСистемы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = истина;
		Записать();
		Закрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;  
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПосчитатьКоличествоВСпискеНаСервере(ИмяСписка)
	Если ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("ДинамическийСписок") Тогда
		Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = МакетКомпоновки.НаборыДанных.НаборДанныхДинамическогоСписка.Запрос;
		СтрокаВЫБРАТЬ = Лев(Запрос.Текст, Найти(Запрос.Текст, Символы.ПС));
		
		Запрос.Текст = СтрокаВЫБРАТЬ + "Количество(*) КАК Кол" + Сред(Запрос.Текст, Найти(Запрос.Текст, Символы.ПС + "ИЗ" + Символы.ПС));
		Для Каждого парам из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(парам.Имя, парам.Значение);
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Кол;
		Иначе
			Возврат 0;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("ТаблицаЗначений") Тогда
		Возврат ЭтаФорма[ИмяСписка].Количество();	
	ИначеЕсли ТипЗнч(ЭтаФорма[ИмяСписка]) = Тип("СписокЗначений") Тогда
		Возврат ЭтаФорма[ИмяСписка].Количество();
	Иначе
		Возврат 0;
	КонецЕслИ;	
КонецФункции

