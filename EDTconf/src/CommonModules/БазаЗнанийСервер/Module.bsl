////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАТИСТИКОЙ БАЗЫ ЗНАНИЙ

Функция РассчитатьСреднююОценку(СтруктураДанных) Экспорт
	
	КоличествоИтого = СтруктураДанных.Оценка1 + 
		СтруктураДанных.Оценка2 + 
		СтруктураДанных.Оценка3 + 
		СтруктураДанных.Оценка4 + 
		СтруктураДанных.Оценка5;
	
	Если КоличествоИтого = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СредняяОценка = (СтруктураДанных.Оценка1 * 1 +
		СтруктураДанных.Оценка2 * 2 + 
		СтруктураДанных.Оценка3 * 3 + 
		СтруктураДанных.Оценка4 * 4 + 
		СтруктураДанных.Оценка5 * 5) / КоличествоИтого;
	
	Возврат СредняяОценка;
	
КонецФункции

Процедура ЗарегистрироватьИзменениеСтатьи(СтатьяСсылка) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
	КонецЕсли;
	
	Если МенеджерЗаписи.Создана = Дата(1, 1, 1) Тогда
		МенеджерЗаписи.Создана = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерЗаписи.Изменена = ТекущаяДатаСеанса();
	
	СтруктураОценок = Новый Структура("Оценка1, Оценка2, Оценка3, Оценка4, Оценка5");
	ЗаполнитьЗначенияСвойств(СтруктураОценок, МенеджерЗаписи);
	
	МенеджерЗаписи.СредняяОценка = РассчитатьСреднююОценку(МенеджерЗаписи);
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ДобавитьПросмотрСтатьи(СтатьяСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(СтатьяСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = НаборЗаписей[0];
	ЗаписьРегистра.Просмотры = ЗаписьРегистра.Просмотры + 1;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ДобавитьОценкуСтатье(СтатьяСсылка, Оценка) Экспорт
	
	ИмяРеквизита = "Оценка" + Строка(Оценка);
	
	Если Метаданные.РегистрыСведений.СтатистикаСтатейБазыЗнаний.Ресурсы.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(СтатьяСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = НаборЗаписей[0];
	ЗаписьРегистра[ИмяРеквизита] = ЗаписьРегистра[ИмяРеквизита] + 1;
	ЗаписьРегистра.СредняяОценка = РассчитатьСреднююОценку(ЗаписьРегистра);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СТРАНИЦ БАЗЫ ЗНАНИЙ

Функция ПолучитьТитульнуюСтраницу(ОбъектФорма) Экспорт
	
	АдресаКартинок = ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
	ОсноваСтраницы = ТекстHTML_ОсноваСтраницы(АдресаКартинок);
	
	// Разделы
	МассивРазделов = ПолучитьРазделы(Неопределено);
	ПараметрыВывода	= Новый Структура;
	ПараметрыВывода.Вставить("КнопкаДобавить", Истина);
	ТекстРаздела	= ТекстHTML_Разделы(АдресаКартинок, МассивРазделов, ПараметрыВывода);
	
	// Статьи
	СтруктураСтатей	= ПолучитьСтатьиГлавнойСтраницы();
	ТекстСтатьи		= ТекстHTML_СтатьиТитульнойСтраницы(АдресаКартинок, СтруктураСтатей);
	
	ТекстСтраницы	= ТекстРаздела + ТекстСтатьи;
	
	Возврат СтрЗаменить(ОсноваСтраницы, "[[ОсновнойКонтент]]", ТекстСтраницы);
	
КонецФункции

Функция ПолучитьСтраницуРаздела(ОбъектФорма, знач РазделСсылка) Экспорт
	АдресаОсновныхКартинок = ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);

	АдресаКартинок = АдресаОсновныхКартинок;
	ОсноваСтраницы = ТекстHTML_ОсноваСтраницы(АдресаКартинок);
	
	// Путь к странице
	МассивПуть		= ПолучитьПутьТекущейСтраницы(РазделСсылка);
	ТекстПуть		= ТекстHTML_Путь(АдресаКартинок, МассивПуть);
	
	// Разделы
	МассивРазделов = ПолучитьРазделы(РазделСсылка);
	ПараметрыВывода	= Новый Структура("КнопкаДобавить, КнопкаИзменить, Раздел", 
		Истина,
		Истина,
		РазделСсылка);
	ТекстРаздела	= ТекстHTML_Разделы(АдресаКартинок, МассивРазделов, ПараметрыВывода);
	
	// Статьи
	МассивСтатьи	= ПолучитьСтатьи(РазделСсылка);
	ПараметрыВывода	= Новый Структура("Информация, КнопкаДобавить, Заголовок",
		"Описание",
		Истина,
		"Статьи по разделу");
	ТекстСтатьи		= ТекстHTML_Статьи(АдресаКартинок, МассивСтатьи, ПараметрыВывода);
	ТекстСтатьи	 	= "<div class='articles'>" + ТекстСтатьи + "</div>";

	// Итоговый результат
	ТекстСтраницы	= ТекстПуть + ТекстРаздела + ТекстСтатьи;
	Возврат СтрЗаменить(ОсноваСтраницы, "[[ОсновнойКонтент]]", ТекстСтраницы);
	
КонецФункции

Функция ПолучитьСтраницуСтатьи(ОбъектФорма, знач СтатьяСсылка) Экспорт
	
	// Картинки
	АдресаКартинок	= ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
	
	// Путь к странице
	МассивПуть		= ПолучитьПутьТекущейСтраницы(СтатьяСсылка);
	ТекстПуть		= ТекстHTML_Путь(АдресаКартинок, МассивПуть);
	
	// Статья
	ПараметрыВывода	= Новый Структура("КнопкаИзменить, ДопСтили, Рейтинг", Истина, "", Истина);
	
	СоответствиеКартинокСтатьи = ПолучитьСтруктуруАдресовКартинокСтатьи(СтатьяСсылка,ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
    АдресаКартинок.Вставить("КартинкиСтатьи",СоответствиеКартинокСтатьи);
	
	ТекстСтатьи		= ТекстHTML_ОписаниеСтатьи(АдресаКартинок, СтатьяСсылка, ПараметрыВывода);

	// Основная часть
	ОсноваСтраницы	= ТекстHTML_ОсноваСтраницы(АдресаКартинок, ПараметрыВывода.ДопСтили);
	
	// Итоговый результат
	ТекстСтраницы	= ТекстПуть + ТекстСтатьи;
	Возврат СтрЗаменить(ОсноваСтраницы, "[[ОсновнойКонтент]]", ТекстСтраницы);
	
КонецФункции

Функция ПолучитьСтраницуПечатиСтатьи(ОбъектФорма, знач СтатьяСсылка) Экспорт
	
	ТаблицаСтилей = БазаЗнанийКлиентСерверПовтИсп.ПолучитьТаблицуСтилей(Истина);
	ТаблицаСтилей = СтрЗаменить(ТаблицаСтилей, "/*ДОПОЛНИТЕЛЬНО*/", "");
	
	ОсноваСтраницы = 
	"<html>
	|	<head>
	|	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	//|	<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
	|	<meta name=""format-detection"" content=""telephone=no"" />
	|		" + ТаблицаСтилей + "
	|	</head>
	|	<body>
	|		<div id='allpage'>
	|			<div id='content'>
	|				<div id='content_main'>
	|					[[ОсновнойКонтент]]
	|				</div>
	|			</div>
	|		</div>
	|	</body>
	|</html>";
	
	// Картинки
	АдресаКартинок	= ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
	
	// Статья	
	ПараметрыВывода	= Новый Структура("КнопкаИзменить, ДопСтили, Рейтинг", Ложь, "", Ложь);

	СоответствиеКартинокСтатьи = ПолучитьСтруктуруАдресовКартинокСтатьи(СтатьяСсылка,ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
    АдресаКартинок.Вставить("КартинкиСтатьи",СоответствиеКартинокСтатьи);
	
	ТекстСтатьи		= ТекстHTML_ОписаниеСтатьи(АдресаКартинок, СтатьяСсылка,ПараметрыВывода);
	
	// Итоговый результат
	ТекстСтраницы	= ТекстСтатьи;
	Возврат СтрЗаменить(ОсноваСтраницы, "[[ОсновнойКонтент]]", ТекстСтраницы);
	
КонецФункции

Функция ПолучитьСтраницуСодержания(ОбъектФорма) Экспорт
	
	АдресаКартинок = ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
	ОсноваСтраницы = ТекстHTML_ОсноваСтраницы(АдресаКартинок);
			
	//Готовим скрипты
	АдресаСкриптов = ПолучитьАдресаСкриптовСодержания(ОбъектФорма,АдресаКартинок);
	ТекстСодержания = ТекстHTML_ДеревоРазделов(АдресаСкриптов);
	
	// Итоговый результат
	ТекстСтраницы	= ТекстСодержания;
	Возврат СтрЗаменить(ОсноваСтраницы, "[[ОсновнойКонтент]]", ТекстСтраницы);
	
КонецФункции

Функция ПолучитьАдресаСкриптовСодержания(ОбъектФорма,АдресаКартинок=Неопределено) Экспорт
	Если АдресаКартинок = Неопределено Тогда
		АдресаКартинок = ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
	КонецЕсли;
	
	//Готовим скрипты
	СтруктураСкриптов = ПолучитьСтруктуруСкриптов(ОбъектФорма.УникальныйИдентификатор,АдресаКартинок);
	АдресаСкриптов = ИзвлечьСкриптыИзСтруктуры(СтруктураСкриптов,ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);

	
	Возврат АдресаСкриптов;
КонецФункции

Функция ПолучитьСтраницуРезультатовПоиска(ОбъектФорма,ТекстРезультатов) Экспорт
	
	АдресаКартинок = ПолучитьАдресаОсновныхКартинок(ОбъектФорма.УникальныйИдентификатор,ОбъектФорма.ТаблицаОбъектов);
	ДопСтили = "
	|	div.presentation {font-size: 14px;}
	|	div.textPortion {font-size: 13px;}
	|	div.description {font-size: 13px; color: #A0A000;}
	|	div.search_result {font-size: 15px; border-left: 1px solid #D8D8D8; padding: 0 25px 25px 25px; overflow:hidden;}
	|	span.bold {font-weight: bold;}
	|	span.color {background-color: #FFFFA0;}
	|	a {text-decoration:none;}";
	
	ОсноваСтраницы = ТекстHTML_ОсноваСтраницы(АдресаКартинок,ДопСтили);
	
	// Итоговый результат
	ВырезатьТекстТелаДокумента(ТекстРезультатов);

	ТекстСтраницы	= ТекстРезультатов;
	
	Возврат СтрЗаменить(ОсноваСтраницы, "[[ОсновнойКонтент]]", ТекстСтраницы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ МЕТОДЫ


//Скрипты

Функция ДобавитьСкрипт(Скрипты, Идентификатор, ИмяСкрипта, ИмяМакета = "")
		
	
	ИмяМакета		= ?(ПустаяСтрока(ИмяМакета), ИмяСкрипта, ИмяМакета);
	ТекстовыеДанные	= Обработки.БазаЗнаний.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	Скрипты.Вставить(ИмяМакета, ТекстовыеДанные);
	
КонецФункции


// Сбор данных

Процедура ДополнитьМассивСтатейДанными(МассивСтатей, ПолеСортировки = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", МассивСтатей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнаний.Ссылка КАК Ссылка,
	|	СтатьиБазыЗнаний.Разделы.(
	|		Раздел
	|	) КАК Разделы,
	|	СтатьиБазыЗнаний.Наименование,
	|	СтатьиБазыЗнаний.Описание КАК КраткоеОписание,
	|	СтатьиБазыЗнаний.РеквизитДопУпорядочивания,
	|	Статистика.Просмотры КАК Просмотры,
	|	Статистика.Создана КАК Создана,
	|	Статистика.Изменена КАК Изменена,
	|	Статистика.СредняяОценка КАК СредняяОценка,
	|	Статистика.Оценка1 + Статистика.Оценка2 + Статистика.Оценка3 + Статистика.Оценка4 + Статистика.Оценка5 КАК Проголосовало
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
	|		ПО СтатьиБазыЗнаний.Ссылка = Статистика.СтатьяБазыЗнаний
	|ГДЕ
	|	СтатьиБазыЗнаний.Ссылка В(&Ссылки)
	|	И НЕ СтатьиБазыЗнаний.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Если НЕ ПустаяСтрока(ПолеСортировки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка", "
		|
		|УПОРЯДОЧИТЬ ПО
		|	" + ПолеСортировки); 
	КонецЕсли;
	Результат	= Запрос.Выполнить();
	Выборка		= Результат.Выбрать();
	
	МассивСтатей.Очистить();
	Пока Выборка.Следующий() Цикл
		Заголовок	= Выборка.Наименование;
		Описание	= Выборка.КраткоеОписание;
		
		Разделы	= Выборка.Разделы.Выгрузить();
		Раздел	= ?(Разделы.Количество() = 1, Разделы[0].Раздел, Неопределено);
		Если ЗначениеЗаполнено(Раздел) Тогда
			Идентификатор = Строка(Раздел.УникальныйИдентификатор());
			СтрРаздел = ", <a href='category:" + Идентификатор + "'>" + Строка(Раздел) + "</a>";
		Иначе 
			СтрРаздел = "";
		КонецЕсли;
		
		Опубликована	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Опубликована %1%2'"),
			Формат(Выборка.Создана, "ДФ='ддд, МММ дд, гггг'"),
			СтрРаздел);
		
		Просмотрена		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Просмотрена %1 раз с %2%3'"),
			Формат(Выборка.Просмотры, "ЧН=0; ЧГ="),
			Формат(Выборка.Создана, "ДФ='ддд, МММ дд, гггг'"),
			СтрРаздел);
		
		Оценена			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Оценка %1. Проголосовало: %2'"),
			Строка(Выборка.СредняяОценка) + "/5",
			Строка(Выборка.Проголосовало));
		
		СтруктураДанных = Новый Структура("Ссылка, Идентификатор, Заголовок, Описание, Опубликована, Просмотрена, Оценена",
			Выборка.Ссылка,
			Выборка.Ссылка.УникальныйИдентификатор(),
			Заголовок, 
			Описание, 
			Опубликована, 
			Просмотрена, 
			Оценена);
		
		МассивСтатей.Добавить(СтруктураДанных);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПутьКРазделу(РазделСсылка)
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	
	РодительСсылка = РазделСсылка.Родитель;
	Пока ЗначениеЗаполнено(РодительСсылка) Цикл
		МассивПуть.Вставить(1, РодительСсылка);
		
		РодительСсылка = РодительСсылка.Родитель;
	КонецЦикла;
	
	МассивПуть.Добавить(Строка(РазделСсылка));
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьПутьКСтатье(СтатьяСсылка)
	
	МассивПуть = Новый Массив;
	МассивПуть.Добавить("home");
	
	Запрос = Новый Запрос("ВЫБРАТЬ Т.Раздел ИЗ Справочник.СтатьиБазыЗнаний.Разделы КАК Т ГДЕ Т.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Разделы = Запрос.Выполнить().Выгрузить();
	
	Если Разделы.Количество() > 3 Тогда
		МассивПуть.Добавить("Несколько разделов");
	ИначеЕсли Разделы.Количество() = 1 Тогда
		МассивПуть = ПолучитьПутьКРазделу(Разделы[0].Раздел);
	КонецЕсли; 
	
	МассивПуть.Добавить(Строка(СтатьяСсылка));
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьПутьТекущейСтраницы(знач ЭлементСсылка)
	
	ТипСсылки = ТипЗнч(ЭлементСсылка);
	
	Если ТипСсылки = Тип("СправочникСсылка.РазделыБазыЗнаний") Тогда
		МассивПуть = ПолучитьПутьКРазделу(ЭлементСсылка);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
		МассивПуть = ПолучитьПутьКСтатье(ЭлементСсылка);
	Иначе 
		МассивПуть = Новый Массив;
	КонецЕсли;
	
	Возврат МассивПуть;
	
КонецФункции

Функция ПолучитьРазделы(знач РодительСсылка = Неопределено)
	
	Если РодительСсылка = Неопределено Тогда
		РодительСсылка = Справочники.РазделыБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РодительСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазделыБазыЗнаний.Ссылка КАК Ссылка,
	|	РазделыБазыЗнаний.Наименование,
	|	РазделыБазыЗнаний.Описание,
	|	РазделыБазыЗнаний.РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.РазделыБазыЗнаний КАК РазделыБазыЗнаний
	|ГДЕ
	|	РазделыБазыЗнаний.Родитель = &Ссылка
	|	И НЕ РазделыБазыЗнаний.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделыБазыЗнаний.РеквизитДопУпорядочивания";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Идентификатор");
	ТаблицаДанных.Колонки.Добавить("КоличествоСтатей");
	ТаблицаДанных.ЗаполнитьЗначения(0, "КоличествоСтатей");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтрокаТаблицы.Идентификатор = СтрокаТаблицы.Ссылка.УникальныйИдентификатор();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Раздел", СтрокаТаблицы.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатьиБазыЗнанийРазделы.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Разделы КАК СтатьиБазыЗнанийРазделы
		|ГДЕ
		|	НЕ СтатьиБазыЗнанийРазделы.Ссылка.ПометкаУдаления
		|	И СтатьиБазыЗнанийРазделы.Раздел В ИЕРАРХИИ(&Раздел)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТаблицы.КоличествоСтатей = Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДанных);
	
КонецФункции

Функция ПолучитьСтатьиГлавнойСтраницы(Порция = 10)  экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ "+Порция+"
	|	Статистика.СтатьяБазыЗнаний КАК Статья
	|ИЗ
	|	РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статистика.СредняяОценка УБЫВ,
	|	Статистика.Просмотры УБЫВ";
	Рекомендуемые = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
	ДополнитьМассивСтатейДанными(Рекомендуемые, "СредняяОценка УБЫВ, Просмотры УБЫВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ "+Порция+"
	|	Статистика.СтатьяБазыЗнаний КАК Статья
	|ИЗ
	|	РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статистика.Создана УБЫВ";
	Новые = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
	ДополнитьМассивСтатейДанными(Новые, "Создана УБЫВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ "+Порция+"
	|	Статистика.СтатьяБазыЗнаний КАК Статья
	|ИЗ
	|	РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статистика.Просмотры УБЫВ";
	Популярные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
	ДополнитьМассивСтатейДанными(Популярные, "Просмотры УБЫВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ "+Порция+"
	|	Статистика.СтатьяБазыЗнаний КАК Статья
	|ИЗ
	|	РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статистика.СредняяОценка УБЫВ";
	Рейтинговые = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
	ДополнитьМассивСтатейДанными(Рейтинговые, "СредняяОценка УБЫВ");
	
	Возврат Новый Структура("Рекомендуемые, Новые, Популярные, Рейтинговые", 
		Рекомендуемые, Новые, Популярные, Рейтинговые);
	
КонецФункции

Функция ПолучитьСтатьи(знач РазделРодитель = Неопределено)
	
	Если РазделРодитель = Неопределено Тогда
		РазделРодитель = Справочники.РазделыБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Раздел", РазделРодитель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийРазделы.Ссылка
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Разделы КАК СтатьиБазыЗнанийРазделы
	|ГДЕ
	|	СтатьиБазыЗнанийРазделы.Раздел = &Раздел";
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ДополнитьМассивСтатейДанными(МассивСсылок, "Наименование");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ПолучитьДанныеСтатьи(знач СтатьяСсылка)
	
	ДанныеСтатьи = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнаний.Ссылка,
	|	СтатьиБазыЗнаний.Наименование,
	|	СтатьиБазыЗнаний.Ответственный,
	|	СтатьиБазыЗнаний.ТекстСтатьи КАК Текст,
	|	СтатьиБазыЗнаний.ТекстСтатьиHTML КАК ТекстHTML,
	|	СтатьиБазыЗнаний.Разделы.(
	|		Раздел
	|	),
	|	Статистика.Просмотры КАК Просмотры,
	|	Статистика.Создана КАК Создана,
	|	Статистика.Изменена КАК Изменена,
	|	Статистика.СредняяОценка КАК СредняяОценка,
	|	Статистика.Оценка1 + Статистика.Оценка2 + Статистика.Оценка3 + Статистика.Оценка4 + Статистика.Оценка5 КАК Проголосовало,
	|	СтатьиБазыЗнаний.Описание КАК КраткоеОписание
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
	|		ПО СтатьиБазыЗнаний.Ссылка = Статистика.СтатьяБазыЗнаний
	|ГДЕ
	|	СтатьиБазыЗнаний.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
		
	ДанныеСтатьи.Вставить("Ссылка"			, Выборка.Ссылка);
	ДанныеСтатьи.Вставить("Идентификатор"	, Выборка.Ссылка.УникальныйИдентификатор());
	ДанныеСтатьи.Вставить("Заголовок"		, Выборка.Наименование);
	ДанныеСтатьи.Вставить("Описание"		, Выборка.КраткоеОписание);
	ДанныеСтатьи.Вставить("Текст"			, Выборка.Текст);
	ДанныеСтатьи.Вставить("ТекстHTML"		, Выборка.ТекстHTML);
	ДанныеСтатьи.Вставить("Просмотры"		, Выборка.Просмотры);
	ДанныеСтатьи.Вставить("Создана"			, Выборка.Создана);
	ДанныеСтатьи.Вставить("Изменена"		, Выборка.Изменена);
	ДанныеСтатьи.Вставить("СредняяОценка"	, Выборка.СредняяОценка);
	ДанныеСтатьи.Вставить("Проголосовало"	, Выборка.Проголосовало);
	ДанныеСтатьи.Вставить("Разделы"			, ОбщегоНазначения.ТаблицаЗначенийВМассив(Выборка.Разделы.Выгрузить()));

	Возврат ДанныеСтатьи;
	
КонецФункции

// Формирование HTML кода

Процедура ПроверитьСвойствоПараметров(Параметры, Свойство, Значение)
	Если НЕ Параметры.Свойство(Свойство) Тогда
		Параметры.Вставить(Свойство, Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ВырезатьТекстТелаДокумента(Текст)
	
	НРегТекст = НРег(Текст);
	
	ЕстьТегBody = СтрНайти(НРегТекст, "<body");
	
	НачалоОпределения	= СтрНайти(НРегТекст, "<body>");
	КонецОпределения	= СтрНайти(НРегТекст, "</body>");
	
	Если ЕстьТегBody <> 0 Тогда //body не может закончиться не начавшись
		Текст = Сред(Текст, НачалоОпределения + 6, КонецОпределения - НачалоОпределения - 6);
	КонецЕсли;
КонецПроцедуры

// Формирует текст HTML основного блока любой страницы
//
// Параметры
//	АдресаКартинок - Структура
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_ОсноваСтраницы(АдресаКартинок, ДополнительныеСтили = "")
	
	ТаблицаСтилей = БазаЗнанийКлиентСерверПовтИсп.ПолучитьТаблицуСтилей();
	ТаблицаСтилей = СтрЗаменить(ТаблицаСтилей, "/*ДОПОЛНИТЕЛЬНО*/", ДополнительныеСтили);
	
	ТекстСтраницы = 
	"<html>
	|	<head>
	|	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	//|	<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
	|	<meta name=""format-detection"" content=""telephone=no"" />
	|		" + ТаблицаСтилей + "
	|	</head>
	|	<body>
	|		<div id='allpage'>
	|			<div id='wrap'>
	//|				<div id='left'>
	//|					<img src='" + АдресаКартинок.Логотип + "' id='logo'>
	//|					<div class='left_menu'>
	//|						<p>Навигация</p>
	//|						<ul>
	//|							<li><a href='home'>Главная</a></li>
	//|							<li><a href='title'>Содержание</a></li>
	//|							<li><a href='search'>Поиск</a></li>
	//|						</ul>
	//|					</div>
	//|				</div>	
	//|				<div id='content'>
	|					<div id='content_main'>
	|						[[ОсновнойКонтент]]
	|					</div>
	//|				</div>
	|			</div>
	|		</div>
	|		</div>
	|	</body>
	|</html>";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Содержание" из блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	ДанныеСтатьи - Структура
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_СодержаниеСтатьи(АдресаКартинок, ДанныеСтатьи, ДопСтили)
	
	ТекстСтатьи		= "";
	Идентификатор	= Строка(ДанныеСтатьи.Ссылка.УникальныйИдентификатор());
	
	// Основная часть статьи
	ТекстСтатьи	= ДанныеСтатьи.ТекстHTML;
	
	//Устанавливаем картинки статьи
	СоответствиеКартинок = АдресаКартинок.КартинкиСтатьи;
	Для Каждого Элемент Из СоответствиеКартинок Цикл
		ТекстСтатьи = СтрЗаменить(ТекстСтатьи,Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
	
	//Подготовавливаем текст статьи
	ВырезатьТекстТелаДокумента(ТекстСтатьи);
	
	ТекстСтатьи = СтрЗаменить(ТекстСтатьи, "target='_blank'", "");
	
	Возврат ТекстСтатьи;
	
КонецФункции

// Формирует текст HTML блока "Путь"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивПуть - Массив
//		СправочникСсылка.СтатьиБазыЗнаний, СправочникСсылка.РазделыБазыЗнаний, Строка
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_Путь(АдресаКартинок, МассивПуть)
	
	Если МассивПуть.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПутьКСтранице = "";
	Для Каждого ЗначениеПути Из МассивПуть Цикл
		ПутьКСтранице = ПутьКСтранице + ?(ПустаяСтрока(ПутьКСтранице), "", " » ");
		
		ТипЗначения = ТипЗнч(ЗначениеПути);
		Если ЗначениеПути = "home" Тогда
			ПутьКСтранице = ПутьКСтранице + "<a href='home'>Home</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.РазделыБазыЗнаний") Тогда
			Идентификатор = Строка(ЗначениеПути.УникальныйИдентификатор());
			ПутьКСтранице = ПутьКСтранице + "<a href='category:" + Идентификатор + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.СтатьиБазыЗнаний") Тогда
			Идентификатор = Строка(ЗначениеПути.УникальныйИдентификатор());
			ПутьКСтранице = ПутьКСтранице + "<a href='article:" + Идентификатор + "'>" + Строка(ЗначениеПути) + "</a>";
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда 
			ПутьКСтранице = ПутьКСтранице + ЗначениеПути;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСтраницы = "
	|<div class='page_navigation'>
	|	<div class='page_navigation_pict'><img src='" + АдресаКартинок.Путь + "'></div>
	|	<div>" + ПутьКСтранице + "</div>
	|</div>";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Разделы"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивРазделов - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Наименование - Строка
//			КоличествоСтатей - Число
//			Описание - Строка
// 	Параметры - Структура.
//		КнопкаДобавить - Булево
//		КнопкаИзменить - Булево
//		Раздел - СправочникСсылка.РазделыБазыЗнаний
//		Заголовок - Строка (возможно использование HTML)
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_Разделы(АдресаКартинок, МассивРазделов, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаголовокПоУмолчанию = ?(Параметры.Свойство("Раздел") И ЗначениеЗаполнено(Параметры.Раздел), 
		"Раздел: " + Строка(Параметры.Раздел),
		"Разделы");
	
	ПроверитьСвойствоПараметров(Параметры, "КнопкаДобавить"	, Ложь);
	ПроверитьСвойствоПараметров(Параметры, "КнопкаИзменить"	, Ложь);
	ПроверитьСвойствоПараметров(Параметры, "Раздел"		, Неопределено);
	ПроверитьСвойствоПараметров(Параметры, "Заголовок"		, ЗаголовокПоУмолчанию);
	
	ТекстКоманднойПанели = "";
	Если Параметры.КнопкаДобавить Тогда
		ТекстКоманднойПанели = ТекстКоманднойПанели + "
		|		<a class='command_panel' title='Создать раздел' href='create:category'><img src='" + АдресаКартинок.ДобавитьРаздел + "'></a>
		|";
	КонецЕсли;
	Если Параметры.КнопкаИзменить И ЗначениеЗаполнено(Параметры.Раздел) Тогда
		Идентификатор = Строка(Параметры.Раздел.УникальныйИдентификатор());
		
		ТекстКоманднойПанели = ТекстКоманднойПанели + "
		|		<a class='command_panel' title='Изменить раздел' href='edit:category:" + Идентификатор + "'><img src='" + АдресаКартинок.Редактирование + "'></a>
		|";
	КонецЕсли;
	
	Количество	= МассивРазделов.Количество();
	
	ТекстСтраницы = "
	|<div class='categories'>
	|	<div class='categories_title'>
	|		" + Параметры.Заголовок + ТекстКоманднойПанели + "
	|	</div>
	|	[[ТаблицаРазделов]]
	|</div>
	|";
	
	Если Количество = 0 Тогда
		Возврат СтрЗаменить(ТекстСтраницы, "[[ТаблицаРазделов]]", "");
	КонецЕсли;
	
	КоличествоНаСтраницу = 0;
	Если Количество > 6 Тогда
		ТекстВнутр = "
		|			<td width=30%>[[Разделы_1_3]]</td>
		|			<td width=30%>[[Разделы_4_6]]</td>
		|			<td width=30%>[[Разделы_7_9]]</td>
		|";
		КоличествоНаСтраницу = Цел(Количество / 3);
	ИначеЕсли Количество > 3 Тогда
		ТекстВнутр = "
		|			<td width=47%>[[Разделы_1_3]]</td>
		|			<td width=47%>[[Разделы_4_6]]</td>
		|";
		КоличествоНаСтраницу = Цел(Количество / 2);
	Иначе 
		ТекстВнутр = "
		|			<td width=98%>[[Разделы_1_3]]</td>
		|";
		КоличествоНаСтраницу = Количество;
	КонецЕсли;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[ТаблицаРазделов]]", "
	|	<table>
	|		<tr>" + ТекстВнутр + "</tr>
	|	</table>
	|");
	
	// Добавим записи по разделам
	Разделы_1_3 = "";
	Разделы_4_6 = "";
	Разделы_7_9 = "";
	
	НомерСтраницы	= 1;
	Счетчик			= 0;
	Для Каждого СтруктураРаздела Из МассивРазделов Цикл
		Счетчик = Счетчик + 1;
		Если Счетчик > КоличествоНаСтраницу Тогда
			Счетчик = 0;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
		Идентификатор = Строка(СтруктураРаздела.Идентификатор);
		
		ТекстРаздела = "
		|				<div class='category'>
		|					<div class='category_head'>
		|						<div class='category_head_pict'><img src='" + АдресаКартинок.Раздел + "'></div> 
		|						<div class='category_head_name'><a href='category:" + Идентификатор + "'>" + СтруктураРаздела.Наименование + "</a> 
		|							<span class='category_head_count'>(" + Формат(СтруктураРаздела.КоличествоСтатей, "ЧДЦ=; ЧН=0; ЧГ=") + ")</span></div>
		|					</div>
		|					" + ?(Количество > 9, "", "<div class='category_info'>" + СокрЛП(СтруктураРаздела.Описание) + "</div>") + "
		|				</div>
		|			";
		
		Если НомерСтраницы = 1 Тогда
			Разделы_1_3 = Разделы_1_3 + ТекстРаздела;
		ИначеЕсли НомерСтраницы = 2 Тогда
			Разделы_4_6 = Разделы_4_6 + ТекстРаздела;
		ИначеЕсли НомерСтраницы = 3 Тогда
			Разделы_7_9 = Разделы_7_9 + ТекстРаздела;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Разделы_1_3]]", Разделы_1_3);
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Разделы_4_6]]", Разделы_4_6);
	ТекстСтраницы = СтрЗаменить(ТекстСтраницы, "[[Разделы_7_9]]", Разделы_7_9);
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Статьи"
//
// Параметры
//	АдресаКартинок - Структура
//	МассивСтатей - Массив
//		Структура
//			Идентификатор - УникальныйИдентификатор
//			Заголовок - Строка
//			и пр. поля из запроса в процедуре ДополнитьМассивСтатейДанными
//	Параметры
//		Информация - Строка
//			Допустимые значения: любое поле из запроса в процедуре ДополнитьМассивСтатейДанными
//			кроме полей вложенных подзапросов
//		КнопкаДобавить - Булево
//		КнопкаИзменить - Булево
//		Статья - СправочникСсылка.СтатьиБазыЗнаний
//		Заголовок - Строка (возможно использование HTML)
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_Статьи(АдресаКартинок, МассивСтатей, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаголовокПоУмолчанию = ?(Параметры.Свойство("Статья") И ЗначениеЗаполнено(Параметры.Статья), 
		Строка(Параметры.Статья),
		"Статьи");
	
	ПроверитьСвойствоПараметров(Параметры, "Информация"		, "Описание");
	ПроверитьСвойствоПараметров(Параметры, "КнопкаДобавить"	, Ложь);
	ПроверитьСвойствоПараметров(Параметры, "КнопкаИзменить"	, Ложь);
	ПроверитьСвойствоПараметров(Параметры, "Статья"			, Неопределено);
	ПроверитьСвойствоПараметров(Параметры, "Заголовок"		, ЗаголовокПоУмолчанию);
	
	ТекстКоманднойПанели = "";
	Если Параметры.КнопкаДобавить Тогда
		ТекстКоманднойПанели = ТекстКоманднойПанели + "
		|		<a class='command_panel' title='Создать статью' href='create:article'><img src='" + АдресаКартинок.ДобавитьСтатью + "'></a>
		|";
	КонецЕсли;
	Если Параметры.КнопкаИзменить И ЗначениеЗаполнено(Параметры.Статья) Тогда
		Идентификатор = Строка(Параметры.Статья.УникальныйИдентификатор());
		
		ТекстКоманднойПанели = ТекстКоманднойПанели + "
		|		<a class='command_panel' title='Изменить статью' href='edit:article:" + Идентификатор + "'><img src='" + АдресаКартинок.Редактирование + "'></a>
		|";
	КонецЕсли;
	
	Количество	= МассивСтатей.Количество();

	ТекстСтраницы = "
	|	<div class='articles_title'>
	|		" + Параметры.Заголовок + ТекстКоманднойПанели + "
	|	</div>
	|	[[Статьи]]
	|";
	
	Если МассивСтатей.Количество() = 0 Тогда
		Возврат СтрЗаменить(ТекстСтраницы, "[[Статьи]]", "");
	КонецЕсли;
	
	ТекстСтатей = "";
	Для Каждого СтатьяБазыЗнаний Из МассивСтатей Цикл
		Идентификатор = Строка(СтатьяБазыЗнаний.Идентификатор);
		
		ТекстСтатей = ТекстСтатей + "
		|				<div class='article_head'>
		|					<div class='article_head_pict'><img src='" + АдресаКартинок.Статья + "'></div>
		|					<div class='article_head_title'><a href='article:" + Идентификатор + "'>" + СтатьяБазыЗнаний.Заголовок + "</a></div>
		|					<div class='article_head_info'>" + СтатьяБазыЗнаний[Параметры.Информация] + "</div>
		|				</div>
		|";
	КонецЦикла;
	
	Возврат СтрЗаменить(ТекстСтраницы, "[[Статьи]]", ТекстСтатей);
	
КонецФункции

// Формирует текст HTML блока "Статьи" на главной странице
//
// Параметры
//	АдресаКартинок - Структура
//	СтруктураСтатей - Структура
//		Рекомендуемые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Новые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Популярные - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//		Рейтинговые - Массив (см. МассивСтатей функции ТекстHTML_Статьи)
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_СтатьиТитульнойСтраницы(АдресаКартинок, СтруктураСтатей)
	
	Если СтруктураСтатей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыВывода = Новый Структура("Информация, Заголовок");
	
	ТекстРекомендуемые	= ТекстHTML_Статьи(АдресаКартинок,
		СтруктураСтатей.Рекомендуемые,
		Новый Структура("Информация, Заголовок",
			"Просмотрена",
			"<a href='featured_articles'>Рекомендуемые статьи</a>"));
	
	ТекстНовые			= ТекстHTML_Статьи(АдресаКартинок,
		СтруктураСтатей.Новые,
		Новый Структура("Информация, Заголовок",
			"Опубликована",
			"<a href='recently_added'>Недавно добавленные статьи</a>"));
	
	ТекстПопулярные		= ТекстHTML_Статьи(АдресаКартинок,
		СтруктураСтатей.Популярные,
		Новый Структура("Информация, Заголовок",
			"Просмотрена",
			"<a href='most_popular'>Самые популярные статьи</a>"));
	
	ТекстРейтинговые	= ТекстHTML_Статьи(АдресаКартинок,
		СтруктураСтатей.Рейтинговые,
		Новый Структура("Информация, Заголовок",
			"Оценена",
			"<a href='top_rated'>Наиболее рейтинговые статьи</a>"));
	
	ТекстСтраницы = "
	|<div class='articles'>
	|	<table width='100%'>
	|		<tr>
	|			<td width=47%>
	|				" + ТекстРекомендуемые + "
	|			</td>
	|			<td width=47%>
	|				" + ТекстНовые + "
	|			</td>
	|		</tr>
	|		<tr>
	|			<td>
	|				" + ТекстПопулярные + "
	|			</td>
	|			<td>
	|				" + ТекстРейтинговые + "
	|			</td>
	|		</tr>
	|	</table>
	|</div>
	|";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Статья"
//
// Параметры
//	АдресаКартинок - Структура
//	СтатьяСсылка - СправочникСсылка.СтатьиБазыЗнаний
//	Параметры
//		КнопкаИзменить - Булево
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_ОписаниеСтатьи(АдресаКартинок, СтатьяСсылка, знач Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ПроверитьСвойствоПараметров(Параметры, "КнопкаИзменить"	, Ложь);
	ПроверитьСвойствоПараметров(Параметры, "ДопСтили"		, "");
	ПроверитьСвойствоПараметров(Параметры, "Рейтинг"		, Ложь);
	
	ДанныеСтатьи	= ПолучитьДанныеСтатьи(СтатьяСсылка);
	Идентификатор	= Строка(ДанныеСтатьи.Идентификатор);
	
	ТекстСодержание = "
	|	" + ТекстHTML_СодержаниеСтатьи(АдресаКартинок, ДанныеСтатьи, Параметры.ДопСтили) + "
	|";
	
	ТекстКоманднойПанели = "";
	Если Параметры.КнопкаИзменить Тогда
		ТекстКоманднойПанели = "
		|		<a class='command_panel' title='Изменить статью' href='edit:article:" + Идентификатор + "'><img src='" + АдресаКартинок.Редактирование + "'></a>
		|		<a class='command_panel' title='Отправить на печать' href='print:article:" + Идентификатор + "'><img src='" + АдресаКартинок.Печать + "'></a>
		|";
	КонецЕсли;
	
	ТекстМенюСтатьи = "";
	Если Параметры.Рейтинг Тогда
		ТекстМенюСтатьи = "
		|	<div class='article_options'>
		|		<div class='article_rating'>
		|				<div class='article_rating_title'>Рейтинг статьи (" + Формат(ДанныеСтатьи.СредняяОценка, "ЧН=0; ЧГ=") + ")</div>
		|				<a class='command_panel' href='rating:1:article:" + Идентификатор + "'><img src='" + ?(ДанныеСтатьи.СредняяОценка >= 1,?(ДанныеСтатьи.СредняяОценка<2,АдресаКартинок.ЗвездаПоловина,АдресаКартинок.Звезда),АдресаКартинок.ЗвездаПустая) + "'></a>
		|				<a class='command_panel' href='rating:2:article:" + Идентификатор + "'><img src='" + ?(ДанныеСтатьи.СредняяОценка >= 2,?(ДанныеСтатьи.СредняяОценка<3,АдресаКартинок.ЗвездаПоловина,АдресаКартинок.Звезда),АдресаКартинок.ЗвездаПустая) + "'></a>
		|				<a class='command_panel' href='rating:3:article:" + Идентификатор + "'><img src='" + ?(ДанныеСтатьи.СредняяОценка >= 3,?(ДанныеСтатьи.СредняяОценка<4,АдресаКартинок.ЗвездаПоловина,АдресаКартинок.Звезда),АдресаКартинок.ЗвездаПустая) + "'></a>
		|				<a class='command_panel' href='rating:4:article:" + Идентификатор + "'><img src='" + ?(ДанныеСтатьи.СредняяОценка >= 4,?(ДанныеСтатьи.СредняяОценка<5,АдресаКартинок.ЗвездаПоловина,АдресаКартинок.Звезда),АдресаКартинок.ЗвездаПустая) + "'></a>
		|				<a class='command_panel' href='rating:5:article:" + Идентификатор + "'><img src='" + ?(ДанныеСтатьи.СредняяОценка >= 5,АдресаКартинок.Звезда,АдресаКартинок.ЗвездаПустая) + "'></a>
		|		</div>
		|	</div>
		|";
	КонецЕсли;

	ТекстСтраницы = "
	|<div class='article_content'>
	|	<div class='article_title'>Статья: " + Строка(СтатьяСсылка) + ТекстКоманднойПанели +ТекстМенюСтатьи+ "</div>
	|	<div class='article_text'>" + ТекстСодержание + "</div>
	|</div>
	|";
	
	Возврат ТекстСтраницы;
	
КонецФункции

// Формирует текст HTML блока "Содержание" из блока главной страницы
//
// Параметры
//	АдресаКартинок - Структура
//	СтруктураСкриптов - Структура
//
// Возвращаемое значение
//	Строка
//
Функция ТекстHTML_ДеревоРазделов(АдресаСкриптов)	
	// Основная часть скрипта дерева
	ТекстHTML	= "
	|<script type=""text/javascript"" src="+АдресаСкриптов.tree+"></script>
	|<script type=""text/javascript"" src="+АдресаСкриптов.tree_items+"></script>
	|<script type=""text/javascript"" src="+АдресаСкриптов.tree_tpl+"></script>
	|
	|<script type=""text/javascript"">
	|
	|	new tree (TREE_ITEMS, TREE_TPL);
	|</script> 
	|";
	
	Возврат ТекстHTML;	
КонецФункции

Функция ИзвлечьСкриптыИзСтруктуры(СтруктураСкриптов,Идентификатор,ТаблицаОбъектов)
	АдресаСкриптов = Новый Структура();
	
	Для каждого Эл Из СтруктураСкриптов Цикл
		АдресСкрипта = ПолучитьАдресВременногоХранилища(ТаблицаОбъектов, Эл.Ключ);
		Если ПустаяСтрока(АдресСкрипта) Тогда
			ТекстФайла = Эл.Значение;

			АдресСкрипта = ПоместитьВоВременноеХранилище(ТекстФайла,Идентификатор);
			
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			НоваяСтрока.Ключ = Эл.Ключ;
			НоваяСтрока.Адрес = АдресСкрипта;
		КонецЕсли;
		АдресаСкриптов.Вставить(Эл.Ключ,АдресСкрипта);
	КонецЦикла;
	
	Возврат АдресаСкриптов;
КонецФункции

Функция ПолучитьСтруктуруСкриптов(УникальныйИдентификатор,АдресаКартинок)
	СтруктураСкриптов = Новый Структура();
	
	ДобавитьСкрипт(СтруктураСкриптов, УникальныйИдентификатор, "TREE_TPL");
	ДобавитьСкрипт(СтруктураСкриптов, УникальныйИдентификатор, "Tree");
	
	//В скрипте TREE_TPL установим картинки
	ТекстСкрипта = СтруктураСкриптов.TREE_TPL;
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/base.gif",АдресаКартинок.Раздел);//base
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/empty.gif",АдресаКартинок.Пустая);//empty
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/line.gif",АдресаКартинок.Линия);//line
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/folder.gif",АдресаКартинок.Папка);//folder
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/folderopen.gif",АдресаКартинок.ПапкаОткрыта);//folderopen
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/page.gif",АдресаКартинок.Страница);//page
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/join.gif",АдресаКартинок.Вход);//join
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/plus.gif",АдресаКартинок.Плюс);//plus
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта,"icons/minus.gif",АдресаКартинок.Минус);//minus
	
	
    СтруктураСкриптов.TREE_TPL = ТекстСкрипта;
	
	//Добавим скрипт структуры разделов
	ТекстСкрипта = СгенерироватьСкриптДереваРазделов();
	СтруктураСкриптов.Вставить("TREE_ITEMS",ТекстСкрипта);
	
	Возврат СтруктураСкриптов;
КонецФункции

Функция СгенерироватьСкриптДереваРазделов()
	ТекстСкрипта = Новый ТекстовыйДокумент();

	ГлЗакрытьТегов = 0;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазделыБазыЗнаний.Наименование,
		|	РазделыБазыЗнаний.Ссылка КАК Ссылка,
		|	РазделыБазыЗнаний.Родитель
		|ИЗ
		|	Справочник.РазделыБазыЗнаний КАК РазделыБазыЗнаний
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";

	Результат = Запрос.Выполнить();

	//Формируем заголовок
	ТекстСкрипта.ДобавитьСтроку("var TREE_ITEMS = [");
	ТекстСкрипта.ДобавитьСтроку("['Разделы базы знаний', null"+?(Результат.Пустой(),"",","));
    //формируем разделы
	ВыборкаСИерархией = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВыдатьРекурсивноРаздел(ВыборкаСИерархией,ТекстСкрипта);
	
	ТекстСкрипта.ДобавитьСтроку("],");
	ТекстСкрипта.ДобавитьСтроку("];");
	
	Возврат ТекстСкрипта.ПолучитьТекст();
КонецФункции

Процедура ВыдатьРекурсивноРаздел(Выборка,ТекстСкрипта)
	Пока Выборка.Следующий() Цикл
		//Идентификатор = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		ИдРаздела = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Идентификатор = "category:" + ИдРаздела;
		
		НаименованиеРаздела = СокрЛП(ПодготовитьНаименованиеРазделаДляСодержания(Выборка.Наименование));
		
		ТекстСкрипта.ДобавитьСтроку("['"+НаименованиеРаздела+"','"+Идентификатор+"',");
		ВыдатьРекурсивноРаздел(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией),ТекстСкрипта);
		ТекстСкрипта.ДобавитьСтроку("],");
	КонецЦикла;
КонецПроцедуры

Функция ПодготовитьНаименованиеРазделаДляСодержания(Знач Наименование)
	СтрокаНедопустимыхСимволов = "[ "" ' , ] ;";
	СтрМассив = СтрЗаменить(СтрокаНедопустимыхСимволов," ",Символы.ПС);
	
	Для Инд = 1 По СтрЧислоСтрок(СтрМассив) Цикл
		ЗапрещенныйСимвол = СокрЛП(СтрПолучитьСтроку(СтрМассив,Инд));
		Наименование = СтрЗаменить(Наименование,ЗапрещенныйСимвол,"");
	КонецЦикла;
	
    Возврат Наименование;
КонецФункции

Функция ПолучитьСсылкуПоНавигационнойСсылке(стрНавигационнаяССылка) Экспорт
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(стрНавигационнаяССылка);
	
	
	УИД = ПолучитьУИДпоНавигационнойСсылке(МассивСсылок);	
	МенеджерОбъекта = ПолучитьМенеджерОбъектаПоНавигационнойСсылке(МассивСсылок);
	Если УИД <> Неопределено И МенеджерОбъекта<> Неопределено Тогда
		СсылкаНаСтатью = МенеджерОбъекта.ПолучитьСсылку(УИД);
	КонецЕсли;	
	Возврат СсылкаНаСтатью;
КонецФункции

Функция ПолучитьСсылкуПоИдентификатору(ВидСправочника, Идентификатор) экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Возврат Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

Функция ПолучитьУИДпоНавигационнойСсылке(МассивСсылок) Экспорт
	Результат=Неопределено;

	МассивПредставлений = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
	Если  МассивПредставлений <> Неопределено Тогда
		стрНавигационнаяССылка = МассивПредставлений.Получить(0).НавигационнаяСсылка;	
		ПозицияНачалаНавССылки=Найти(стрНавигационнаяССылка,"?ref=");
		Если ПозицияНачалаНавССылки<>0 тогда       
			УидНавССылки=Сред(стрНавигационнаяССылка,ПозицияНачалаНавССылки+5,32);
			УидСтрока=Прав(УидНавССылки,8)+"-"+Сред(УидНавССылки,21,4)+"-"+Сред(УидНавССылки,17,4)+"-"+Лев(УидНавССылки,4)+"-"+Сред(УидНавССылки,5,12);
			УИД=Новый УникальныйИдентификатор(УидСтрока);
			Результат=УИД;
		КонецЕсли;
	КонецЕсли;
	Возврат(Результат);
КонецФункции

Функция ПолучитьМенеджерОбъектаПоНавигационнойСсылке(МассивСсылок) Экспорт
	Результат=Неопределено;
	МассивПредставлений = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
	Если  МассивПредставлений <> Неопределено Тогда
		стрНавигационнаяССылка = МассивПредставлений.Получить(0).НавигационнаяСсылка;	
		ПозицияКонцаИмениОбъекта=Найти(стрНавигационнаяССылка,"?ref=");
		Если ПозицияКонцаИмениОбъекта<>0 тогда       
			ПозицияНачалаОбъекта = 0;
			//Ищем начало
			Инд = ПозицияКонцаИмениОбъекта;
			Пока Инд <> 0 Цикл
				Если Сред(стрНавигационнаяССылка,Инд,1) = "/" Тогда
					ПозицияНачалаОбъекта = Инд+1;
					Прервать;
				КонецЕсли;	
				Инд = Инд - 1;
			КонецЦикла;
			
			Если Сред(стрНавигационнаяССылка,ПозицияНачалаОбъекта,10) = "справочник" Тогда 
				НомерСимволаНачала = ПозицияНачалаОбъекта+11;
				КоличествоСимволов = ПозицияКонцаИмениОбъекта - НомерСимволаНачала;
				ИмяОбъекта = Сред(стрНавигационнаяССылка,НомерСимволаНачала,КоличествоСимволов);
				Попытка
					Результат = Справочники[ИмяОбъекта];
				Исключение
					Результат = Неопределено;
				КонецПопытки;	
			ИначеЕсли Сред(стрНавигационнаяССылка,ПозицияНачалаОбъекта,8) = "документ" Тогда	
				НомерСимволаНачала = ПозицияНачалаОбъекта+9;
				КоличествоСимволов = ПозицияКонцаИмениОбъекта - НомерСимволаНачала;
				ИмяОбъекта = Сред(стрНавигационнаяССылка,НомерСимволаНачала,КоличествоСимволов);
				Попытка
					Результат = Документы[ИмяОбъекта];
				Исключение
					Результат = Неопределено;
				КонецПопытки;
			Иначе
				Результат = Неопределено;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;	
	Возврат(Результат);
КонецФункции

// Картинки
Функция ДобавитьКартинку(Картинки, Идентификатор, ИмяКартинки, ТаблицаАдресовКартинок) Экспорт
	АдресКартинки = ПолучитьАдресВременногоХранилища(ТаблицаАдресовКартинок, ИмяКартинки);
	
	Если ПустаяСтрока(АдресКартинки) Тогда
		ДанныеКартинки	= БиблиотекаКартинок["БазаЗнаний"+ИмяКартинки];
		АдресКартинки	= ПоместитьВоВременноеХранилище(ДанныеКартинки, Идентификатор);
				
		НоваяСтрока = ТаблицаАдресовКартинок.Добавить();
		НоваяСтрока.Ключ = ИмяКартинки;
		НоваяСтрока.Адрес = АдресКартинки;
	КонецЕсли;
	
	Картинки.Вставить(ИмяКартинки, АдресКартинки);
	
КонецФункции

Функция ПолучитьАдресаОсновныхКартинок(УникальныйИдентификатор,ТаблицаАдресовКартинок) Экспорт
	СтруктураКартинок	= Новый Структура;
	
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Логотип",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Раздел",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Путь",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Статья",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Редактирование",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "ДобавитьРаздел",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "ДобавитьСтатью",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Звезда",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "ЗвездаПустая",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "ЗвездаПоловина",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Печать",ТаблицаАдресовКартинок);
	
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Страница",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Вход",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Плюс",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Минус",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "ПапкаОткрыта",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Папка",ТаблицаАдресовКартинок);
	БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Линия",ТаблицаАдресовКартинок);
    БазаЗнанийСервер.ДобавитьКартинку(СтруктураКартинок, УникальныйИдентификатор, "Пустая",ТаблицаАдресовКартинок);

	Возврат СтруктураКартинок;
	
КонецФункции

Функция ПолучитьСтруктуруАдресовКартинокСтатьи(СсылкаЭлемент,Идентификатор,ТаблицаАдресовКартинок) экспорт
	СоответствиеКартинок = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыHTMLСтраниц.Идентификатор,
		|	ОбъектыHTMLСтраниц.Вложение
		|ИЗ
		|	РегистрСведений.ОбъектыHTMLСтраниц КАК ОбъектыHTMLСтраниц
		|ГДЕ
		|	ОбъектыHTMLСтраниц.Владелец = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", СсылкаЭлемент);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ключ = ВыборкаДетальныеЗаписи.Идентификатор;

		АдресКартинки = ПолучитьАдресВременногоХранилища(ТаблицаАдресовКартинок, Ключ);
		Если ПустаяСтрока(АдресКартинки) Тогда
			ЗначениеКартинки = ВыборкаДетальныеЗаписи.Вложение.Получить();
			АдресКартинки = ПоместитьВоВременноеХранилище(ЗначениеКартинки,Идентификатор);
				
			НоваяСтрока = ТаблицаАдресовКартинок.Добавить();
			НоваяСтрока.Ключ = Ключ;
			НоваяСтрока.Адрес = АдресКартинки;
		КонецЕсли;
		
		СоответствиеКартинок.Вставить(Ключ,АдресКартинки);
	КонецЦикла;
	
	Возврат СоответствиеКартинок;
КонецФункции

Функция ПолучитьАдресВременногоХранилища(ТаблицаАдресовКартинок, ИдКартинки)
	АдресКартинки = "";
	СтруктураПоиска = Новый Структура();
	
	Если ТаблицаАдресовКартинок.Количество() > 0 Тогда
		СтруктураПоиска.Очистить();
		СтруктураПоиска.Вставить("Ключ",ИдКартинки);
		МассивСтрок = ТаблицаАдресовКартинок.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() <> 0 Тогда
			СтрокаКартинки = МассивСтрок.Получить(0);
			АдресКартинки = СтрокаКартинки.Адрес;
		КонецЕсли;	
	КонецЕсли;
	Возврат АдресКартинки;
КонецФункции

Функция КодироватьСтрокуАдресаСайта(СтрокаАдреса) Экспорт
	Возврат  КодироватьСтроку(СтрокаАдреса,СпособКодированияСтроки.URLВКодировкеURL);
КонецФункции

Функция ОбъектБДСуществует(ТестоваяСсылка) Экспорт

    МД = Метаданные.НайтиПоТипу(ТипЗнч(ТестоваяСсылка));
    ИмяОбъекта = МД.Имя;
    ПолноеИмяОбъекта = МД.ПолноеИмя();

    Запрос = новый Запрос();
    Запрос.Текст =
    "ВЫБРАТЬ
    |   " + ИмяОбъекта + ".Ссылка КАК СсылкаБД
    |ИЗ
    |   " + ПолноеИмяОбъекта + " КАК " + ИмяОбъекта + "
    |ГДЕ
    |   " + ИмяОбъекта + ".Ссылка = &Cсылка";
    Запрос.УстановитьПараметр("Cсылка", ТестоваяСсылка);
    РезультатЗапроса = Запрос.Выполнить();

    Возврат Не РезультатЗапроса.Пустой();

КонецФункции

