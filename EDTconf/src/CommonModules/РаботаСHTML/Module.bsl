// В случае отстутствия у текста HTML тэгов <html></html>,  <body></body> добавляет их.
// Модифицирует параметр ТекстHTML
//
Процедура ДобавитьНеобходимыеТэгиHTML(ТекстHTML) Экспорт
	
	ПозицияТэгаHTML = СтрНайти(ТекстHTML, "<html");
	ПозицияТэгаBody = СтрНайти(ТекстHTML, "<body");
	Если ПозицияТэгаBody = 0 Тогда
		ТекстHTML = ВКавычках(ТекстHTML, "<body>", "</body>");
	КонецЕсли;
	Если ПозицияТэгаHTML = 0 Тогда
		ТекстHTML = ВКавычках(ТекстHTML, "<html>", "</html>");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ДокументHTML.
//
// Параметры:
// - ТекстHTML (Строка) - в формате HTML
// - Кодировка (Строка) - необязательный
//
Функция ПолучитьДокументHTMLИзТекстаHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	Если ПустаяСтрока(ТекстHTML) Тогда
		Возврат Новый ДокументHTML;
	КонецЕсли;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML;
	
КонецФункции

// Возвращает ДокументHTML.
//
// Параметры:
// - Текст (Строка)
//
Функция ПолучитьДокументHTMLИзПростогоТекста(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементHead = ДокументHTML.СоздатьЭлемент("head");
	ЭлементMeta = ДокументHTML.СоздатьЭлемент("meta");
	
	Атрибут = ДокументHTML.СоздатьАтрибут("content");
	Атрибут.ТекстовоеСодержимое = ?(ЗначениеЗаполнено(Кодировка), "text/html; charset=" + Кодировка, "text/html");
	ЭлементMeta.Атрибуты.УстановитьИменованныйЭлемент(Атрибут);
	
	Атрибут = ДокументHTML.СоздатьАтрибут("http-equiv");
	Атрибут.ТекстовоеСодержимое = "Content-Type";
	ЭлементMeta.Атрибуты.УстановитьИменованныйЭлемент(Атрибут);
	
	ЭлементHead.ДобавитьДочерний(ЭлементMeta);
	ДокументHTML.ЭлементДокумента.ДобавитьДочерний(ЭлементHead);
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	ЭлементБлок = РаботаСHTML.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:Arial;font-size:12px;"));
	
	Текст = СтрЗаменить(Текст, Символы.ВК + Символы.ПС, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(7), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(8), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВТаб, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(12), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВК, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(14), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(28), " ");
	Текст = СтрЗаменить(Текст, Символ(29), " ");
	Текст = СтрЗаменить(Текст, Символ(30), " ");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	Для К = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(К);
		Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
		Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
		Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Абзац = РаботаСHTML.СоздатьЭлементСАтрибутами(
			ДокументHTML,
			"p",
			Новый Структура("style", "margin-top:2px;margin-bottom:2px;"));
		Абзац.ДобавитьДочерний(ДокументHTML.СоздатьТекстовыйУзел(Строка));
		ЭлементБлок.ДобавитьДочерний(Абзац);
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Возвращает текст HTML.
//
Функция ПолучитьТекстHTMLИзПростогоТекста(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	
	ТекстДляВставки = "";
	ЗаменитьУправляющиеСимволы(Текст);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	Для К = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(К);
		
		ЗаменитьТабуляцииИПробелы(Строка);
		ЗаменитьСпецСимволыHTML(Строка);
		
		ТекстАбзаца =
			"<p style=""margin-top:2px;margin-bottom:2px;"">
			|[СтрокаДляВставки]
			|</p>";
		ТекстАбзаца = СтрЗаменить(ТекстАбзаца, "[СтрокаДляВставки]", Строка);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстДляВставки,
			Символы.ПС,
			ТекстАбзаца);
	КонецЦикла;
	
	ТекстHTML =
		"<html>
		|<head>
		|<meta content=""text/html; charset=[charset]"" http-equiv=""Content-Type"">
		//|<meta http-equiv=""X-UA-Compatible"" content=""IE=EmulateIE7"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|</head>
		|<body>
		|<div style=""font-family:Arial;font-size:12px;"">
		|[ТекстДляВставки]
		|</div>
		|</body>
		|</html>";
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "[charset]", Кодировка);
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML, "; charset=[charset]", "");
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "[ТекстДляВставки]", ТекстДляВставки);
	
	Возврат ТекстHTML;
	
КонецФункции

// Заменяет спец. символы на соответсвующие им ссылки.
// Модифицирует параметр. Возвращает строку.
//
Функция ЗаменитьСпецСимволыHTML(Строка) Экспорт
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	ЗаменитьСпецСимволHTML(Строка, 193, "Aacute");
	ЗаменитьСпецСимволHTML(Строка, 225, "aacute");
	ЗаменитьСпецСимволHTML(Строка, 226, "acirc");
	ЗаменитьСпецСимволHTML(Строка, 194, "Acirc");
	ЗаменитьСпецСимволHTML(Строка, 180, "acute");
	ЗаменитьСпецСимволHTML(Строка, 230, "aelig");
	ЗаменитьСпецСимволHTML(Строка, 198, "AElig");
	ЗаменитьСпецСимволHTML(Строка, 192, "Agrave");
	ЗаменитьСпецСимволHTML(Строка, 224, "agrave");
	ЗаменитьСпецСимволHTML(Строка, 8501, "alefsym");
	ЗаменитьСпецСимволHTML(Строка, 913, "Alpha");
	ЗаменитьСпецСимволHTML(Строка, 945, "alpha");
	ЗаменитьСпецСимволHTML(Строка, 8743, "and");
	ЗаменитьСпецСимволHTML(Строка, 8736, "ang");
	ЗаменитьСпецСимволHTML(Строка, 229, "aring");
	ЗаменитьСпецСимволHTML(Строка, 197, "Aring");
	ЗаменитьСпецСимволHTML(Строка, 8776, "asymp");
	ЗаменитьСпецСимволHTML(Строка, 195, "Atilde");
	ЗаменитьСпецСимволHTML(Строка, 227, "atilde");
	ЗаменитьСпецСимволHTML(Строка, 196, "Auml");
	ЗаменитьСпецСимволHTML(Строка, 228, "auml");
	ЗаменитьСпецСимволHTML(Строка, 8222, "bdquo");
	ЗаменитьСпецСимволHTML(Строка, 914, "Beta");
	ЗаменитьСпецСимволHTML(Строка, 946, "beta");
	ЗаменитьСпецСимволHTML(Строка, 166, "brvbar");
	ЗаменитьСпецСимволHTML(Строка, 8226, "bull");
	ЗаменитьСпецСимволHTML(Строка, 8745, "cap");
	ЗаменитьСпецСимволHTML(Строка, 199, "Ccedil");
	ЗаменитьСпецСимволHTML(Строка, 231, "ccedil");
	ЗаменитьСпецСимволHTML(Строка, 184, "cedil");
	ЗаменитьСпецСимволHTML(Строка, 162, "cent");
	ЗаменитьСпецСимволHTML(Строка, 967, "chi");
	ЗаменитьСпецСимволHTML(Строка, 935, "Chi");
	ЗаменитьСпецСимволHTML(Строка, 710, "circ");
	ЗаменитьСпецСимволHTML(Строка, 9827, "clubs");
	ЗаменитьСпецСимволHTML(Строка, 8773, "cong");
	ЗаменитьСпецСимволHTML(Строка, 169, "copy");
	ЗаменитьСпецСимволHTML(Строка, 8629, "crarr");
	ЗаменитьСпецСимволHTML(Строка, 8746, "cup");
	ЗаменитьСпецСимволHTML(Строка, 164, "curren");
	ЗаменитьСпецСимволHTML(Строка, 8224, "dagger");
	ЗаменитьСпецСимволHTML(Строка, 8225, "Dagger");
	ЗаменитьСпецСимволHTML(Строка, 8659, "dArr");
	ЗаменитьСпецСимволHTML(Строка, 8595, "darr");
	ЗаменитьСпецСимволHTML(Строка, 176, "deg");
	ЗаменитьСпецСимволHTML(Строка, 916, "Delta");
	ЗаменитьСпецСимволHTML(Строка, 948, "delta");
	ЗаменитьСпецСимволHTML(Строка, 9830, "diams");
	ЗаменитьСпецСимволHTML(Строка, 247, "divide");
	ЗаменитьСпецСимволHTML(Строка, 233, "eacute");
	ЗаменитьСпецСимволHTML(Строка, 201, "Eacute");
	ЗаменитьСпецСимволHTML(Строка, 202, "Ecirc");
	ЗаменитьСпецСимволHTML(Строка, 234, "ecirc");
	ЗаменитьСпецСимволHTML(Строка, 232, "egrave");
	ЗаменитьСпецСимволHTML(Строка, 200, "Egrave");
	ЗаменитьСпецСимволHTML(Строка, 8709, "empty");
	ЗаменитьСпецСимволHTML(Строка, 8195, "emsp");
	ЗаменитьСпецСимволHTML(Строка, 8194, "ensp");
	ЗаменитьСпецСимволHTML(Строка, 949, "epsilon");
	ЗаменитьСпецСимволHTML(Строка, 917, "Epsilon");
	ЗаменитьСпецСимволHTML(Строка, 8801, "equiv");
	ЗаменитьСпецСимволHTML(Строка, 919, "Eta");
	ЗаменитьСпецСимволHTML(Строка, 951, "eta");
	ЗаменитьСпецСимволHTML(Строка, 240, "eth");
	ЗаменитьСпецСимволHTML(Строка, 208, "ETH");
	ЗаменитьСпецСимволHTML(Строка, 235, "euml");
	ЗаменитьСпецСимволHTML(Строка, 203, "Euml");
	ЗаменитьСпецСимволHTML(Строка, 8364, "euro");
	ЗаменитьСпецСимволHTML(Строка, 8707, "exist");
	ЗаменитьСпецСимволHTML(Строка, 402, "fnof");
	ЗаменитьСпецСимволHTML(Строка, 8704, "forall");
	ЗаменитьСпецСимволHTML(Строка, 189, "frac12");
	ЗаменитьСпецСимволHTML(Строка, 188, "frac14");
	ЗаменитьСпецСимволHTML(Строка, 190, "frac34");
	ЗаменитьСпецСимволHTML(Строка, 8260, "frasl");
	ЗаменитьСпецСимволHTML(Строка, 915, "Gamma");
	ЗаменитьСпецСимволHTML(Строка, 947, "gamma");
	ЗаменитьСпецСимволHTML(Строка, 8805, "ge");
	ЗаменитьСпецСимволHTML(Строка, 62, "gt");
	ЗаменитьСпецСимволHTML(Строка, 8660, "hArr");
	ЗаменитьСпецСимволHTML(Строка, 8596, "harr");
	ЗаменитьСпецСимволHTML(Строка, 9829, "hearts");
	ЗаменитьСпецСимволHTML(Строка, 8230, "hellip");
	ЗаменитьСпецСимволHTML(Строка, 237, "iacute");
	ЗаменитьСпецСимволHTML(Строка, 205, "Iacute");
	ЗаменитьСпецСимволHTML(Строка, 238, "icirc");
	ЗаменитьСпецСимволHTML(Строка, 206, "Icirc");
	ЗаменитьСпецСимволHTML(Строка, 161, "iexcl");
	ЗаменитьСпецСимволHTML(Строка, 204, "Igrave");
	ЗаменитьСпецСимволHTML(Строка, 236, "igrave");
	ЗаменитьСпецСимволHTML(Строка, 8465, "image");
	ЗаменитьСпецСимволHTML(Строка, 8734, "infin");
	ЗаменитьСпецСимволHTML(Строка, 8747, "int");
	ЗаменитьСпецСимволHTML(Строка, 921, "Iota");
	ЗаменитьСпецСимволHTML(Строка, 953, "iota");
	ЗаменитьСпецСимволHTML(Строка, 191, "iquest");
	ЗаменитьСпецСимволHTML(Строка, 8712, "isin");
	ЗаменитьСпецСимволHTML(Строка, 207, "Iuml");
	ЗаменитьСпецСимволHTML(Строка, 239, "iuml");
	ЗаменитьСпецСимволHTML(Строка, 922, "Kappa");
	ЗаменитьСпецСимволHTML(Строка, 954, "kappa");
	ЗаменитьСпецСимволHTML(Строка, 955, "lambda");
	ЗаменитьСпецСимволHTML(Строка, 923, "Lambda");
	ЗаменитьСпецСимволHTML(Строка, 9001, "lang");
	ЗаменитьСпецСимволHTML(Строка, 171, "laquo");
	ЗаменитьСпецСимволHTML(Строка, 8592, "larr");
	ЗаменитьСпецСимволHTML(Строка, 8656, "lArr");
	ЗаменитьСпецСимволHTML(Строка, 8968, "lceil");
	ЗаменитьСпецСимволHTML(Строка, 8220, "ldquo");
	ЗаменитьСпецСимволHTML(Строка, 8804, "le");
	ЗаменитьСпецСимволHTML(Строка, 8970, "lfloor");
	ЗаменитьСпецСимволHTML(Строка, 8727, "lowast");
	ЗаменитьСпецСимволHTML(Строка, 9674, "loz");
	ЗаменитьСпецСимволHTML(Строка, 8206, "lrm");
	ЗаменитьСпецСимволHTML(Строка, 8249, "lsaquo");
	ЗаменитьСпецСимволHTML(Строка, 8216, "lsquo");
	ЗаменитьСпецСимволHTML(Строка, 60, "lt");
	ЗаменитьСпецСимволHTML(Строка, 175, "macr");
	ЗаменитьСпецСимволHTML(Строка, 8212, "mdash");
	ЗаменитьСпецСимволHTML(Строка, 181, "micro");
	ЗаменитьСпецСимволHTML(Строка, 183, "middot");
	ЗаменитьСпецСимволHTML(Строка, 8722, "minus");
	ЗаменитьСпецСимволHTML(Строка, 924, "Mu");
	ЗаменитьСпецСимволHTML(Строка, 956, "mu");
	ЗаменитьСпецСимволHTML(Строка, 8711, "nabla");
	ЗаменитьСпецСимволHTML(Строка, 160, "nbsp");
	ЗаменитьСпецСимволHTML(Строка, 8211, "ndash");
	ЗаменитьСпецСимволHTML(Строка, 8800, "ne");
	ЗаменитьСпецСимволHTML(Строка, 8715, "ni");
	ЗаменитьСпецСимволHTML(Строка, 172, "not");
	ЗаменитьСпецСимволHTML(Строка, 8713, "notin");
	ЗаменитьСпецСимволHTML(Строка, 8836, "nsub");
	ЗаменитьСпецСимволHTML(Строка, 241, "ntilde");
	ЗаменитьСпецСимволHTML(Строка, 209, "Ntilde");
	ЗаменитьСпецСимволHTML(Строка, 925, "Nu");
	ЗаменитьСпецСимволHTML(Строка, 957, "nu");
	ЗаменитьСпецСимволHTML(Строка, 243, "oacute");
	ЗаменитьСпецСимволHTML(Строка, 211, "Oacute");
	ЗаменитьСпецСимволHTML(Строка, 212, "Ocirc");
	ЗаменитьСпецСимволHTML(Строка, 244, "ocirc");
	ЗаменитьСпецСимволHTML(Строка, 338, "OElig");
	ЗаменитьСпецСимволHTML(Строка, 339, "oelig");
	ЗаменитьСпецСимволHTML(Строка, 242, "ograve");
	ЗаменитьСпецСимволHTML(Строка, 210, "Ograve");
	ЗаменитьСпецСимволHTML(Строка, 8254, "oline");
	ЗаменитьСпецСимволHTML(Строка, 969, "omega");
	ЗаменитьСпецСимволHTML(Строка, 937, "Omega");
	ЗаменитьСпецСимволHTML(Строка, 927, "Omicron");
	ЗаменитьСпецСимволHTML(Строка, 959, "omicron");
	ЗаменитьСпецСимволHTML(Строка, 8853, "oplus");
	ЗаменитьСпецСимволHTML(Строка, 8744, "or");
	ЗаменитьСпецСимволHTML(Строка, 170, "ordf");
	ЗаменитьСпецСимволHTML(Строка, 186, "ordm");
	ЗаменитьСпецСимволHTML(Строка, 216, "Oslash");
	ЗаменитьСпецСимволHTML(Строка, 248, "oslash");
	ЗаменитьСпецСимволHTML(Строка, 213, "Otilde");
	ЗаменитьСпецСимволHTML(Строка, 245, "otilde");
	ЗаменитьСпецСимволHTML(Строка, 8855, "otimes");
	ЗаменитьСпецСимволHTML(Строка, 214, "Ouml");
	ЗаменитьСпецСимволHTML(Строка, 246, "ouml");
	ЗаменитьСпецСимволHTML(Строка, 182, "para");
	ЗаменитьСпецСимволHTML(Строка, 8706, "part");
	ЗаменитьСпецСимволHTML(Строка, 8240, "permil");
	ЗаменитьСпецСимволHTML(Строка, 8869, "perp");
	ЗаменитьСпецСимволHTML(Строка, 966, "phi");
	ЗаменитьСпецСимволHTML(Строка, 934, "Phi");
	ЗаменитьСпецСимволHTML(Строка, 928, "Pi");
	ЗаменитьСпецСимволHTML(Строка, 960, "pi");
	ЗаменитьСпецСимволHTML(Строка, 982, "piv");
	ЗаменитьСпецСимволHTML(Строка, 177, "plusmn");
	ЗаменитьСпецСимволHTML(Строка, 163, "pound");
	ЗаменитьСпецСимволHTML(Строка, 8243, "Prime");
	ЗаменитьСпецСимволHTML(Строка, 8242, "prime");
	ЗаменитьСпецСимволHTML(Строка, 8719, "prod");
	ЗаменитьСпецСимволHTML(Строка, 8733, "prop");
	ЗаменитьСпецСимволHTML(Строка, 968, "psi");
	ЗаменитьСпецСимволHTML(Строка, 936, "Psi");
	ЗаменитьСпецСимволHTML(Строка, 34, "quot");
	ЗаменитьСпецСимволHTML(Строка, 8730, "radic");
	ЗаменитьСпецСимволHTML(Строка, 9002, "rang");
	ЗаменитьСпецСимволHTML(Строка, 187, "raquo");
	ЗаменитьСпецСимволHTML(Строка, 8658, "rArr");
	ЗаменитьСпецСимволHTML(Строка, 8594, "rarr");
	ЗаменитьСпецСимволHTML(Строка, 8969, "rceil");
	ЗаменитьСпецСимволHTML(Строка, 8221, "rdquo");
	ЗаменитьСпецСимволHTML(Строка, 8476, "real");
	ЗаменитьСпецСимволHTML(Строка, 174, "reg");
	ЗаменитьСпецСимволHTML(Строка, 8971, "rfloor");
	ЗаменитьСпецСимволHTML(Строка, 929, "Rho");
	ЗаменитьСпецСимволHTML(Строка, 961, "rho");
	ЗаменитьСпецСимволHTML(Строка, 8207, "rlm");
	ЗаменитьСпецСимволHTML(Строка, 8250, "rsaquo");
	ЗаменитьСпецСимволHTML(Строка, 8217, "rsquo");
	ЗаменитьСпецСимволHTML(Строка, 8218, "sbquo");
	ЗаменитьСпецСимволHTML(Строка, 352, "Scaron");
	ЗаменитьСпецСимволHTML(Строка, 353, "scaron");
	ЗаменитьСпецСимволHTML(Строка, 8901, "sdot");
	ЗаменитьСпецСимволHTML(Строка, 167, "sect");
	ЗаменитьСпецСимволHTML(Строка, 173, "shy");
	ЗаменитьСпецСимволHTML(Строка, 931, "Sigma");
	ЗаменитьСпецСимволHTML(Строка, 963, "sigma");
	ЗаменитьСпецСимволHTML(Строка, 962, "sigmaf");
	ЗаменитьСпецСимволHTML(Строка, 8764, "sim");
	ЗаменитьСпецСимволHTML(Строка, 9824, "spades");
	ЗаменитьСпецСимволHTML(Строка, 8834, "sub");
	ЗаменитьСпецСимволHTML(Строка, 8838, "sube");
	ЗаменитьСпецСимволHTML(Строка, 8721, "sum");
	ЗаменитьСпецСимволHTML(Строка, 8835, "sup");
	ЗаменитьСпецСимволHTML(Строка, 185, "sup1");
	ЗаменитьСпецСимволHTML(Строка, 178, "sup2");
	ЗаменитьСпецСимволHTML(Строка, 179, "sup3");
	ЗаменитьСпецСимволHTML(Строка, 8839, "supe");
	ЗаменитьСпецСимволHTML(Строка, 223, "szlig");
	ЗаменитьСпецСимволHTML(Строка, 932, "Tau");
	ЗаменитьСпецСимволHTML(Строка, 964, "tau");
	ЗаменитьСпецСимволHTML(Строка, 8756, "there4");
	ЗаменитьСпецСимволHTML(Строка, 920, "Theta");
	ЗаменитьСпецСимволHTML(Строка, 952, "theta");
	ЗаменитьСпецСимволHTML(Строка, 977, "thetasym");
	ЗаменитьСпецСимволHTML(Строка, 8201, "thinsp");
	ЗаменитьСпецСимволHTML(Строка, 222, "THORN");
	ЗаменитьСпецСимволHTML(Строка, 254, "thorn");
	ЗаменитьСпецСимволHTML(Строка, 732, "tilde");
	ЗаменитьСпецСимволHTML(Строка, 215, "times");
	ЗаменитьСпецСимволHTML(Строка, 8482, "trade");
	ЗаменитьСпецСимволHTML(Строка, 250, "uacute");
	ЗаменитьСпецСимволHTML(Строка, 218, "Uacute");
	ЗаменитьСпецСимволHTML(Строка, 8657, "uArr");
	ЗаменитьСпецСимволHTML(Строка, 8593, "uarr");
	ЗаменитьСпецСимволHTML(Строка, 251, "ucirc");
	ЗаменитьСпецСимволHTML(Строка, 219, "Ucirc");
	ЗаменитьСпецСимволHTML(Строка, 217, "Ugrave");
	ЗаменитьСпецСимволHTML(Строка, 249, "ugrave");
	ЗаменитьСпецСимволHTML(Строка, 168, "uml");
	ЗаменитьСпецСимволHTML(Строка, 978, "upsih");
	ЗаменитьСпецСимволHTML(Строка, 965, "upsilon");
	ЗаменитьСпецСимволHTML(Строка, 933, "Upsilon");
	ЗаменитьСпецСимволHTML(Строка, 252, "uuml");
	ЗаменитьСпецСимволHTML(Строка, 220, "Uuml");
	ЗаменитьСпецСимволHTML(Строка, 8472, "weierp");
	ЗаменитьСпецСимволHTML(Строка, 958, "xi");
	ЗаменитьСпецСимволHTML(Строка, 926, "Xi");
	ЗаменитьСпецСимволHTML(Строка, 253, "yacute");
	ЗаменитьСпецСимволHTML(Строка, 221, "Yacute");
	ЗаменитьСпецСимволHTML(Строка, 165, "yen");
	ЗаменитьСпецСимволHTML(Строка, 255, "yuml");
	ЗаменитьСпецСимволHTML(Строка, 376, "Yuml");
	ЗаменитьСпецСимволHTML(Строка, 918, "Zeta");
	ЗаменитьСпецСимволHTML(Строка, 950, "zeta");
	ЗаменитьСпецСимволHTML(Строка, 8205, "zwj");
	ЗаменитьСпецСимволHTML(Строка, 8204, "zwnj");
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

Процедура ЗаменитьТабуляцииИПробелы(Строка)
	
	Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
	Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
	Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	
КонецПроцедуры

Процедура ЗаменитьУправляющиеСимволы(Текст)
	
	Текст = СтрЗаменить(Текст, Символы.ВК + Символы.ПС, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(7), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(8), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВТаб, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(12), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВК, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(14), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(28), " ");
	Текст = СтрЗаменить(Текст, Символ(29), " ");
	Текст = СтрЗаменить(Текст, Символ(30), " ");
	
КонецПроцедуры

// Добавляет текстовый узел к ДокументуHTML.
//
Процедура ДобавитьТекстовыйУзел(
	ЭлементРодитель,
	Текст,
	ВыделятьЖирным = Ложь,
	ДобавлятьПереносСтроки = Ложь) Экспорт
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ДобавитьДочерний(ТекстовыйУзел);
		ЭлементРодитель.ДобавитьДочерний(ЭлементЖирный);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
	КонецЕсли;
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры 

// Получает текстовое содержимое из ДокументаHTML.
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Добавляет элемент в ДокументHTML.
//
Функция СоздатьЭлементСАтрибутами(ДокументHTML, Имя, Атрибуты) Экспорт
	
	ЭлементHTML = ДокументHTML.СоздатьЭлемент(Имя);
	Для каждого Атрибут Из Атрибуты Цикл
		УстановитьАтрибутЭлементаHTML(ЭлементHTML, Атрибут.Ключ, Атрибут.Значение);
	КонецЦикла;
	
	Возврат ЭлементHTML;
	
КонецФункции

// Добавляет элемент в ДокументHTML.
//
Функция ДобавитьЭлементСАтрибутами(ЭлементРодитель, Имя, Атрибуты) Экспорт
	
	ЭлементHTML = СоздатьЭлементСАтрибутами(ЭлементРодитель.ДокументВладелец, Имя, Атрибуты);
	ЭлементРодитель.ДобавитьДочерний(ЭлементHTML);
	
	Возврат ЭлементHTML;
	
КонецФункции

// Устанавливает атрибуты элементу ДокументаHTML.
//
Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML, Имя, ТекстовоеСодержимое) Экспорт
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

// Вставляет ЭлементHTML на первое место в массив дочерних элементов ДокументаHTML.
//
Процедура ВставитьЭлементHTMLПервымДочернимЭлементом(
	ЭлементРодитель,
	ВставляемыйЭлемент) Экспорт
	
	Если ЭлементРодитель.ДочерниеУзлы.Количество() > 0 Тогда
		ЭлементРодитель.ВставитьПеред(ВставляемыйЭлемент, ЭлементРодитель.ДочерниеУзлы[0]);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ВставляемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Получает текстовое содержимое ДокументаHTML.
//
Функция ПолучитьПростойТекстИзHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>", "</o:p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>" + Символы.ПС + Символы.ПС, "</o:p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>", "</p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>" + Символы.ПС + Символы.ПС, "</p>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>", "</div>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>" + Символы.ПС + Символы.ПС, "</div>" + Символы.ПС);
	ТекстHTML = СтрЗаменить(ТекстHTML, "<br>", Символы.ПС + Символы.ПС);
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Если ДокументHTML.Тело = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
КонецФункции

Функция ПолучитьТекстHTMLБезHead(ТекстHTML) Экспорт
	ТекстHTMLБезHead = "";
	НомерСимволаНачала = СтрНайти(ТекстHTML,"<body>");
	НомерСимволаКонца = СтрНайти(ТекстHTML,"</body>");
	
	Если НомерСимволаНачала<>0 Тогда
		НомерСимволаНачала = НомерСимволаНачала + 5;
		ТекстHTMLБезHead = Сред(ТекстHTML,НомерСимволаНачала+1,НомерСимволаКонца - НомерСимволаНачала-1);
	Иначе
		ТекстHTMLБезHead = ТекстHTML;
	КонецЕсли;	

	Возврат ТекстHTMLБезHead;
КонецФункции

&НаКлиенте
//Получает объекты страницы в локальный каталог пользователя (для работы в режиме веб клиента)
//Для работы необходимо чтобы в таблице объектов были
//	ИмяЛокальногоФайла - имя объекта (как он задан внутри страницы)
//  Адрес - ссылка на временное хранилище с телом объекта. Этот же адрес используется для вызова объекта со страницы
//Процедура при получении объекта заменяет его вызов на странице на относительный путь
Процедура ПередатьОбъектыСтраницыНаКлиента(ТекстСтраницы,ТаблицаОбъектовСтраницы)  экспорт 
	Возврат; //закоментировать в случае необходимости сохранения картинок на клиента в виде файлов
	//Иначе они передаются на клиента как навигационные ссылки

	МассивКПолучению = Новый Массив();
	МассивПолученных = Новый Массив();
	КаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Если Не ЗначениеЗаполнено(КаталогПользователя) Тогда
		Сообщить("Не заполнен основной каталог пользователя для временных файлов!");
		Возврат;
	КонецЕслИ;
	
	ОписаниеОшибки = "";
	Если Не ФайловыеФункцииСлужебныйКлиентПовтИсп.ПроверитьСуществованиеКаталога(КаталогПользователя,ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(Неопределено,ОписаниеОшибки);
		Возврат;
	КонецЕсли;	
		
	Для Каждого Стр Из ТаблицаОбъектовСтраницы Цикл
		Если ЗначениеЗаполнено(Стр.ИмяЛокальногоФайла) Тогда
			Продолжить;
		КонецЕсли;			
		ФайлКПолучению = Новый ОписаниеПередаваемогоФайла();
		ФайлКПолучению.Хранение = Стр.Адрес;
		
		#Если ВебКлиент Тогда
			ИмяЛокальногоФайла = КаталогПользователя + Стр.Ключ;
		#Иначе
			ИмяЛокальногоФайла = ПолучитьИмяВременногоФайла();
		#КонецЕсли
		
		ФайлКПолучению.Имя = ИмяЛокальногоФайла;
		МассивКПолучению.Добавить(ФайлКПолучению);
		Стр.ИмяЛокальногоФайла = ИмяЛокальногоФайла;
	КонецЦикла;	
	Если МассивКПолучению.Количество()> 0 Тогда
		Попытка
			ПолучитьФайлы(МассивКПолучению,,,Ложь);
		Исключение
			Сообщить("Ошибка при получении файлов "+ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;
	
	Для Каждого Стр Из ТаблицаОбъектовСтраницы Цикл
		Если Не ЗначениеЗаполнено(Стр.ИмяЛокальногоФайла) Тогда
			Продолжить;
		КонецЕсли;
		ТекстСтраницы = СтрЗаменить(ТекстСтраницы,Стр.Адрес,Стр.ИмяЛокальногоФайла);	
	КонецЦикла;	
	
КонецПроцедуры

// Получает объект ДокументHTML из обычного текста
//
// Параметры
//  Текст  - Строка - текст из которого будет создан документ HTML
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML
Функция ПолучитьДокументHTMLИзОбычногоТекста(Текст) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для Инд = 1 По КоличествоСтрок Цикл
		ДобавитьТекстовыйУзел(ЭлементБлок, СтрПолучитьСтроку(Текст, Инд), Ложь, ?(Инд = КоличествоСтрок, Ложь, Истина));
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции




